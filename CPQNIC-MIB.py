#
# PySNMP MIB module CPQNIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/dauren/projects/snmp-kmg/CPQNIC-MIB.mib
# Produced by pysmi-0.3.1 at Thu Aug  2 17:45:06 2018
# On host dauren-pc platform Linux version 4.15.0-29-generic by user dauren
# Using Python version 2.7.15rc1 (default, Apr 15 2018, 21:51:34) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
cpqSiServerSystemId, = mibBuilder.importSymbols("CPQSINFO-MIB", "cpqSiServerSystemId")
cpqSePciSlotBoardName, = mibBuilder.importSymbols("CPQSTDEQ-MIB", "cpqSePciSlotBoardName")
ipAdEntAddr, = mibBuilder.importSymbols("IP-MIB", "ipAdEntAddr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqNic = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 18))
cpqNicMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 18, 1))
cpqNicComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 18, 2))
cpqNicInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 18, 2, 1))
cpqNicIfLogMap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 18, 2, 2))
cpqNicIfPhysAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 18, 2, 3))
cpqNicOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 18, 2, 1, 4))
cpqNicIfVlanMap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 18, 2, 4))
cpqNicVirusThrottle = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 18, 2, 5))
cpqNicMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicMibRevMajor.setStatus('mandatory')
cpqNicMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicMibRevMinor.setStatus('mandatory')
cpqNicMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 18, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicMibCondition.setStatus('mandatory')
cpqNicOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 18, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqNicOsCommonPollFreq.setStatus('mandatory')
cpqNicOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 18, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqNicOsCommonModuleTable.setStatus('deprecated')
cpqNicOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 18, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQNIC-MIB", "cpqNicOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqNicOsCommonModuleEntry.setStatus('deprecated')
cpqNicOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicOsCommonModuleIndex.setStatus('deprecated')
cpqNicOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicOsCommonModuleName.setStatus('deprecated')
cpqNicOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicOsCommonModuleVersion.setStatus('deprecated')
cpqNicOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicOsCommonModuleDate.setStatus('deprecated')
cpqNicOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicOsCommonModulePurpose.setStatus('deprecated')
cpqNicIfLogMapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1), )
if mibBuilder.loadTexts: cpqNicIfLogMapTable.setStatus('mandatory')
cpqNicIfLogMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1), ).setIndexNames((0, "CPQNIC-MIB", "cpqNicIfLogMapIndex"))
if mibBuilder.loadTexts: cpqNicIfLogMapEntry.setStatus('mandatory')
cpqNicIfLogMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapIndex.setStatus('mandatory')
cpqNicIfLogMapIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapIfNumber.setStatus('mandatory')
cpqNicIfLogMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapDescription.setStatus('mandatory')
cpqNicIfLogMapGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("redundantPair", 3), ("nft", 4), ("alb", 5), ("fec", 6), ("gec", 7), ("ad", 8), ("slb", 9), ("tlb", 10), ("redundancySet", 11), ("switchInd", 12), ("lacp", 13), ("team", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapGroupType.setStatus('mandatory')
cpqNicIfLogMapAdapterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapAdapterCount.setStatus('mandatory')
cpqNicIfLogMapAdapterOKCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapAdapterOKCount.setStatus('mandatory')
cpqNicIfLogMapPhysicalAdapters = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapPhysicalAdapters.setStatus('mandatory')
cpqNicIfLogMapMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapMACAddress.setStatus('mandatory')
cpqNicIfLogMapSwitchoverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("manual", 3), ("switchOnFail", 4), ("preferredPrimary", 5), ("auto", 6), ("preferenceOrder", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapSwitchoverMode.setStatus('mandatory')
cpqNicIfLogMapCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapCondition.setStatus('mandatory')
cpqNicIfLogMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("primaryFailed", 3), ("standbyFailed", 4), ("groupFailed", 5), ("redundancyReduced", 6), ("redundancyLost", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapStatus.setStatus('mandatory')
cpqNicIfLogMapNumSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapNumSwitchovers.setStatus('mandatory')
cpqNicIfLogMapHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapHwLocation.setStatus('optional')
cpqNicIfLogMapSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapSpeed.setStatus('mandatory')
cpqNicIfLogMapVlanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapVlanCount.setStatus('mandatory')
cpqNicIfLogMapVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapVlans.setStatus('mandatory')
cpqNicIfLogMapLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapLastChange.setStatus('mandatory')
cpqNicIfLogMapAdvancedTeaming = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapAdvancedTeaming.setStatus('mandatory')
cpqNicIfLogMapSpeedMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapSpeedMbps.setStatus('optional')
cpqNicIfLogMapIPV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapIPV6Address.setStatus('optional')
cpqNicIfLogMapLACNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapLACNumber.setStatus('optional')
cpqNicIfLogMapDHCP = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapDHCP.setStatus('mandatory')
cpqNicIfLogMapPciLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapPciLocation.setStatus('optional')
cpqNicIfLogMapOverallCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 18, 2, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfLogMapOverallCondition.setStatus('mandatory')
cpqNicIfPhysAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1), )
if mibBuilder.loadTexts: cpqNicIfPhysAdapterTable.setStatus('mandatory')
cpqNicIfPhysAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1), ).setIndexNames((0, "CPQNIC-MIB", "cpqNicIfPhysAdapterIndex"))
if mibBuilder.loadTexts: cpqNicIfPhysAdapterEntry.setStatus('mandatory')
cpqNicIfPhysAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterIndex.setStatus('mandatory')
cpqNicIfPhysAdapterIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterIfNumber.setStatus('mandatory')
cpqNicIfPhysAdapterRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255)).clone(namedValues=NamedValues(("unknown", 1), ("primary", 2), ("secondary", 3), ("member", 4), ("txRx", 5), ("tx", 6), ("standby", 7), ("none", 8), ("active", 9), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterRole.setStatus('mandatory')
cpqNicIfPhysAdapterMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterMACAddress.setStatus('mandatory')
cpqNicIfPhysAdapterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterSlot.setStatus('mandatory')
cpqNicIfPhysAdapterIoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterIoAddr.setStatus('mandatory')
cpqNicIfPhysAdapterIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterIrq.setStatus('mandatory')
cpqNicIfPhysAdapterDma = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterDma.setStatus('mandatory')
cpqNicIfPhysAdapterMemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterMemAddr.setStatus('mandatory')
cpqNicIfPhysAdapterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterPort.setStatus('mandatory')
cpqNicIfPhysAdapterDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("unknown", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterDuplexState.setStatus('mandatory')
cpqNicIfPhysAdapterCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterCondition.setStatus('mandatory')
cpqNicIfPhysAdapterState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("standby", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterState.setStatus('mandatory')
cpqNicIfPhysAdapterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("generalFailure", 3), ("linkFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterStatus.setStatus('mandatory')
cpqNicIfPhysAdapterStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterStatsValid.setStatus('mandatory')
cpqNicIfPhysAdapterGoodTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterGoodTransmits.setStatus('mandatory')
cpqNicIfPhysAdapterGoodReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterGoodReceives.setStatus('mandatory')
cpqNicIfPhysAdapterBadTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterBadTransmits.setStatus('mandatory')
cpqNicIfPhysAdapterBadReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterBadReceives.setStatus('mandatory')
cpqNicIfPhysAdapterAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterAlignmentErrors.setStatus('mandatory')
cpqNicIfPhysAdapterFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterFCSErrors.setStatus('mandatory')
cpqNicIfPhysAdapterSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterSingleCollisionFrames.setStatus('mandatory')
cpqNicIfPhysAdapterMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterMultipleCollisionFrames.setStatus('mandatory')
cpqNicIfPhysAdapterDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterDeferredTransmissions.setStatus('mandatory')
cpqNicIfPhysAdapterLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterLateCollisions.setStatus('mandatory')
cpqNicIfPhysAdapterExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterExcessiveCollisions.setStatus('mandatory')
cpqNicIfPhysAdapterInternalMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterInternalMacTransmitErrors.setStatus('mandatory')
cpqNicIfPhysAdapterCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterCarrierSenseErrors.setStatus('mandatory')
cpqNicIfPhysAdapterFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterFrameTooLongs.setStatus('mandatory')
cpqNicIfPhysAdapterInternalMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterInternalMacReceiveErrors.setStatus('mandatory')
cpqNicIfPhysAdapterHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterHwLocation.setStatus('optional')
cpqNicIfPhysAdapterPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterPartNumber.setStatus('mandatory')
cpqNicIfPhysAdapterSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterSpeed.setStatus('mandatory')
cpqNicIfPhysAdapterConfSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("other", 1), ("autoAuto", 2), ("ethernetHalf", 3), ("ethernetFull", 4), ("fastEthernetHalf", 5), ("fastEthernetFull", 6), ("gigEthernetHalf", 7), ("gigEthernetFull", 8), ("gig10EthernetFull", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterConfSpeedDuplex.setStatus('mandatory')
cpqNicIfPhysAdapterAggregationGID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterAggregationGID.setStatus('mandatory')
cpqNicIfPhysAdapterSpeedMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterSpeedMbps.setStatus('optional')
cpqNicIfPhysAdapterInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterInOctets.setStatus('optional')
cpqNicIfPhysAdapterOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterOutOctets.setStatus('optional')
cpqNicIfPhysAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterName.setStatus('optional')
cpqNicIfPhysAdapterIoBayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterIoBayNo.setStatus('optional')
cpqNicIfPhysAdapterFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterFWVersion.setStatus('optional')
cpqNicIfPhysAdapterVirtualPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterVirtualPortNumber.setStatus('optional')
cpqNicIfPhysAdapterPciLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfPhysAdapterPciLocation.setStatus('optional')
cpqNicPhyAdapBaseMemTable = MibTable((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 2), )
if mibBuilder.loadTexts: cpqNicPhyAdapBaseMemTable.setStatus('optional')
cpqNicPhyAdapBaseMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 2, 1), ).setIndexNames((0, "CPQNIC-MIB", "cpqNicPhyAdapBaseMemIndex"))
if mibBuilder.loadTexts: cpqNicPhyAdapBaseMemEntry.setStatus('optional')
cpqNicPhyAdapBaseMemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicPhyAdapBaseMemIndex.setStatus('optional')
cpqNicPhyAdapBaseMemIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicPhyAdapBaseMemIfIndex.setStatus('optional')
cpqNicPhyAdapBaseMemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicPhyAdapBaseMemAddr.setStatus('optional')
cpqNicIfVlanMapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 18, 2, 4, 1), )
if mibBuilder.loadTexts: cpqNicIfVlanMapTable.setStatus('mandatory')
cpqNicIfVlanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 18, 2, 4, 1, 1), ).setIndexNames((0, "CPQNIC-MIB", "cpqNicIfVlanMapIndex"))
if mibBuilder.loadTexts: cpqNicIfVlanMapEntry.setStatus('mandatory')
cpqNicIfVlanMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfVlanMapIndex.setStatus('mandatory')
cpqNicIfVlanMapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfVlanMapLogIndex.setStatus('mandatory')
cpqNicIfVlanMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfVlanMapIfIndex.setStatus('mandatory')
cpqNicIfVlanMapVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfVlanMapVlanId.setStatus('mandatory')
cpqNicIfVlanMapVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfVlanMapVlanName.setStatus('mandatory')
cpqNicIfVlanMapVlanIPV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfVlanMapVlanIPV6Address.setStatus('optional')
cpqNicIfVlanMapVlanLACNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 18, 2, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicIfVlanMapVlanLACNumber.setStatus('optional')
cpqNicVtInstalled = MibScalar((1, 3, 6, 1, 4, 1, 232, 18, 2, 5, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicVtInstalled.setStatus('mandatory')
cpqNicVtLicensed = MibScalar((1, 3, 6, 1, 4, 1, 232, 18, 2, 5, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("notLicensed", 1), ("licensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicVtLicensed.setStatus('mandatory')
cpqNicVtVirusActivity = MibScalar((1, 3, 6, 1, 4, 1, 232, 18, 2, 5, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("notDetected", 1), ("detected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqNicVtVirusActivity.setStatus('mandatory')
cpqNicConnectivityRestored = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"))
cpqNicConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"))
cpqNicRedundancyIncreased = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQNIC-MIB", "cpqNicIfLogMapAdapterOKCount"))
cpqNicRedundancyReduced = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQNIC-MIB", "cpqNicIfLogMapAdapterOKCount"))
cpqNic2ConnectivityRestored = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterStatus"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"), ("IP-MIB", "ipAdEntAddr"))
cpqNic2ConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterStatus"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"), ("IP-MIB", "ipAdEntAddr"))
cpqNic2RedundancyIncreased = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterStatus"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"), ("IP-MIB", "ipAdEntAddr"), ("CPQNIC-MIB", "cpqNicIfLogMapAdapterOKCount"))
cpqNic2RedundancyReduced = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterStatus"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"), ("IP-MIB", "ipAdEntAddr"), ("CPQNIC-MIB", "cpqNicIfLogMapAdapterOKCount"))
cpqNicVirusLikeActivityDetected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiServerSystemId"))
cpqNicVirusLikeActivityStopped = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiServerSystemId"))
cpqNic3ConnectivityRestored = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterStatus"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"), ("IP-MIB", "ipAdEntAddr"), ("CPQNIC-MIB", "cpqNicIfLogMapIPV6Address"))
cpqNic3ConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterStatus"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"), ("IP-MIB", "ipAdEntAddr"), ("CPQNIC-MIB", "cpqNicIfLogMapIPV6Address"))
cpqNic3RedundancyIncreased = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterStatus"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"), ("IP-MIB", "ipAdEntAddr"), ("CPQNIC-MIB", "cpqNicIfLogMapIPV6Address"), ("CPQNIC-MIB", "cpqNicIfLogMapAdapterOKCount"))
cpqNic3RedundancyReduced = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPort"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterStatus"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"), ("IP-MIB", "ipAdEntAddr"), ("CPQNIC-MIB", "cpqNicIfLogMapIPV6Address"), ("CPQNIC-MIB", "cpqNicIfLogMapAdapterOKCount"))
cpqNicAllLinksDown = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"))
cpqNicAllLinksDownRepaired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,18016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterSlot"), ("CPQSINFO-MIB", "cpqSiServerSystemId"), ("CPQSTDEQ-MIB", "cpqSePciSlotBoardName"), ("CPQNIC-MIB", "cpqNicIfPhysAdapterPartNumber"))
mibBuilder.exportSymbols("CPQNIC-MIB", cpqNicIfPhysAdapterInOctets=cpqNicIfPhysAdapterInOctets, cpqNicIfLogMapSwitchoverMode=cpqNicIfLogMapSwitchoverMode, cpqNicConnectivityLost=cpqNicConnectivityLost, cpqNicInterface=cpqNicInterface, cpqNicPhyAdapBaseMemAddr=cpqNicPhyAdapBaseMemAddr, cpqNicVtVirusActivity=cpqNicVtVirusActivity, cpqNicVirusLikeActivityStopped=cpqNicVirusLikeActivityStopped, cpqNicOsCommonModuleDate=cpqNicOsCommonModuleDate, cpqNicIfPhysAdapterCarrierSenseErrors=cpqNicIfPhysAdapterCarrierSenseErrors, cpqNicIfLogMapOverallCondition=cpqNicIfLogMapOverallCondition, cpqNic2ConnectivityLost=cpqNic2ConnectivityLost, cpqNicIfPhysAdapterOutOctets=cpqNicIfPhysAdapterOutOctets, cpqNicIfPhysAdapterMACAddress=cpqNicIfPhysAdapterMACAddress, cpqNicIfPhysAdapterHwLocation=cpqNicIfPhysAdapterHwLocation, cpqNicIfPhysAdapterPciLocation=cpqNicIfPhysAdapterPciLocation, cpqNicIfPhysAdapterStatus=cpqNicIfPhysAdapterStatus, cpqNicAllLinksDown=cpqNicAllLinksDown, cpqNicIfLogMapIPV6Address=cpqNicIfLogMapIPV6Address, cpqNicIfPhysAdapterName=cpqNicIfPhysAdapterName, cpqNicOsCommonModulePurpose=cpqNicOsCommonModulePurpose, cpqNic=cpqNic, cpqNicIfVlanMapLogIndex=cpqNicIfVlanMapLogIndex, cpqNicIfPhysAdapterEntry=cpqNicIfPhysAdapterEntry, cpqNicMibRevMinor=cpqNicMibRevMinor, cpqNicIfPhysAdapterTable=cpqNicIfPhysAdapterTable, cpqNicIfLogMapAdvancedTeaming=cpqNicIfLogMapAdvancedTeaming, cpqNicIfLogMapSpeedMbps=cpqNicIfLogMapSpeedMbps, cpqNicIfVlanMapEntry=cpqNicIfVlanMapEntry, cpqNicIfPhysAdapterFrameTooLongs=cpqNicIfPhysAdapterFrameTooLongs, cpqNicIfLogMap=cpqNicIfLogMap, cpqNicIfVlanMapVlanName=cpqNicIfVlanMapVlanName, cpqNicRedundancyReduced=cpqNicRedundancyReduced, cpqNicIfLogMapLastChange=cpqNicIfLogMapLastChange, cpqNicIfPhysAdapterIndex=cpqNicIfPhysAdapterIndex, cpqNicIfPhysAdapterIoBayNo=cpqNicIfPhysAdapterIoBayNo, cpqNicIfLogMapGroupType=cpqNicIfLogMapGroupType, cpqNicIfPhysAdapterBadTransmits=cpqNicIfPhysAdapterBadTransmits, cpqNicOsCommonModuleEntry=cpqNicOsCommonModuleEntry, cpqNicMibCondition=cpqNicMibCondition, cpqNicOsCommonModuleIndex=cpqNicOsCommonModuleIndex, cpqNicIfPhysAdapterSpeedMbps=cpqNicIfPhysAdapterSpeedMbps, cpqNicIfPhysAdapterExcessiveCollisions=cpqNicIfPhysAdapterExcessiveCollisions, cpqNicVirusThrottle=cpqNicVirusThrottle, cpqNicVtLicensed=cpqNicVtLicensed, cpqNicIfPhysAdapterIoAddr=cpqNicIfPhysAdapterIoAddr, cpqNicIfLogMapCondition=cpqNicIfLogMapCondition, cpqNicOsCommonModuleName=cpqNicOsCommonModuleName, cpqNicIfLogMapVlans=cpqNicIfLogMapVlans, cpqNicPhyAdapBaseMemEntry=cpqNicPhyAdapBaseMemEntry, cpqNicIfPhysAdapterDma=cpqNicIfPhysAdapterDma, cpqNic2RedundancyIncreased=cpqNic2RedundancyIncreased, cpqNicIfLogMapAdapterOKCount=cpqNicIfLogMapAdapterOKCount, cpqNicIfLogMapDHCP=cpqNicIfLogMapDHCP, cpqNicIfPhysAdapterLateCollisions=cpqNicIfPhysAdapterLateCollisions, cpqNicIfPhysAdapterVirtualPortNumber=cpqNicIfPhysAdapterVirtualPortNumber, cpqNic2ConnectivityRestored=cpqNic2ConnectivityRestored, cpqNicPhyAdapBaseMemIndex=cpqNicPhyAdapBaseMemIndex, cpqNicAllLinksDownRepaired=cpqNicAllLinksDownRepaired, cpqNic2RedundancyReduced=cpqNic2RedundancyReduced, cpqNicConnectivityRestored=cpqNicConnectivityRestored, cpqNicIfLogMapTable=cpqNicIfLogMapTable, cpqNicIfPhysAdapterBadReceives=cpqNicIfPhysAdapterBadReceives, cpqNicVirusLikeActivityDetected=cpqNicVirusLikeActivityDetected, cpqNicIfPhysAdapterCondition=cpqNicIfPhysAdapterCondition, cpqNicIfPhysAdapterAggregationGID=cpqNicIfPhysAdapterAggregationGID, cpqNicIfVlanMapVlanIPV6Address=cpqNicIfVlanMapVlanIPV6Address, cpqNicVtInstalled=cpqNicVtInstalled, cpqNicIfPhysAdapterConfSpeedDuplex=cpqNicIfPhysAdapterConfSpeedDuplex, cpqNicIfLogMapPciLocation=cpqNicIfLogMapPciLocation, cpqNicOsCommonModuleVersion=cpqNicOsCommonModuleVersion, cpqNicIfVlanMap=cpqNicIfVlanMap, cpqNicIfVlanMapVlanLACNumber=cpqNicIfVlanMapVlanLACNumber, cpqNicIfPhysAdapterGoodReceives=cpqNicIfPhysAdapterGoodReceives, cpqNicIfPhysAdapterInternalMacReceiveErrors=cpqNicIfPhysAdapterInternalMacReceiveErrors, cpqNicIfLogMapPhysicalAdapters=cpqNicIfLogMapPhysicalAdapters, cpqNicIfLogMapSpeed=cpqNicIfLogMapSpeed, cpqNicIfPhysAdapterInternalMacTransmitErrors=cpqNicIfPhysAdapterInternalMacTransmitErrors, cpqNicIfPhysAdapterFWVersion=cpqNicIfPhysAdapterFWVersion, cpqNicRedundancyIncreased=cpqNicRedundancyIncreased, cpqNicIfLogMapEntry=cpqNicIfLogMapEntry, cpqNic3ConnectivityRestored=cpqNic3ConnectivityRestored, cpqNicIfLogMapDescription=cpqNicIfLogMapDescription, cpqNicComponent=cpqNicComponent, cpqNicMibRevMajor=cpqNicMibRevMajor, cpqNicMibRev=cpqNicMibRev, cpqNicIfPhysAdapterPartNumber=cpqNicIfPhysAdapterPartNumber, cpqNicIfPhysAdapterStatsValid=cpqNicIfPhysAdapterStatsValid, cpqNic3RedundancyReduced=cpqNic3RedundancyReduced, cpqNicIfLogMapAdapterCount=cpqNicIfLogMapAdapterCount, cpqNicIfLogMapMACAddress=cpqNicIfLogMapMACAddress, cpqNicIfPhysAdapterIrq=cpqNicIfPhysAdapterIrq, cpqNicPhyAdapBaseMemTable=cpqNicPhyAdapBaseMemTable, cpqNicIfPhysAdapterAlignmentErrors=cpqNicIfPhysAdapterAlignmentErrors, cpqNicIfPhysAdapterGoodTransmits=cpqNicIfPhysAdapterGoodTransmits, cpqNicIfLogMapHwLocation=cpqNicIfLogMapHwLocation, cpqNicIfPhysAdapterSlot=cpqNicIfPhysAdapterSlot, cpqNicIfLogMapIfNumber=cpqNicIfLogMapIfNumber, cpqNicIfPhysAdapterDeferredTransmissions=cpqNicIfPhysAdapterDeferredTransmissions, cpqNicOsCommon=cpqNicOsCommon, cpqNicPhyAdapBaseMemIfIndex=cpqNicPhyAdapBaseMemIfIndex, cpqNicIfPhysAdapter=cpqNicIfPhysAdapter, cpqNicIfPhysAdapterPort=cpqNicIfPhysAdapterPort, cpqNicIfLogMapStatus=cpqNicIfLogMapStatus, cpqNic3ConnectivityLost=cpqNic3ConnectivityLost, cpqNicIfLogMapNumSwitchovers=cpqNicIfLogMapNumSwitchovers, cpqNicIfLogMapVlanCount=cpqNicIfLogMapVlanCount, cpqNicIfPhysAdapterState=cpqNicIfPhysAdapterState, cpqNicIfPhysAdapterIfNumber=cpqNicIfPhysAdapterIfNumber, cpqNicIfLogMapIndex=cpqNicIfLogMapIndex, cpqNicIfPhysAdapterMemAddr=cpqNicIfPhysAdapterMemAddr, cpqNicIfVlanMapIndex=cpqNicIfVlanMapIndex, cpqNicOsCommonPollFreq=cpqNicOsCommonPollFreq, cpqNic3RedundancyIncreased=cpqNic3RedundancyIncreased, cpqNicIfVlanMapIfIndex=cpqNicIfVlanMapIfIndex, cpqNicIfLogMapLACNumber=cpqNicIfLogMapLACNumber, cpqNicIfPhysAdapterFCSErrors=cpqNicIfPhysAdapterFCSErrors, cpqNicOsCommonModuleTable=cpqNicOsCommonModuleTable, cpqNicIfPhysAdapterRole=cpqNicIfPhysAdapterRole, cpqNicIfPhysAdapterMultipleCollisionFrames=cpqNicIfPhysAdapterMultipleCollisionFrames, cpqNicIfPhysAdapterDuplexState=cpqNicIfPhysAdapterDuplexState, cpqNicIfPhysAdapterSpeed=cpqNicIfPhysAdapterSpeed, cpqNicIfVlanMapTable=cpqNicIfVlanMapTable, cpqNicIfVlanMapVlanId=cpqNicIfVlanMapVlanId, cpqNicIfPhysAdapterSingleCollisionFrames=cpqNicIfPhysAdapterSingleCollisionFrames)
