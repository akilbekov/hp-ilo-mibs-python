#
# PySNMP MIB module CPQHLTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/dauren/projects/snmp-kmg/CPQHLTH-MIB.mib
# Produced by pysmi-0.3.1 at Thu Aug  2 17:41:50 2018
# On host dauren-pc platform Linux version 4.15.0-29-generic by user dauren
# Using Python version 2.7.15rc1 (default, Apr 15 2018, 21:51:34) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoGUIDCanonical, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoGUIDCanonical", "cpqHoTrapFlags")
cpqSiServerSystemId, cpqSiMemModuleSize = mibBuilder.importSymbols("CPQSINFO-MIB", "cpqSiServerSystemId", "cpqSiMemModuleSize")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, enterprises, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6))
cpqHeMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 1))
cpqHeComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2))
cpqHeTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 3))
cpqHeInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 1))
cpqHeCriticalError = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 2))
cpqHeCorrectableMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 3))
cpqHeAsr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 5))
cpqHeThermal = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 6))
cpqHePostMsg = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 7))
cpqHeSysUtil = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 8))
cpqHeFltTolPwrSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 9))
cpqHeIRC = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 10))
cpqHeEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 11))
cpqHeMgmtDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 12))
cpqHePowerConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 13))
cpqHeResilientMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 14))
cpqHePowerMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 15))
cpqHeHWBios = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 16))
cpqHeSysBackupBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 17))
cpqHeSysPwrHw = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 18))
cpqHeSysBoardFru = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 19))
cpqHePowerFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 20))
cpqHeInterlockFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 21))
cpqHeNvdimm = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 22))
cpqHeBbu = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 23))
cpqHeOsNetWare3x = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 1))
cpqHeOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 4))
cpqHeMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeMibRevMajor.setStatus('mandatory')
cpqHeMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeMibRevMinor.setStatus('mandatory')
cpqHeMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeMibCondition.setStatus('mandatory')
cpqHeNw3xDriverName = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNw3xDriverName.setStatus('deprecated')
cpqHeNw3xDriverDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNw3xDriverDate.setStatus('deprecated')
cpqHeNw3xDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNw3xDriverVersion.setStatus('deprecated')
cpqHeOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeOsCommonPollFreq.setStatus('mandatory')
cpqHeOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqHeOsCommonModuleTable.setStatus('deprecated')
cpqHeOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqHeOsCommonModuleEntry.setStatus('deprecated')
cpqHeOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeOsCommonModuleIndex.setStatus('deprecated')
cpqHeOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeOsCommonModuleName.setStatus('deprecated')
cpqHeOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeOsCommonModuleVersion.setStatus('deprecated')
cpqHeOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeOsCommonModuleDate.setStatus('deprecated')
cpqHeOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeOsCommonModulePurpose.setStatus('deprecated')
cpqHeCritLogSupported = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCritLogSupported.setStatus('mandatory')
cpqHeCritLogCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCritLogCondition.setStatus('mandatory')
cpqHeLastCritErrorAbendMsg = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeLastCritErrorAbendMsg.setStatus('mandatory')
cpqHeCriticalErrorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 4), )
if mibBuilder.loadTexts: cpqHeCriticalErrorTable.setStatus('mandatory')
cpqHeCriticalErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 4, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeCriticalErrorIndex"))
if mibBuilder.loadTexts: cpqHeCriticalErrorEntry.setStatus('mandatory')
cpqHeCriticalErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCriticalErrorIndex.setStatus('mandatory')
cpqHeCriticalErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("uncorrected", 1), ("corrected", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeCriticalErrorStatus.setStatus('mandatory')
cpqHeCriticalErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39)).clone(namedValues=NamedValues(("other", 1), ("empty", 2), ("nonCorrectableMemErr", 3), ("busMasterTimeoutNmi", 4), ("commandBusTimeoutNmi", 5), ("ioCheckNmi", 6), ("refreshOverflowNmi", 7), ("cacheParityNmi", 8), ("processorParityNmi", 9), ("eisaHostMemReadHit", 10), ("processorFailure", 11), ("cautionTemperature", 12), ("postCriticalError", 13), ("criticalException", 14), ("serverManagerIfFail", 15), ("pentiumIperr", 16), ("pentiumAperr", 17), ("pentiumIeerr", 18), ("pentiumApcheck", 19), ("cpuLocalError", 20), ("failsafeTimer", 21), ("softwareNmi", 22), ("asrBaseMemoryParity", 23), ("asrExtendedMemParity", 24), ("asrResetLimit", 25), ("asrMemoryParity", 26), ("abend", 27), ("asrTestEvent", 28), ("asrTimeoutNmi", 29), ("fanFailure", 30), ("upsDetectedLineFail", 31), ("asrDetectedAtBoot", 32), ("redunPowerSupplyFailure", 33), ("pciBusParityError", 34), ("diagnosticError", 35), ("rtcChipBatteryFailure", 36), ("pentiumBerr", 37), ("dcConverterFailure", 38), ("cpuInternalThreshPassed", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCriticalErrorType.setStatus('mandatory')
cpqHeCriticalErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCriticalErrorTime.setStatus('mandatory')
cpqHeCriticalErrorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCriticalErrorInfo.setStatus('mandatory')
cpqHeCriticalErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCriticalErrorDesc.setStatus('mandatory')
cpqHeCorrMemLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("disabled", 3), ("enabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemLogStatus.setStatus('mandatory')
cpqHeCorrMemLogCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemLogCondition.setStatus('mandatory')
cpqHeCorrMemTotalErrs = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemTotalErrs.setStatus('deprecated')
cpqHeCorrMemErrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 4), )
if mibBuilder.loadTexts: cpqHeCorrMemErrTable.setStatus('mandatory')
cpqHeCorrMemErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 4, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeCorrMemErrIndex"))
if mibBuilder.loadTexts: cpqHeCorrMemErrEntry.setStatus('mandatory')
cpqHeCorrMemErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemErrIndex.setStatus('mandatory')
cpqHeCorrMemErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeCorrMemErrCount.setStatus('mandatory')
cpqHeCorrMemErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemErrTime.setStatus('mandatory')
cpqHeCorrMemErrDdr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemErrDdr.setStatus('mandatory')
cpqHeCorrMemErrSyndrome = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemErrSyndrome.setStatus('mandatory')
cpqHeCorrMemErrDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemErrDesc.setStatus('mandatory')
cpqHeCorrMemErrHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemErrHwLocation.setStatus('optional')
cpqHeCorrMemErrorCntThresh = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeCorrMemErrorCntThresh.setStatus('mandatory')
cpqHeAsrStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notAvailable", 2), ("disabled", 3), ("enabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrStatus.setStatus('mandatory')
cpqHeAsrMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeAsrMajorVersion.setStatus('mandatory')
cpqHeAsrMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeAsrMinorVersion.setStatus('mandatory')
cpqHeAsrTimeout = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrTimeout.setStatus('mandatory')
cpqHeAsrBaseIo = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeAsrBaseIo.setStatus('mandatory')
cpqHeAsrPost = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("failed", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeAsrPost.setStatus('deprecated')
cpqHeAsrReset = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("manualReset", 2), ("asrReset", 3), ("viewed-asrReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrReset.setStatus('mandatory')
cpqHeAsrReboot = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("bootOs", 2), ("bootUtilities", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrReboot.setStatus('mandatory')
cpqHeAsrRebootLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrRebootLimit.setStatus('mandatory')
cpqHeAsrRebootCount = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrRebootCount.setStatus('mandatory')
cpqHeAsrPagerStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrPagerStatus.setStatus('mandatory')
cpqHeAsrPagerNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrPagerNumber.setStatus('mandatory')
cpqHeAsrCommPort = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrCommPort.setStatus('mandatory')
cpqHeAsrBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeAsrBaudRate.setStatus('mandatory')
cpqHeAsrPagerMessage = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrPagerMessage.setStatus('mandatory')
cpqHeAsrBootFail = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("other", 1), ("interrupt18", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeAsrBootFail.setStatus('deprecated')
cpqHeAsrCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeAsrCondition.setStatus('mandatory')
cpqHeAsrDialInStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrDialInStatus.setStatus('mandatory')
cpqHeAsrDialOutStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrDialOutStatus.setStatus('mandatory')
cpqHeAsrDialOutNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrDialOutNumber.setStatus('mandatory')
cpqHeAsrNetworkAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrNetworkAccessStatus.setStatus('mandatory')
cpqHeAsrPollTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 5, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeAsrPollTime.setStatus('optional')
cpqHeThermalCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalCondition.setStatus('mandatory')
cpqHeThermalDegradedAction = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("continue", 2), ("shutdown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeThermalDegradedAction.setStatus('mandatory')
cpqHeThermalTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalTempStatus.setStatus('mandatory')
cpqHeThermalSystemFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalSystemFanStatus.setStatus('mandatory')
cpqHeThermalCpuFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalCpuFanStatus.setStatus('mandatory')
cpqHeThermalFanTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 6), )
if mibBuilder.loadTexts: cpqHeThermalFanTable.setStatus('mandatory')
cpqHeThermalFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 6, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeThermalFanIndex"))
if mibBuilder.loadTexts: cpqHeThermalFanEntry.setStatus('mandatory')
cpqHeThermalFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalFanIndex.setStatus('mandatory')
cpqHeThermalFanRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("nonRequired", 2), ("required", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalFanRequired.setStatus('mandatory')
cpqHeThermalFanPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalFanPresent.setStatus('mandatory')
cpqHeThermalFanCpuFan = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("systemFan", 2), ("cpuFan", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalFanCpuFan.setStatus('mandatory')
cpqHeThermalFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalFanStatus.setStatus('mandatory')
cpqHeThermalFanHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalFanHwLocation.setStatus('optional')
cpqHeThermalFanCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeThermalFanCurrentSpeed.setStatus('optional')
cpqHeFltTolFanTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7), )
if mibBuilder.loadTexts: cpqHeFltTolFanTable.setStatus('mandatory')
cpqHeFltTolFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeFltTolFanChassis"), (0, "CPQHLTH-MIB", "cpqHeFltTolFanIndex"))
if mibBuilder.loadTexts: cpqHeFltTolFanEntry.setStatus('mandatory')
cpqHeFltTolFanChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanChassis.setStatus('mandatory')
cpqHeFltTolFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanIndex.setStatus('mandatory')
cpqHeFltTolFanLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("system", 3), ("systemBoard", 4), ("ioBoard", 5), ("cpu", 6), ("memory", 7), ("storage", 8), ("removableMedia", 9), ("powerSupply", 10), ("ambient", 11), ("chassis", 12), ("bridgeCard", 13), ("managementBoard", 14), ("backplane", 15), ("networkSlot", 16), ("bladeSlot", 17), ("virtual", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanLocale.setStatus('mandatory')
cpqHeFltTolFanPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanPresent.setStatus('mandatory')
cpqHeFltTolFanType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("tachOutput", 2), ("spinDetect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanType.setStatus('mandatory')
cpqHeFltTolFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanSpeed.setStatus('mandatory')
cpqHeFltTolFanRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("redundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanRedundant.setStatus('mandatory')
cpqHeFltTolFanRedundantPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanRedundantPartner.setStatus('mandatory')
cpqHeFltTolFanCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanCondition.setStatus('mandatory')
cpqHeFltTolFanHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("nonHotPluggable", 2), ("hotPluggable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanHotPlug.setStatus('mandatory')
cpqHeFltTolFanHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanHwLocation.setStatus('optional')
cpqHeFltTolFanCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolFanCurrentSpeed.setStatus('optional')
cpqHeTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8), )
if mibBuilder.loadTexts: cpqHeTemperatureTable.setStatus('mandatory')
cpqHeTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeTemperatureChassis"), (0, "CPQHLTH-MIB", "cpqHeTemperatureIndex"))
if mibBuilder.loadTexts: cpqHeTemperatureEntry.setStatus('mandatory')
cpqHeTemperatureChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTemperatureChassis.setStatus('mandatory')
cpqHeTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTemperatureIndex.setStatus('mandatory')
cpqHeTemperatureLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("system", 3), ("systemBoard", 4), ("ioBoard", 5), ("cpu", 6), ("memory", 7), ("storage", 8), ("removableMedia", 9), ("powerSupply", 10), ("ambient", 11), ("chassis", 12), ("bridgeCard", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTemperatureLocale.setStatus('mandatory')
cpqHeTemperatureCelsius = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTemperatureCelsius.setStatus('mandatory')
cpqHeTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeTemperatureThreshold.setStatus('mandatory')
cpqHeTemperatureCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTemperatureCondition.setStatus('mandatory')
cpqHeTemperatureThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 5, 9, 15, 16)).clone(namedValues=NamedValues(("other", 1), ("blowout", 5), ("caution", 9), ("critical", 15), ("noreaction", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTemperatureThresholdType.setStatus('mandatory')
cpqHeTemperatureHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 6, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTemperatureHwLocation.setStatus('optional')
cpqHePostMsgCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePostMsgCondition.setStatus('mandatory')
cpqHePostMsgTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 7, 2), )
if mibBuilder.loadTexts: cpqHePostMsgTable.setStatus('mandatory')
cpqHePostMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 7, 2, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHePostMsgIndex"))
if mibBuilder.loadTexts: cpqHePostMsgEntry.setStatus('mandatory')
cpqHePostMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePostMsgIndex.setStatus('mandatory')
cpqHePostMsgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePostMsgCode.setStatus('mandatory')
cpqHePostMsgDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePostMsgDesc.setStatus('mandatory')
cpqHePostMsgEv = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHePostMsgEv.setStatus('mandatory')
cpqHeSysUtilLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilLifeTime.setStatus('mandatory')
cpqHeSysUtilEisaBusMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilEisaBusMin.setStatus('mandatory')
cpqHeSysUtilEisaBusFiveMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilEisaBusFiveMin.setStatus('mandatory')
cpqHeSysUtilEisaBusThirtyMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilEisaBusThirtyMin.setStatus('mandatory')
cpqHeSysUtilEisaBusHour = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilEisaBusHour.setStatus('mandatory')
cpqHeSysUtilPciTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6), )
if mibBuilder.loadTexts: cpqHeSysUtilPciTable.setStatus('mandatory')
cpqHeSysUtilPciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeSysUtilPciIndex"))
if mibBuilder.loadTexts: cpqHeSysUtilPciEntry.setStatus('mandatory')
cpqHeSysUtilPciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilPciIndex.setStatus('mandatory')
cpqHeSysUtilPciBus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilPciBus.setStatus('mandatory')
cpqHeSysUtilPciDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilPciDevice.setStatus('mandatory')
cpqHeSysUtilPciMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilPciMin.setStatus('mandatory')
cpqHeSysUtilPciFiveMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilPciFiveMin.setStatus('mandatory')
cpqHeSysUtilPciThirtyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilPciThirtyMin.setStatus('mandatory')
cpqHeSysUtilPciHour = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilPciHour.setStatus('mandatory')
cpqHeSysUtilPciHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 8, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysUtilPciHwLocation.setStatus('optional')
cpqHeFltTolPwrSupplyCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPwrSupplyCondition.setStatus('mandatory')
cpqHeFltTolPwrSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notInstalled", 3), ("installed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPwrSupplyStatus.setStatus('mandatory')
cpqHeFltTolPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3), )
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyTable.setStatus('mandatory')
cpqHeFltTolPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), (0, "CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"))
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyEntry.setStatus('mandatory')
cpqHeFltTolPowerSupplyChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyChassis.setStatus('mandatory')
cpqHeFltTolPowerSupplyBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyBay.setStatus('mandatory')
cpqHeFltTolPowerSupplyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyPresent.setStatus('mandatory')
cpqHeFltTolPowerSupplyCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyCondition.setStatus('mandatory')
cpqHeFltTolPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)).clone(namedValues=NamedValues(("noError", 1), ("generalFailure", 2), ("bistFailure", 3), ("fanFailure", 4), ("tempFailure", 5), ("interlockOpen", 6), ("epromFailed", 7), ("vrefFailed", 8), ("dacFailed", 9), ("ramTestFailed", 10), ("voltageChannelFailed", 11), ("orringdiodeFailed", 12), ("brownOut", 13), ("giveupOnStartup", 14), ("nvramInvalid", 15), ("calibrationTableInvalid", 16), ("noPowerInput", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyStatus.setStatus('mandatory')
cpqHeFltTolPowerSupplyMainVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyMainVoltage.setStatus('mandatory')
cpqHeFltTolPowerSupplyCapacityUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyCapacityUsed.setStatus('mandatory')
cpqHeFltTolPowerSupplyCapacityMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyCapacityMaximum.setStatus('mandatory')
cpqHeFltTolPowerSupplyRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("redundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyRedundant.setStatus('mandatory')
cpqHeFltTolPowerSupplyModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyModel.setStatus('mandatory')
cpqHeFltTolPowerSupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplySerialNumber.setStatus('mandatory')
cpqHeFltTolPowerSupplyAutoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyAutoRev.setStatus('mandatory')
cpqHeFltTolPowerSupplyHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("nonHotPluggable", 2), ("hotPluggable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyHotPlug.setStatus('mandatory')
cpqHeFltTolPowerSupplyFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyFirmwareRev.setStatus('mandatory')
cpqHeFltTolPowerSupplyHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyHwLocation.setStatus('optional')
cpqHeFltTolPowerSupplySparePartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplySparePartNum.setStatus('optional')
cpqHeFltTolPowerSupplyRedundantPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyRedundantPartner.setStatus('mandatory')
cpqHeFltTolPowerSupplyErrorCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 9, 3, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)).clone(namedValues=NamedValues(("noError", 1), ("generalFailure", 2), ("overvoltage", 3), ("overcurrent", 4), ("overtemperature", 5), ("powerinputloss", 6), ("fanfailure", 7), ("vinhighwarning", 8), ("vinlowwarning", 9), ("vouthighwarning", 10), ("voutlowwarning", 11), ("inlettemphighwarning", 12), ("iinternaltemphighwarning", 13), ("vauxhighwarning", 14), ("vauxlowwarning", 15), ("powersupplymismatch", 16), ("goodinstandby", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeFltTolPowerSupplyErrorCondition.setStatus('mandatory')
cpqHeIRCStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 10, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("notavailable", 2), ("disabled", 3), ("enabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeIRCStatus.setStatus('mandatory')
cpqHeEventLogSupported = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("supported", 3), ("clear", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeEventLogSupported.setStatus('mandatory')
cpqHeEventLogCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeEventLogCondition.setStatus('mandatory')
cpqHeEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3), )
if mibBuilder.loadTexts: cpqHeEventLogTable.setStatus('mandatory')
cpqHeEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeEventLogEntryNumber"))
if mibBuilder.loadTexts: cpqHeEventLogEntry.setStatus('mandatory')
cpqHeEventLogEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeEventLogEntryNumber.setStatus('mandatory')
cpqHeEventLogEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 3, 6, 9, 15)).clone(namedValues=NamedValues(("informational", 2), ("infoWithAlert", 3), ("repaired", 6), ("caution", 9), ("critical", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeEventLogEntrySeverity.setStatus('mandatory')
cpqHeEventLogEntryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeEventLogEntryClass.setStatus('mandatory')
cpqHeEventLogEntryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeEventLogEntryCode.setStatus('mandatory')
cpqHeEventLogEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeEventLogEntryCount.setStatus('mandatory')
cpqHeEventLogInitialTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeEventLogInitialTime.setStatus('mandatory')
cpqHeEventLogUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeEventLogUpdateTime.setStatus('mandatory')
cpqHeEventLogErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeEventLogErrorDesc.setStatus('mandatory')
cpqHeEventLogFreeFormData = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 11, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeEventLogFreeFormData.setStatus('mandatory')
cpqHeMgmtDisplayType = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 12, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("imd4x16", 3), ("ocp1x16", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeMgmtDisplayType.setStatus('mandatory')
cpqHeMgmtDisplayText = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeMgmtDisplayText.setStatus('mandatory')
cpqHeMgmtUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 12, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("ledOn", 3), ("ledOff", 4), ("ledBlinking", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeMgmtUID.setStatus('mandatory')
cpqHePowerConverterSupported = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerConverterSupported.setStatus('mandatory')
cpqHePowerConverterCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerConverterCondition.setStatus('mandatory')
cpqHePowerConverterTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3), )
if mibBuilder.loadTexts: cpqHePowerConverterTable.setStatus('mandatory')
cpqHePowerConverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHePwrConvChassis"), (0, "CPQHLTH-MIB", "cpqHePwrConvIndex"))
if mibBuilder.loadTexts: cpqHePowerConverterEntry.setStatus('mandatory')
cpqHePwrConvChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePwrConvChassis.setStatus('mandatory')
cpqHePwrConvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePwrConvIndex.setStatus('mandatory')
cpqHePwrConvPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePwrConvPresent.setStatus('mandatory')
cpqHePwrConvSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePwrConvSlot.setStatus('mandatory')
cpqHePwrConvSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePwrConvSocket.setStatus('mandatory')
cpqHePwrConvRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("nonRedundant", 2), ("redundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePwrConvRedundant.setStatus('mandatory')
cpqHePwrConvRedundantGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePwrConvRedundantGroupId.setStatus('mandatory')
cpqHePwrConvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePwrConvCondition.setStatus('mandatory')
cpqHePwrConvHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 13, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePwrConvHwLocation.setStatus('optional')
cpqHeResilientMemTypeActive = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("onLineSpare", 3), ("mirrored", 4), ("advancedEcc", 5), ("mirroredSingleBoard", 6), ("mirroredDualBoard", 7), ("xor", 8), ("lockStep", 9), ("onLineSpareChannel", 10), ("onLineSpareRank", 11), ("mirroringIntrasocket", 12), ("mirroringIntersocket", 13), ("a3dc", 14), ("dimmECC", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResilientMemTypeActive.setStatus('mandatory')
cpqHeResilientMemTypeAvailable = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResilientMemTypeAvailable.setStatus('mandatory')
cpqHeResilientMemStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)).clone(namedValues=NamedValues(("other", 1), ("notProtected", 2), ("protected", 3), ("degraded", 4), ("dimmEcc", 5), ("mirrorNoFaults", 6), ("mirrorWithFaults", 7), ("hotSpareNoFaults", 8), ("hotSpareWithFaults", 9), ("xorNoFaults", 10), ("xorWithFaults", 11), ("advancedEcc", 12), ("advancedEccWithFaults", 13), ("lockStep", 14), ("lockStepWithFaults", 15), ("a3dc", 16), ("a3dcWithFaults", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResilientMemStatus.setStatus('mandatory')
cpqHeResilientMemCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResilientMemCondition.setStatus('mandatory')
cpqHeResilientMemHotPlug = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("nonHotPluggable", 2), ("hotPluggable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResilientMemHotPlug.setStatus('mandatory')
cpqHeResilientMemOperatingSpeed = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResilientMemOperatingSpeed.setStatus('mandatory')
cpqHeResilientMemOsMemSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResilientMemOsMemSize.setStatus('mandatory')
cpqHeResilientMemTotalMemSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResilientMemTotalMemSize.setStatus('mandatory')
cpqHeResilientMemRivState = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("rebuilding", 3), ("initializing", 4), ("verifying", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResilientMemRivState.setStatus('mandatory')
cpqHeResMemBoardTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10), )
if mibBuilder.loadTexts: cpqHeResMemBoardTable.setStatus('mandatory')
cpqHeResMemBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeResMemBoardSlotIndex"))
if mibBuilder.loadTexts: cpqHeResMemBoardEntry.setStatus('mandatory')
cpqHeResMemBoardSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardSlotIndex.setStatus('mandatory')
cpqHeResMemBoardOnlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("present", 2), ("absent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardOnlineStatus.setStatus('mandatory')
cpqHeResMemBoardErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("other", 1), ("noError", 2), ("dimmEccError", 3), ("unlockError", 4), ("configError", 5), ("busError", 6), ("powerError", 7), ("advancedEcc", 8), ("onlineSpare", 9), ("mirrored", 10), ("mirroredDimmError", 11), ("memoryRaid", 12), ("raidDimmError", 13), ("lockstep", 14), ("lockstepDimmError", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardErrorStatus.setStatus('mandatory')
cpqHeResMemBoardLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("unlocked", 2), ("locked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardLocked.setStatus('mandatory')
cpqHeResMemBoardNumSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardNumSockets.setStatus('mandatory')
cpqHeResMemBoardOsMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardOsMemSize.setStatus('mandatory')
cpqHeResMemBoardTotalMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardTotalMemSize.setStatus('mandatory')
cpqHeResMemBoardCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardCondition.setStatus('mandatory')
cpqHeResMemBoardHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 10, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("nonHotPluggable", 2), ("hotPluggable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardHotPlug.setStatus('mandatory')
cpqHeResMemModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 11), )
if mibBuilder.loadTexts: cpqHeResMemModuleTable.setStatus('mandatory')
cpqHeResMemModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 11, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeResMemBoardIndex"), (0, "CPQHLTH-MIB", "cpqHeResMemModuleIndex"))
if mibBuilder.loadTexts: cpqHeResMemModuleEntry.setStatus('mandatory')
cpqHeResMemBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemBoardIndex.setStatus('mandatory')
cpqHeResMemModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemModuleIndex.setStatus('mandatory')
cpqHeResMemModuleSparePartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemModuleSparePartNo.setStatus('mandatory')
cpqHeResMemModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 11, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)).clone(namedValues=NamedValues(("other", 1), ("notPresent", 2), ("present", 3), ("good", 4), ("add", 5), ("upgrade", 6), ("missing", 7), ("doesNotMatch", 8), ("notSupported", 9), ("badConfig", 10), ("degraded", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemModuleStatus.setStatus('mandatory')
cpqHeResMemModuleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 11, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemModuleCondition.setStatus('mandatory')
cpqHeResMemModuleSpd = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMemModuleSpd.setStatus('mandatory')
cpqHeResMem2BoardTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12), )
if mibBuilder.loadTexts: cpqHeResMem2BoardTable.setStatus('mandatory')
cpqHeResMem2BoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeResMem2BoardIndex"))
if mibBuilder.loadTexts: cpqHeResMem2BoardEntry.setStatus('mandatory')
cpqHeResMem2BoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardIndex.setStatus('mandatory')
cpqHeResMem2BoardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardSlotNum.setStatus('mandatory')
cpqHeResMem2BoardCpuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardCpuNum.setStatus('mandatory')
cpqHeResMem2BoardRiserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardRiserNum.setStatus('mandatory')
cpqHeResMem2BoardOnlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("present", 2), ("absent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardOnlineStatus.setStatus('mandatory')
cpqHeResMem2BoardErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)).clone(namedValues=NamedValues(("other", 1), ("noError", 2), ("dimmEccError", 3), ("unlockError", 4), ("configError", 5), ("busError", 6), ("powerError", 7), ("advancedEcc", 8), ("onlineSpare", 9), ("mirrored", 10), ("mirroredDimmError", 11), ("memoryRaid", 12), ("raidDimmError", 13), ("lockStep", 14), ("lockStepError", 15), ("a3dc", 16), ("a3dcError", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardErrorStatus.setStatus('mandatory')
cpqHeResMem2BoardLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("unlocked", 2), ("locked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardLocked.setStatus('mandatory')
cpqHeResMem2BoardNumSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardNumSockets.setStatus('mandatory')
cpqHeResMem2BoardOsMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardOsMemSize.setStatus('mandatory')
cpqHeResMem2BoardTotalMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardTotalMemSize.setStatus('mandatory')
cpqHeResMem2BoardCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardCondition.setStatus('mandatory')
cpqHeResMem2BoardHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("nonHotPluggable", 2), ("hotPluggable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardHotPlug.setStatus('mandatory')
cpqHeResMem2BoardOperatingFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardOperatingFrequency.setStatus('mandatory')
cpqHeResMem2BoardOperatingVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardOperatingVoltage.setStatus('mandatory')
cpqHeResMem2ModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13), )
if mibBuilder.loadTexts: cpqHeResMem2ModuleTable.setStatus('mandatory')
cpqHeResMem2ModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeResMem2Module"))
if mibBuilder.loadTexts: cpqHeResMem2ModuleEntry.setStatus('mandatory')
cpqHeResMem2Module = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2Module.setStatus('mandatory')
cpqHeResMem2BoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2BoardNum.setStatus('mandatory')
cpqHeResMem2CpuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2CpuNum.setStatus('mandatory')
cpqHeResMem2RiserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2RiserNum.setStatus('mandatory')
cpqHeResMem2ModuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleNum.setStatus('mandatory')
cpqHeResMem2ModuleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleSize.setStatus('mandatory')
cpqHeResMem2ModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)).clone(namedValues=NamedValues(("other", 1), ("board", 2), ("cpqSingleWidthModule", 3), ("cpqDoubleWidthModule", 4), ("simm", 5), ("pcmcia", 6), ("compaq-specific", 7), ("dimm", 8), ("smallOutlineDimm", 9), ("rimm", 10), ("srimm", 11), ("fb-dimm", 12), ("dimmddr", 13), ("dimmddr2", 14), ("dimmddr3", 15), ("dimmfbd2", 16), ("fb-dimmddr2", 17), ("fb-dimmddr3", 18), ("dimmddr4", 19), ("hpe-specific", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleType.setStatus('mandatory')
cpqHeResMem2ModuleTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("other", 1), ("fastPageMode", 2), ("edoPageMode", 3), ("burstEdoPageMode", 4), ("synchronous", 5), ("rdram", 6), ("rdimm", 7), ("udimm", 8), ("lrdimm", 9), ("nvdimm", 10), ("rnvdimm", 11), ("lrnvdimm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleTechnology.setStatus('mandatory')
cpqHeResMem2ModuleManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleManufacturer.setStatus('mandatory')
cpqHeResMem2ModulePartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModulePartNo.setStatus('mandatory')
cpqHeResMem2ModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleDate.setStatus('mandatory')
cpqHeResMem2ModuleSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHeResMem2ModuleSerialNo.setStatus('mandatory')
cpqHeResMem2ModuleHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleHwLocation.setStatus('optional')
cpqHeResMem2ModuleFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleFrequency.setStatus('mandatory')
cpqHeResMem2ModuleCellTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleCellTablePtr.setStatus('optional')
cpqHeResMem2ModuleCellStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("deconfigured", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleCellStatus.setStatus('optional')
cpqHeResMem2ModulePartNoMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModulePartNoMfgr.setStatus('optional')
cpqHeResMem2ModuleSerialNoMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleSerialNoMfgr.setStatus('optional')
cpqHeResMem2ModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).clone(namedValues=NamedValues(("other", 1), ("notPresent", 2), ("present", 3), ("good", 4), ("add", 5), ("upgrade", 6), ("missing", 7), ("doesNotMatch", 8), ("notSupported", 9), ("badConfig", 10), ("degraded", 11), ("spare", 12), ("partial", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleStatus.setStatus('mandatory')
cpqHeResMem2ModuleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("degradedModuleIndexUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleCondition.setStatus('mandatory')
cpqHeResMem2ModuleSpd = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleSpd.setStatus('mandatory')
cpqHeResMem2ModuleSmartMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notHPSmartMemory", 2), ("isHPSmartMemory", 3), ("isHPStandardMemory", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleSmartMemory.setStatus('mandatory')
cpqHeResMem2ModuleMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleMinVoltage.setStatus('mandatory')
cpqHeResMem2ModuleRanks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 14, 13, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeResMem2ModuleRanks.setStatus('mandatory')
cpqHePowerMeterSupport = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 15, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("supported", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerMeterSupport.setStatus('mandatory')
cpqHePowerMeterStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 15, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("present", 2), ("absent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerMeterStatus.setStatus('mandatory')
cpqHePowerMeterCurrReading = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerMeterCurrReading.setStatus('mandatory')
cpqHePowerMeterPrevReading = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerMeterPrevReading.setStatus('mandatory')
cpqHeHWBiosCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 16, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeHWBiosCondition.setStatus('mandatory')
cpqHeSysBackupBatteryCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBackupBatteryCondition.setStatus('mandatory')
cpqHeSysBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2), )
if mibBuilder.loadTexts: cpqHeSysBatteryTable.setStatus('mandatory')
cpqHeSysBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeSysBatteryChassis"), (0, "CPQHLTH-MIB", "cpqHeSysBatteryIndex"))
if mibBuilder.loadTexts: cpqHeSysBatteryEntry.setStatus('mandatory')
cpqHeSysBatteryChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatteryChassis.setStatus('mandatory')
cpqHeSysBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatteryIndex.setStatus('mandatory')
cpqHeSysBatteryPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatteryPresent.setStatus('mandatory')
cpqHeSysBatteryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatteryCondition.setStatus('mandatory')
cpqHeSysBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("noError", 1), ("generalFailure", 2), ("shutdownHighResistance", 3), ("shutdownLowVoltage", 4), ("shutdownShortCircuit", 5), ("shutdownChargeTimeout", 6), ("shutdownOverTemperature", 7), ("shutdownDischargeMinVoltage", 8), ("shutdownDischargeCurrent", 9), ("shutdownLoadCountHigh", 10), ("shutdownEnablePin", 11), ("shutdownOverCurrent", 12), ("shutdownPermanentFailure", 13), ("shutdownBackupTimeExceeded", 14), ("predictiveFailure", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatteryStatus.setStatus('mandatory')
cpqHeSysBatteryCapacityMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatteryCapacityMaximum.setStatus('mandatory')
cpqHeSysBatteryProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatteryProductName.setStatus('mandatory')
cpqHeSysBatteryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatteryModel.setStatus('mandatory')
cpqHeSysBatterySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatterySerialNumber.setStatus('mandatory')
cpqHeSysBatteryFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatteryFirmwareRev.setStatus('mandatory')
cpqHeSysBatterySparePartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 17, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBatterySparePartNum.setStatus('optional')
cpqHeSysPwrAllocationOptimizeStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 18, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysPwrAllocationOptimizeStatus.setStatus('mandatory')
cpqHeSysBoardFruStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 19, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeSysBoardFruStatus.setStatus('mandatory')
cpqHePowerFailureSupported = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerFailureSupported.setStatus('mandatory')
cpqHePowerFailureTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2), )
if mibBuilder.loadTexts: cpqHePowerFailureTable.setStatus('mandatory')
cpqHePowerFailureTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHePowerFailureIndex"))
if mibBuilder.loadTexts: cpqHePowerFailureTableEntry.setStatus('mandatory')
cpqHePowerFailureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerFailureIndex.setStatus('mandatory')
cpqHePowerFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerFailureStatus.setStatus('mandatory')
cpqHePowerFailureDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerFailureDeviceID.setStatus('mandatory')
cpqHePowerFailureArea = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).clone(namedValues=NamedValues(("systemBoard", 1), ("processor", 2), ("memory", 3), ("memoryBoard", 4), ("riserCardAssembly", 5), ("flexibleLOM", 6), ("flexibleSmartArray", 7), ("optIOPCIeSlots", 8), ("powerBackplane", 9), ("sasBackplane", 10), ("powerSupply", 11), ("mezzCard", 12), ("enclosure", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerFailureArea.setStatus('mandatory')
cpqHePowerFailureDeviceBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerFailureDeviceBitMap.setStatus('mandatory')
cpqHePowerFailureGroupString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerFailureGroupString.setStatus('mandatory')
cpqHePowerFailureRepairSteps = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("noError", 1), ("systemBoardRpMsg1", 2), ("processorRpMsg1", 3), ("memoryRpMsg1", 4), ("memoryBoardRpMsg1", 5), ("riserCardAssemblyRpMsg1", 6), ("flexibleLomRpMsg1", 7), ("flexibleSmartArrayRpMsg1", 8), ("optIOPCIeSlotsRpMsg1", 9), ("powerBackplaneRpMsg1", 10), ("sasBackplaneRpMsg1", 11), ("powerSupplyRpMsg1", 12), ("mezzCardRpMsg1", 13), ("enclosureRpMsg1", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerFailureRepairSteps.setStatus('mandatory')
cpqHePowerFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 20, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("noError", 1), ("tempDeadly", 2), ("inputPowerLoss", 3), ("badFuse", 4), ("standby", 5), ("runtime", 6), ("powerOn", 7), ("generic", 8), ("cpuThermTrip", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHePowerFailureType.setStatus('mandatory')
cpqHeInterlockFailureSupported = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 21, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeInterlockFailureSupported.setStatus('mandatory')
cpqHeInterlockFailureTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 21, 2), )
if mibBuilder.loadTexts: cpqHeInterlockFailureTable.setStatus('mandatory')
cpqHeInterlockFailureTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 21, 2, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeInterlockFailureIndex"))
if mibBuilder.loadTexts: cpqHeInterlockFailureTableEntry.setStatus('mandatory')
cpqHeInterlockFailureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeInterlockFailureIndex.setStatus('mandatory')
cpqHeInterlockFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeInterlockFailureStatus.setStatus('mandatory')
cpqHeInterlockFailureDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 21, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeInterlockFailureDeviceID.setStatus('mandatory')
cpqHeInterlockFailureArea = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).clone(namedValues=NamedValues(("systemBoard", 1), ("processor", 2), ("memory", 3), ("memoryBoard", 4), ("riserCardAssembly", 5), ("flexibleLOM", 6), ("flexibleSmartArray", 7), ("optIOPCIeSlots", 8), ("powerBackplane", 9), ("sasBackplane", 10), ("powerSupply", 11), ("mezzCard", 12), ("enclosure", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeInterlockFailureArea.setStatus('mandatory')
cpqHeInterlockFailureDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 21, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeInterlockFailureDeviceName.setStatus('mandatory')
cpqHeInterlockFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 21, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("noError", 1), ("standby", 2), ("runtime", 3), ("powerOn", 4), ("generic", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeInterlockFailureType.setStatus('mandatory')
cpqHeNvdimmCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmCondition.setStatus('mandatory')
cpqHeNvdimmTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2), )
if mibBuilder.loadTexts: cpqHeNvdimmTable.setStatus('mandatory')
cpqHeNvdimmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), (0, "CPQHLTH-MIB", "cpqHeNvdimmDimmNum"))
if mibBuilder.loadTexts: cpqHeNvdimmTableEntry.setStatus('mandatory')
cpqHeNvdimmDimmNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmDimmNum.setStatus('mandatory')
cpqHeNvdimmProcessorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmProcessorNum.setStatus('mandatory')
cpqHeNvdimmType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("unknown", 1), ("nvdimm-n", 2), ("nvdimm-f", 3), ("nvdimm-p", 4), ("nvdimm-logical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmType.setStatus('mandatory')
cpqHeNvdimmMemoryMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("dram", 2), ("nand", 3), ("proprietary", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmMemoryMedia.setStatus('mandatory')
cpqHeNvdimmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmStatus.setStatus('mandatory')
cpqHeNvdimmBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("inprogress", 2), ("complete", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmBackupStatus.setStatus('mandatory')
cpqHeNvdimmRestoreStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("inprogress", 2), ("complete", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmRestoreStatus.setStatus('mandatory')
cpqHeNvdimmEraseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("inprogress", 2), ("complete", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmEraseStatus.setStatus('mandatory')
cpqHeNvdimmPredictedMediaLifePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmPredictedMediaLifePercent.setStatus('mandatory')
cpqHeNvdimmPersistentRegionSizeLimitMiB = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmPersistentRegionSizeLimitMiB.setStatus('mandatory')
cpqHeNvdimmVolatileRegionSizeLimitMiB = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmVolatileRegionSizeLimitMiB.setStatus('mandatory')
cpqHeNvdimmPwrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("unknown", 1), ("superCap", 2), ("aux", 3), ("systemBattery", 4), ("ups", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmPwrSource.setStatus('mandatory')
cpqHeNvdimmFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmFirmwareRev.setStatus('mandatory')
cpqHeNvdimmMfrId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmMfrId.setStatus('mandatory')
cpqHeNvdimmMfrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmMfrLocation.setStatus('mandatory')
cpqHeNvdimmMfrDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmMfrDate.setStatus('mandatory')
cpqHeNvdimmSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmSerialNumber.setStatus('mandatory')
cpqHeNvdimmAssociatedNVMeDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmAssociatedNVMeDrive.setStatus('mandatory')
cpqHeNvdimmAssociatedUPS = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 22, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeNvdimmAssociatedUPS.setStatus('mandatory')
cpqHeBbuCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuCondition.setStatus('mandatory')
cpqHeBbuTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2), )
if mibBuilder.loadTexts: cpqHeBbuTable.setStatus('mandatory')
cpqHeBbuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeBbuChassis"), (0, "CPQHLTH-MIB", "cpqHeBbuBay"))
if mibBuilder.loadTexts: cpqHeBbuEntry.setStatus('mandatory')
cpqHeBbuChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuChassis.setStatus('mandatory')
cpqHeBbuBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuBay.setStatus('mandatory')
cpqHeBbuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("failure", 3), ("permanentFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuStatus.setStatus('mandatory')
cpqHeBbuTimeToCutoff = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuTimeToCutoff.setStatus('mandatory')
cpqHeBbuTimeToCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuTimeToCharge.setStatus('mandatory')
cpqHeBbuRatedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuRatedCapacity.setStatus('mandatory')
cpqHeBbuPresentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuPresentCapacity.setStatus('mandatory')
cpqHeBbuCutoffCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuCutoffCapacity.setStatus('mandatory')
cpqHeBbuCutoffSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuCutoffSetPoint.setStatus('mandatory')
cpqHeBbuChargePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuChargePercentage.setStatus('mandatory')
cpqHeBbuSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuSerialNumber.setStatus('mandatory')
cpqHeBbuMaxCapacityWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuMaxCapacityWatts.setStatus('mandatory')
cpqHeBbuFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuFirmware.setStatus('mandatory')
cpqHeBbuChargeState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("unknown", 1), ("discharging", 2), ("notCharging", 3), ("slowCharging", 4), ("standardCharging", 5), ("charged", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuChargeState.setStatus('mandatory')
cpqHeBbuErrorCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 2, 23, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("noError", 1), ("batteryFailure", 2), ("replaceBattery", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeBbuErrorCondition.setStatus('mandatory')
cpqHeTrapPkts = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTrapPkts.setStatus('deprecated')
cpqHeTrapLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTrapLogMaxSize.setStatus('deprecated')
cpqHeTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 6, 3, 3), )
if mibBuilder.loadTexts: cpqHeTrapLogTable.setStatus('deprecated')
cpqHeTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 6, 3, 3, 1), ).setIndexNames((0, "CPQHLTH-MIB", "cpqHeTrapLogIndex"))
if mibBuilder.loadTexts: cpqHeTrapLogEntry.setStatus('deprecated')
cpqHeTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTrapLogIndex.setStatus('deprecated')
cpqHeTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013)).clone(namedValues=NamedValues(("cpqHeCorrectableMemoryError", 1), ("cpqHeCorrectableMemoryLogDisabled", 2), ("cpqHe2CorrectableMemoryError", 6001), ("cpqHe2CorrectableMemoryLogDisabled", 6002), ("cpqHeThermalTempFailed", 6003), ("cpqHeThermalTempDegraded", 6004), ("cpqHeThermalTempOk", 6005), ("cpqHeThermalSystemFanFailed", 6006), ("cpqHeThermalSystemFanDegraded", 6007), ("cpqHeThermalSystemFanOk", 6008), ("cpqHeThermalCpuFanFailed", 6009), ("cpqHeThermalCpuFanOk", 6010), ("cpqHeAsrConfirmation", 6011), ("cpqHeThermalConfirmation", 6012), ("cpqHePostError", 6013)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTrapType.setStatus('deprecated')
cpqHeTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 6, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHeTrapTime.setStatus('deprecated')
cpqHeCorrectableMemoryError = NotificationType((1, 3, 6, 1, 4, 1, 232, 6) + (0,1)).setObjects(("CPQHLTH-MIB", "cpqHeCorrMemTotalErrs"))
cpqHeCorrectableMemoryLogDisabled = NotificationType((1, 3, 6, 1, 4, 1, 232, 6) + (0,2)).setObjects(("CPQHLTH-MIB", "cpqHeCorrMemLogStatus"))
cpqHe2CorrectableMemoryError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6001)).setObjects(("CPQHLTH-MIB", "cpqHeCorrMemTotalErrs"))
cpqHe2CorrectableMemoryLogDisabled = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6002)).setObjects(("CPQHLTH-MIB", "cpqHeCorrMemLogStatus"))
cpqHeThermalTempFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6003))
cpqHeThermalTempDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6004)).setObjects(("CPQHLTH-MIB", "cpqHeThermalDegradedAction"))
cpqHeThermalTempOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6005))
cpqHeThermalSystemFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6006)).setObjects(("CPQHLTH-MIB", "cpqHeThermalDegradedAction"))
cpqHeThermalSystemFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6007))
cpqHeThermalSystemFanOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6008))
cpqHeThermalCpuFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6009))
cpqHeThermalCpuFanOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6010))
cpqHeAsrConfirmation = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6011))
cpqHeThermalConfirmation = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6012))
cpqHePostError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6013))
cpqHeFltTolPwrSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6014))
cpqHe3CorrectableMemoryError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeCorrMemTotalErrs"))
cpqHe3CorrectableMemoryLogDisabled = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeCorrMemLogStatus"))
cpqHe3ThermalTempFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3ThermalTempDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeThermalDegradedAction"))
cpqHe3ThermalTempOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3ThermalSystemFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeThermalDegradedAction"))
cpqHe3ThermalSystemFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3ThermalSystemFanOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6022)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3ThermalCpuFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6023)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3ThermalCpuFanOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6024)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3AsrConfirmation = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6025)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3ThermalConfirmation = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6026)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3PostError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6027)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3FltTolPwrSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6028)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3CorrMemReplaceMemModule = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6029)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3FltTolPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6030)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"))
cpqHe3FltTolPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6031)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"))
cpqHe3FltTolPowerRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6032)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"))
cpqHe3FltTolPowerSupplyInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6033)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"))
cpqHe3FltTolPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6034)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"))
cpqHe3FltTolFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6035)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolFanChassis"), ("CPQHLTH-MIB", "cpqHeFltTolFanIndex"))
cpqHe3FltTolFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6036)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolFanChassis"), ("CPQHLTH-MIB", "cpqHeFltTolFanIndex"))
cpqHe3FltTolFanRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6037)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolFanChassis"))
cpqHe3FltTolFanInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6038)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolFanChassis"), ("CPQHLTH-MIB", "cpqHeFltTolFanIndex"))
cpqHe3FltTolFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6039)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolFanChassis"), ("CPQHLTH-MIB", "cpqHeFltTolFanIndex"))
cpqHe3TemperatureFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6040)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeTemperatureChassis"), ("CPQHLTH-MIB", "cpqHeTemperatureLocale"))
cpqHe3TemperatureDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6041)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeThermalDegradedAction"), ("CPQHLTH-MIB", "cpqHeTemperatureChassis"), ("CPQHLTH-MIB", "cpqHeTemperatureLocale"))
cpqHe3TemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6042)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeTemperatureChassis"), ("CPQHLTH-MIB", "cpqHeTemperatureLocale"))
cpqHe3PowerConverterDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6043)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHePwrConvChassis"), ("CPQHLTH-MIB", "cpqHePwrConvSlot"), ("CPQHLTH-MIB", "cpqHePwrConvSocket"))
cpqHe3PowerConverterFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6044)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHePwrConvChassis"), ("CPQHLTH-MIB", "cpqHePwrConvSlot"), ("CPQHLTH-MIB", "cpqHePwrConvSocket"))
cpqHe3PowerConverterRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6045)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHePwrConvChassis"))
cpqHe3CacheAccelParityError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6046)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeResilientMemOnlineSpareEngaged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6047)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe4FltTolPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6048)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyStatus"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyModel"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplySerialNumber"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyAutoRev"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyFirmwareRev"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplySparePartNum"), ("CPQSINFO-MIB", "cpqSiServerSystemId"))
cpqHe4FltTolPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6049)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyStatus"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyModel"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplySerialNumber"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyAutoRev"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyFirmwareRev"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplySparePartNum"), ("CPQSINFO-MIB", "cpqSiServerSystemId"))
cpqHe4FltTolPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6050)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyStatus"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyModel"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplySerialNumber"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyAutoRev"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyFirmwareRev"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplySparePartNum"), ("CPQSINFO-MIB", "cpqSiServerSystemId"))
cpqHeResilientMemMirroredMemoryEngaged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6051)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeResilientAdvancedECCMemoryEngaged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6052)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeResilientMemXorMemoryEngaged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6053)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe3FltTolPowerRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6054)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"))
cpqHe3FltTolFanRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6055)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolFanChassis"))
cpqHe4CorrMemReplaceMemModule = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6056)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeResMemBoardIndex"), ("CPQHLTH-MIB", "cpqHeResMemModuleIndex"), ("CPQHLTH-MIB", "cpqHeResMemModuleSparePartNo"), ("CPQSINFO-MIB", "cpqSiMemModuleSize"), ("CPQSINFO-MIB", "cpqSiServerSystemId"))
cpqHeResMemBoardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6057)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeResMemBoardSlotIndex"))
cpqHeResMemBoardInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6058)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeResMemBoardSlotIndex"))
cpqHeResMemBoardBusError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6059)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeResMemBoardSlotIndex"))
cpqHeEventOccurred = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6060)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeEventLogEntryNumber"), ("CPQHLTH-MIB", "cpqHeEventLogEntrySeverity"), ("CPQHLTH-MIB", "cpqHeEventLogUpdateTime"), ("CPQHLTH-MIB", "cpqHeEventLogErrorDesc"))
cpqHeManagementProcInReset = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6061)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeManagementProcReady = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6062)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeManagementProcFailedReset = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6063)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe5CorrMemReplaceMemModule = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6064)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeResMem2BoardNum"), ("CPQHLTH-MIB", "cpqHeResMem2CpuNum"), ("CPQHLTH-MIB", "cpqHeResMem2RiserNum"), ("CPQHLTH-MIB", "cpqHeResMem2ModuleNum"), ("CPQHLTH-MIB", "cpqHeResMem2ModulePartNo"), ("CPQHLTH-MIB", "cpqHeResMem2ModuleSize"), ("CPQSINFO-MIB", "cpqSiServerSystemId"))
cpqHe5ResMemBoardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6065)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeResMem2BoardSlotNum"), ("CPQHLTH-MIB", "cpqHeResMem2BoardCpuNum"), ("CPQHLTH-MIB", "cpqHeResMem2BoardRiserNum"))
cpqHe5ResMemBoardInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6066)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeResMem2BoardSlotNum"), ("CPQHLTH-MIB", "cpqHeResMem2BoardCpuNum"), ("CPQHLTH-MIB", "cpqHeResMem2BoardRiserNum"))
cpqHe5ResMemBoardBusError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6067)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeResMem2BoardSlotNum"), ("CPQHLTH-MIB", "cpqHeResMem2BoardCpuNum"), ("CPQHLTH-MIB", "cpqHeResMem2BoardRiserNum"))
cpqHeResilientMemLockStepMemoryEngaged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6068)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHe4FltTolPowerSupplyACpowerloss = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6069)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyStatus"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyModel"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplySerialNumber"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyAutoRev"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyFirmwareRev"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplySparePartNum"), ("CPQSINFO-MIB", "cpqSiServerSystemId"))
cpqHeSysBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6070)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"), ("CPQHLTH-MIB", "cpqHeSysBatteryChassis"), ("CPQHLTH-MIB", "cpqHeSysBatteryIndex"), ("CPQHLTH-MIB", "cpqHeSysBatteryStatus"), ("CPQHLTH-MIB", "cpqHeSysBatteryModel"), ("CPQHLTH-MIB", "cpqHeSysBatterySerialNumber"), ("CPQHLTH-MIB", "cpqHeSysBatterySparePartNum"))
cpqHeSysBatteryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6071)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"), ("CPQHLTH-MIB", "cpqHeSysBatteryChassis"), ("CPQHLTH-MIB", "cpqHeSysBatteryIndex"))
cpqHeSysPwrAllocationNotOptimized = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6072)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"))
cpqHeSysPwrOnDenied = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6073)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"), ("CPQHLTH-MIB", "cpqHeSysBoardFruStatus"))
cpqHePowerFailureError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6074)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"), ("CPQHLTH-MIB", "cpqHePowerFailureIndex"), ("CPQHLTH-MIB", "cpqHePowerFailureType"), ("CPQHLTH-MIB", "cpqHePowerFailureArea"), ("CPQHLTH-MIB", "cpqHePowerFailureGroupString"), ("CPQHLTH-MIB", "cpqHePowerFailureDeviceBitMap"), ("CPQHLTH-MIB", "cpqHePowerFailureRepairSteps"))
cpqHeInterlockFailureError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6075)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"), ("CPQHLTH-MIB", "cpqHeInterlockFailureIndex"), ("CPQHLTH-MIB", "cpqHeInterlockFailureType"), ("CPQHLTH-MIB", "cpqHeInterlockFailureDeviceName"))
cpqHeNvdimmBackupError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6076)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmRestoreError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6077)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmUncorrectableMemoryError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6078)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmBackupPowerError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6079)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeNvdimmNVDIMMControllerError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6080)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmEraseError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6081)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmArmingError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6082)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmSanitizationOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6083)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"))
cpqHeNvdimmSanitizationError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6084)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmControllerFirmwareError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6085)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"))
cpqHeNvdimmErrorInterleaveOn = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6086)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmInterleaveOff = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6087)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmEventNotifyError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6088)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmPersistencyLost = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6089)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmPersistencyRestored = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6090)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"))
cpqHeNvdimmLifecycleWarning = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6091)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeNvdimmProcessorNum"), ("CPQHLTH-MIB", "cpqHeNvdimmDimmNum"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrId"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrLocation"), ("CPQHLTH-MIB", "cpqHeNvdimmMfrDate"), ("CPQHLTH-MIB", "cpqHeNvdimmSerialNumber"))
cpqHeNvdimmLogicalNvdimmError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6092)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeNvdimmConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6093)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeNvdimmBatteryNotChargedwithWait = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6094)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeNvdimmBatteryNotChargedwithNoWait = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6095)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeDimmMemoryMapChanged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6096)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeNvdimmPersistantMemoryAddressError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6097)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHeNvdimmInitializationError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6098)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHePwrSupplyError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6099)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyErrorCondition"))
cpqHePwrSupplyErrorRepaired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6100)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyChassis"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyBay"), ("CPQHLTH-MIB", "cpqHeFltTolPowerSupplyErrorCondition"))
cpqHeBbuError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6101)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeBbuChassis"), ("CPQHLTH-MIB", "cpqHeBbuBay"), ("CPQHLTH-MIB", "cpqHeBbuErrorCondition"))
cpqHeBbuErrorRepaired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6102)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHLTH-MIB", "cpqHeBbuChassis"), ("CPQHLTH-MIB", "cpqHeBbuBay"), ("CPQHLTH-MIB", "cpqHeBbuErrorCondition"))
cpqHeNoPowerSupplyDetected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6103)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqHePowerProtectionFault = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,6104)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
mibBuilder.exportSymbols("CPQHLTH-MIB", cpqHePwrSupplyErrorRepaired=cpqHePwrSupplyErrorRepaired, cpqHeCriticalErrorTime=cpqHeCriticalErrorTime, cpqHeSysPwrAllocationOptimizeStatus=cpqHeSysPwrAllocationOptimizeStatus, cpqHeCriticalErrorType=cpqHeCriticalErrorType, cpqHeOsCommon=cpqHeOsCommon, cpqHeAsrStatus=cpqHeAsrStatus, cpqHeResMem2ModulePartNoMfgr=cpqHeResMem2ModulePartNoMfgr, cpqHeNvdimmVolatileRegionSizeLimitMiB=cpqHeNvdimmVolatileRegionSizeLimitMiB, cpqHeNw3xDriverVersion=cpqHeNw3xDriverVersion, cpqHeSysBackupBattery=cpqHeSysBackupBattery, cpqHeAsrBaseIo=cpqHeAsrBaseIo, cpqHeResMemModuleCondition=cpqHeResMemModuleCondition, cpqHeResMemBoardEntry=cpqHeResMemBoardEntry, cpqHeResilientMemTypeAvailable=cpqHeResilientMemTypeAvailable, cpqHeTemperatureLocale=cpqHeTemperatureLocale, cpqHeResMemModuleEntry=cpqHeResMemModuleEntry, cpqHeSysBatteryTable=cpqHeSysBatteryTable, cpqHeSysUtilPciIndex=cpqHeSysUtilPciIndex, cpqHeResilientMemXorMemoryEngaged=cpqHeResilientMemXorMemoryEngaged, cpqHeAsrReset=cpqHeAsrReset, cpqHeSysBatteryCondition=cpqHeSysBatteryCondition, cpqHeFltTolPowerSupplyChassis=cpqHeFltTolPowerSupplyChassis, cpqHeFltTolPowerSupplyBay=cpqHeFltTolPowerSupplyBay, cpqHeEventLogEntry=cpqHeEventLogEntry, cpqHe3FltTolFanRedundancyLost=cpqHe3FltTolFanRedundancyLost, cpqHePowerConverterCondition=cpqHePowerConverterCondition, cpqHeCorrMemErrHwLocation=cpqHeCorrMemErrHwLocation, cpqHeThermalFanTable=cpqHeThermalFanTable, cpqHeThermalCondition=cpqHeThermalCondition, cpqHeResMem2ModuleEntry=cpqHeResMem2ModuleEntry, cpqHe3ThermalTempFailed=cpqHe3ThermalTempFailed, cpqHeTemperatureThreshold=cpqHeTemperatureThreshold, cpqHeNw3xDriverDate=cpqHeNw3xDriverDate, cpqHeSysUtilEisaBusHour=cpqHeSysUtilEisaBusHour, cpqHe4FltTolPowerSupplyDegraded=cpqHe4FltTolPowerSupplyDegraded, cpqHeNvdimmControllerFirmwareError=cpqHeNvdimmControllerFirmwareError, cpqHePostMsg=cpqHePostMsg, cpqHePostMsgIndex=cpqHePostMsgIndex, cpqHeCorrectableMemoryLogDisabled=cpqHeCorrectableMemoryLogDisabled, cpqHeSysBatteryChassis=cpqHeSysBatteryChassis, cpqHeCorrMemErrCount=cpqHeCorrMemErrCount, cpqHeResMemModuleTable=cpqHeResMemModuleTable, cpqHeSysUtilLifeTime=cpqHeSysUtilLifeTime, cpqHeResMem2ModuleTechnology=cpqHeResMem2ModuleTechnology, cpqHePowerFailureType=cpqHePowerFailureType, cpqHeResilientMemory=cpqHeResilientMemory, cpqHe3PostError=cpqHe3PostError, cpqHeResMem2BoardErrorStatus=cpqHeResMem2BoardErrorStatus, cpqHePwrConvPresent=cpqHePwrConvPresent, cpqHealth=cpqHealth, cpqHeThermalCpuFanOk=cpqHeThermalCpuFanOk, cpqHeNvdimm=cpqHeNvdimm, cpqHeOsCommonModuleTable=cpqHeOsCommonModuleTable, cpqHeFltTolPowerSupplyRedundantPartner=cpqHeFltTolPowerSupplyRedundantPartner, cpqHeNvdimmLogicalNvdimmError=cpqHeNvdimmLogicalNvdimmError, cpqHePowerConverterTable=cpqHePowerConverterTable, cpqHeCriticalErrorInfo=cpqHeCriticalErrorInfo, cpqHeMgmtDisplayType=cpqHeMgmtDisplayType, cpqHePwrConvChassis=cpqHePwrConvChassis, cpqHeEventLogTable=cpqHeEventLogTable, cpqHeThermalCpuFanFailed=cpqHeThermalCpuFanFailed, cpqHeMibRev=cpqHeMibRev, cpqHe4FltTolPowerSupplyOk=cpqHe4FltTolPowerSupplyOk, cpqHeAsrPost=cpqHeAsrPost, cpqHeNvdimmPersistantMemoryAddressError=cpqHeNvdimmPersistantMemoryAddressError, cpqHeCorrMemErrSyndrome=cpqHeCorrMemErrSyndrome, cpqHePostMsgEntry=cpqHePostMsgEntry, cpqHeThermalFanEntry=cpqHeThermalFanEntry, cpqHePwrSupplyError=cpqHePwrSupplyError, cpqHeFltTolFanPresent=cpqHeFltTolFanPresent, cpqHeCriticalErrorStatus=cpqHeCriticalErrorStatus, cpqHeBbuSerialNumber=cpqHeBbuSerialNumber, cpqHeCorrMemTotalErrs=cpqHeCorrMemTotalErrs, cpqHeSysPwrAllocationNotOptimized=cpqHeSysPwrAllocationNotOptimized, cpqHeMgmtDisplayText=cpqHeMgmtDisplayText, cpqHeResMem2Module=cpqHeResMem2Module, cpqHePwrConvRedundant=cpqHePwrConvRedundant, cpqHeThermalSystemFanFailed=cpqHeThermalSystemFanFailed, cpqHeResilientMemMirroredMemoryEngaged=cpqHeResilientMemMirroredMemoryEngaged, cpqHeResMem2BoardCpuNum=cpqHeResMem2BoardCpuNum, cpqHe4FltTolPowerSupplyACpowerloss=cpqHe4FltTolPowerSupplyACpowerloss, cpqHeEventLogEntryCount=cpqHeEventLogEntryCount, cpqHeResMem2BoardTotalMemSize=cpqHeResMem2BoardTotalMemSize, cpqHe2CorrectableMemoryError=cpqHe2CorrectableMemoryError, cpqHeTemperatureCondition=cpqHeTemperatureCondition, cpqHeCriticalError=cpqHeCriticalError, cpqHeCritLogCondition=cpqHeCritLogCondition, cpqHeNvdimmUncorrectableMemoryError=cpqHeNvdimmUncorrectableMemoryError, cpqHeAsrCommPort=cpqHeAsrCommPort, cpqHeResilientMemRivState=cpqHeResilientMemRivState, cpqHe3CorrectableMemoryLogDisabled=cpqHe3CorrectableMemoryLogDisabled, cpqHeFltTolPowerSupplyRedundant=cpqHeFltTolPowerSupplyRedundant, cpqHePowerConverterSupported=cpqHePowerConverterSupported, cpqHeSysUtilEisaBusMin=cpqHeSysUtilEisaBusMin, cpqHeEventOccurred=cpqHeEventOccurred, cpqHeSysUtilPciEntry=cpqHeSysUtilPciEntry, cpqHeAsrDialOutNumber=cpqHeAsrDialOutNumber, cpqHe3TemperatureOk=cpqHe3TemperatureOk, cpqHeNvdimmType=cpqHeNvdimmType, cpqHeResMem2BoardOnlineStatus=cpqHeResMem2BoardOnlineStatus, cpqHeResMem2ModuleSerialNoMfgr=cpqHeResMem2ModuleSerialNoMfgr, cpqHeTemperatureIndex=cpqHeTemperatureIndex, cpqHeSysBatterySerialNumber=cpqHeSysBatterySerialNumber, cpqHe3FltTolPowerSupplyRemoved=cpqHe3FltTolPowerSupplyRemoved, cpqHeResMem2ModuleMinVoltage=cpqHeResMem2ModuleMinVoltage, cpqHe3FltTolFanRemoved=cpqHe3FltTolFanRemoved, cpqHeInterlockFailureTableEntry=cpqHeInterlockFailureTableEntry, cpqHeAsrPagerMessage=cpqHeAsrPagerMessage, cpqHeResMemModuleIndex=cpqHeResMemModuleIndex, cpqHeResMemBoardCondition=cpqHeResMemBoardCondition, cpqHeAsrPagerNumber=cpqHeAsrPagerNumber, cpqHeNvdimmFirmwareRev=cpqHeNvdimmFirmwareRev, cpqHeInterlockFailure=cpqHeInterlockFailure, cpqHe5CorrMemReplaceMemModule=cpqHe5CorrMemReplaceMemModule, cpqHe3FltTolPwrSupplyDegraded=cpqHe3FltTolPwrSupplyDegraded, cpqHeResMem2ModuleManufacturer=cpqHeResMem2ModuleManufacturer, cpqHeFltTolPowerSupplyModel=cpqHeFltTolPowerSupplyModel, cpqHeNvdimmCondition=cpqHeNvdimmCondition, cpqHePwrConvHwLocation=cpqHePwrConvHwLocation, cpqHeResMem2ModuleCellTablePtr=cpqHeResMem2ModuleCellTablePtr, cpqHeResilientMemOsMemSize=cpqHeResilientMemOsMemSize, cpqHeResMem2BoardEntry=cpqHeResMem2BoardEntry, cpqHeAsrMinorVersion=cpqHeAsrMinorVersion, cpqHeBbuErrorRepaired=cpqHeBbuErrorRepaired, cpqHeCritLogSupported=cpqHeCritLogSupported, cpqHeEventLogEntryCode=cpqHeEventLogEntryCode, cpqHe3FltTolFanInserted=cpqHe3FltTolFanInserted, cpqHeNvdimmRestoreStatus=cpqHeNvdimmRestoreStatus, cpqHeCorrMemErrDdr=cpqHeCorrMemErrDdr, cpqHeEventLog=cpqHeEventLog, cpqHeFltTolFanEntry=cpqHeFltTolFanEntry, cpqHeThermalCpuFanStatus=cpqHeThermalCpuFanStatus, cpqHePostMsgEv=cpqHePostMsgEv, cpqHeBbuError=cpqHeBbuError, cpqHeResMemBoardBusError=cpqHeResMemBoardBusError, cpqHeInterface=cpqHeInterface, cpqHeFltTolFanHotPlug=cpqHeFltTolFanHotPlug, cpqHeAsrBaudRate=cpqHeAsrBaudRate, cpqHeFltTolPowerSupplyErrorCondition=cpqHeFltTolPowerSupplyErrorCondition, cpqHeInterlockFailureError=cpqHeInterlockFailureError, cpqHeResMemBoardInserted=cpqHeResMemBoardInserted, cpqHeNoPowerSupplyDetected=cpqHeNoPowerSupplyDetected, cpqHeTrapLogMaxSize=cpqHeTrapLogMaxSize, cpqHe3ThermalSystemFanDegraded=cpqHe3ThermalSystemFanDegraded, cpqHeTrapLogIndex=cpqHeTrapLogIndex, cpqHeResMemModuleSpd=cpqHeResMemModuleSpd, cpqHeSysUtilEisaBusFiveMin=cpqHeSysUtilEisaBusFiveMin, cpqHeFltTolFanCondition=cpqHeFltTolFanCondition, cpqHeBbuPresentCapacity=cpqHeBbuPresentCapacity, cpqHeResMemBoardErrorStatus=cpqHeResMemBoardErrorStatus, cpqHeSysBatteryProductName=cpqHeSysBatteryProductName, cpqHeNvdimmTableEntry=cpqHeNvdimmTableEntry, cpqHePowerFailureTableEntry=cpqHePowerFailureTableEntry, cpqHeNvdimmInterleaveOff=cpqHeNvdimmInterleaveOff, cpqHe3ThermalTempOk=cpqHe3ThermalTempOk, cpqHePwrConvCondition=cpqHePwrConvCondition, cpqHePowerFailureDeviceID=cpqHePowerFailureDeviceID, cpqHeNvdimmRestoreError=cpqHeNvdimmRestoreError, cpqHeResMem2BoardNumSockets=cpqHeResMem2BoardNumSockets, cpqHeNw3xDriverName=cpqHeNw3xDriverName, cpqHeFltTolPowerSupplySerialNumber=cpqHeFltTolPowerSupplySerialNumber, cpqHeThermalTempStatus=cpqHeThermalTempStatus, cpqHeEventLogFreeFormData=cpqHeEventLogFreeFormData, cpqHeFltTolPwrSupplyCondition=cpqHeFltTolPwrSupplyCondition, cpqHeEventLogUpdateTime=cpqHeEventLogUpdateTime, cpqHeSysBackupBatteryCondition=cpqHeSysBackupBatteryCondition, cpqHe3ThermalConfirmation=cpqHe3ThermalConfirmation, cpqHe3ThermalCpuFanOk=cpqHe3ThermalCpuFanOk, cpqHeResilientMemHotPlug=cpqHeResilientMemHotPlug, cpqHeSysUtilPciDevice=cpqHeSysUtilPciDevice, cpqHeCorrMemErrorCntThresh=cpqHeCorrMemErrorCntThresh, cpqHeResMem2ModuleTable=cpqHeResMem2ModuleTable, cpqHeSysBatteryModel=cpqHeSysBatteryModel, cpqHeIRCStatus=cpqHeIRCStatus, cpqHePowerConverter=cpqHePowerConverter, cpqHeSysBatteryFirmwareRev=cpqHeSysBatteryFirmwareRev, cpqHeNvdimmMemoryMedia=cpqHeNvdimmMemoryMedia, cpqHeResilientMemLockStepMemoryEngaged=cpqHeResilientMemLockStepMemoryEngaged, cpqHeTrap=cpqHeTrap, cpqHeThermalFanPresent=cpqHeThermalFanPresent, cpqHe5ResMemBoardBusError=cpqHe5ResMemBoardBusError, cpqHeNvdimmStatus=cpqHeNvdimmStatus, cpqHeAsrRebootLimit=cpqHeAsrRebootLimit, cpqHe3TemperatureFailed=cpqHe3TemperatureFailed, cpqHeNvdimmPersistencyRestored=cpqHeNvdimmPersistencyRestored, cpqHePowerFailureRepairSteps=cpqHePowerFailureRepairSteps, cpqHeSysUtilPciFiveMin=cpqHeSysUtilPciFiveMin, cpqHeSysUtilEisaBusThirtyMin=cpqHeSysUtilEisaBusThirtyMin, cpqHe3PowerConverterDegraded=cpqHe3PowerConverterDegraded, cpqHeSysUtilPciTable=cpqHeSysUtilPciTable, cpqHeNvdimmAssociatedUPS=cpqHeNvdimmAssociatedUPS, cpqHeManagementProcReady=cpqHeManagementProcReady, cpqHeTemperatureCelsius=cpqHeTemperatureCelsius, cpqHe3FltTolPowerRedundancyLost=cpqHe3FltTolPowerRedundancyLost, cpqHeIRC=cpqHeIRC, cpqHeAsrRebootCount=cpqHeAsrRebootCount, cpqHeBbu=cpqHeBbu, cpqHe3TemperatureDegraded=cpqHe3TemperatureDegraded, cpqHeFltTolPowerSupplyHotPlug=cpqHeFltTolPowerSupplyHotPlug, cpqHePwrConvRedundantGroupId=cpqHePwrConvRedundantGroupId, cpqHeMibCondition=cpqHeMibCondition, cpqHeBbuMaxCapacityWatts=cpqHeBbuMaxCapacityWatts, cpqHeFltTolPowerSupplyCapacityUsed=cpqHeFltTolPowerSupplyCapacityUsed, cpqHeResMemBoardOnlineStatus=cpqHeResMemBoardOnlineStatus, cpqHeResMem2ModuleCellStatus=cpqHeResMem2ModuleCellStatus, cpqHeNvdimmConfigurationError=cpqHeNvdimmConfigurationError, cpqHe3FltTolPowerRedundancyRestored=cpqHe3FltTolPowerRedundancyRestored, cpqHeBbuTimeToCharge=cpqHeBbuTimeToCharge, cpqHeSysBatteryRemoved=cpqHeSysBatteryRemoved, cpqHe3CorrMemReplaceMemModule=cpqHe3CorrMemReplaceMemModule, cpqHeResMem2BoardCondition=cpqHeResMem2BoardCondition, cpqHeBbuBay=cpqHeBbuBay, cpqHeNvdimmSanitizationOk=cpqHeNvdimmSanitizationOk, cpqHeThermalDegradedAction=cpqHeThermalDegradedAction, cpqHeSysUtilPciMin=cpqHeSysUtilPciMin, cpqHeThermalTempOk=cpqHeThermalTempOk, cpqHePowerFailureSupported=cpqHePowerFailureSupported, cpqHePowerFailureError=cpqHePowerFailureError, cpqHeCriticalErrorEntry=cpqHeCriticalErrorEntry, cpqHePowerFailureStatus=cpqHePowerFailureStatus, cpqHeThermalSystemFanDegraded=cpqHeThermalSystemFanDegraded, cpqHeThermalTempDegraded=cpqHeThermalTempDegraded, cpqHeSysBatteryCapacityMaximum=cpqHeSysBatteryCapacityMaximum, cpqHeNvdimmDimmNum=cpqHeNvdimmDimmNum, cpqHeBbuStatus=cpqHeBbuStatus, cpqHeFltTolPowerSupplyCapacityMaximum=cpqHeFltTolPowerSupplyCapacityMaximum, cpqHeAsrBootFail=cpqHeAsrBootFail, cpqHeTrapLogEntry=cpqHeTrapLogEntry, cpqHeOsNetWare3x=cpqHeOsNetWare3x, cpqHeFltTolFanRedundantPartner=cpqHeFltTolFanRedundantPartner, cpqHeCorrMemLogStatus=cpqHeCorrMemLogStatus, cpqHeResMem2BoardIndex=cpqHeResMem2BoardIndex, cpqHeManagementProcFailedReset=cpqHeManagementProcFailedReset, cpqHePowerConverterEntry=cpqHePowerConverterEntry, cpqHeCorrMemErrIndex=cpqHeCorrMemErrIndex, cpqHeNvdimmProcessorNum=cpqHeNvdimmProcessorNum, cpqHeThermalConfirmation=cpqHeThermalConfirmation, cpqHeFltTolFanSpeed=cpqHeFltTolFanSpeed, cpqHeAsrMajorVersion=cpqHeAsrMajorVersion, cpqHe3AsrConfirmation=cpqHe3AsrConfirmation, cpqHe3ThermalTempDegraded=cpqHe3ThermalTempDegraded, cpqHeManagementProcInReset=cpqHeManagementProcInReset, cpqHeAsrNetworkAccessStatus=cpqHeAsrNetworkAccessStatus, cpqHe3FltTolPowerSupplyInserted=cpqHe3FltTolPowerSupplyInserted, cpqHeResMem2BoardSlotNum=cpqHeResMem2BoardSlotNum, cpqHeFltTolPowerSupplyTable=cpqHeFltTolPowerSupplyTable, cpqHeCriticalErrorTable=cpqHeCriticalErrorTable, cpqHeBbuCondition=cpqHeBbuCondition, cpqHeFltTolFanHwLocation=cpqHeFltTolFanHwLocation, cpqHeNvdimmEraseStatus=cpqHeNvdimmEraseStatus, cpqHe3FltTolFanFailed=cpqHe3FltTolFanFailed, cpqHeMibRevMinor=cpqHeMibRevMinor, cpqHeResMem2ModuleNum=cpqHeResMem2ModuleNum, cpqHeEventLogErrorDesc=cpqHeEventLogErrorDesc)
mibBuilder.exportSymbols("CPQHLTH-MIB", cpqHeResilientAdvancedECCMemoryEngaged=cpqHeResilientAdvancedECCMemoryEngaged, cpqHeThermalSystemFanStatus=cpqHeThermalSystemFanStatus, cpqHeOsCommonModuleDate=cpqHeOsCommonModuleDate, cpqHeBbuCutoffSetPoint=cpqHeBbuCutoffSetPoint, cpqHeInterlockFailureType=cpqHeInterlockFailureType, cpqHeOsCommonModulePurpose=cpqHeOsCommonModulePurpose, cpqHeSysUtilPciHwLocation=cpqHeSysUtilPciHwLocation, cpqHePowerFailureDeviceBitMap=cpqHePowerFailureDeviceBitMap, cpqHeResMemBoardIndex=cpqHeResMemBoardIndex, cpqHeAsrTimeout=cpqHeAsrTimeout, cpqHeResMem2BoardOperatingFrequency=cpqHeResMem2BoardOperatingFrequency, cpqHeResilientMemStatus=cpqHeResilientMemStatus, cpqHeNvdimmEventNotifyError=cpqHeNvdimmEventNotifyError, cpqHeCorrectableMemory=cpqHeCorrectableMemory, cpqHePostMsgDesc=cpqHePostMsgDesc, cpqHeNvdimmBackupError=cpqHeNvdimmBackupError, cpqHeFltTolPowerSupplyAutoRev=cpqHeFltTolPowerSupplyAutoRev, cpqHeInterlockFailureArea=cpqHeInterlockFailureArea, cpqHe3FltTolPowerSupplyDegraded=cpqHe3FltTolPowerSupplyDegraded, cpqHePowerFailure=cpqHePowerFailure, cpqHePowerFailureArea=cpqHePowerFailureArea, cpqHeResMem2BoardTable=cpqHeResMem2BoardTable, cpqHeThermalSystemFanOk=cpqHeThermalSystemFanOk, cpqHeInterlockFailureStatus=cpqHeInterlockFailureStatus, cpqHe3PowerConverterRedundancyLost=cpqHe3PowerConverterRedundancyLost, cpqHeResMem2ModuleCondition=cpqHeResMem2ModuleCondition, cpqHeOsCommonModuleName=cpqHeOsCommonModuleName, cpqHeFltTolFanLocale=cpqHeFltTolFanLocale, cpqHeNvdimmInitializationError=cpqHeNvdimmInitializationError, cpqHeResMem2ModuleSmartMemory=cpqHeResMem2ModuleSmartMemory, cpqHeResMem2ModuleDate=cpqHeResMem2ModuleDate, cpqHeDimmMemoryMapChanged=cpqHeDimmMemoryMapChanged, cpqHeResilientMemTypeActive=cpqHeResilientMemTypeActive, cpqHe3FltTolFanDegraded=cpqHe3FltTolFanDegraded, cpqHeNvdimmPwrSource=cpqHeNvdimmPwrSource, cpqHeResMem2ModuleRanks=cpqHeResMem2ModuleRanks, cpqHe3ThermalCpuFanFailed=cpqHe3ThermalCpuFanFailed, cpqHeCriticalErrorDesc=cpqHeCriticalErrorDesc, cpqHeAsrCondition=cpqHeAsrCondition, cpqHeResMem2ModuleHwLocation=cpqHeResMem2ModuleHwLocation, cpqHeThermalFanStatus=cpqHeThermalFanStatus, cpqHeResMemBoardLocked=cpqHeResMemBoardLocked, cpqHeNvdimmPersistencyLost=cpqHeNvdimmPersistencyLost, cpqHeResMemBoardHotPlug=cpqHeResMemBoardHotPlug, cpqHeBbuErrorCondition=cpqHeBbuErrorCondition, cpqHeThermalFanRequired=cpqHeThermalFanRequired, cpqHePostMsgCode=cpqHePostMsgCode, cpqHeNvdimmBackupPowerError=cpqHeNvdimmBackupPowerError, cpqHePowerMeterStatus=cpqHePowerMeterStatus, cpqHe3CorrectableMemoryError=cpqHe3CorrectableMemoryError, cpqHeBbuRatedCapacity=cpqHeBbuRatedCapacity, cpqHeTrapPkts=cpqHeTrapPkts, cpqHeFltTolPwrSupplyDegraded=cpqHeFltTolPwrSupplyDegraded, cpqHeResilientMemOnlineSpareEngaged=cpqHeResilientMemOnlineSpareEngaged, cpqHeResMemModuleSparePartNo=cpqHeResMemModuleSparePartNo, cpqHeHWBios=cpqHeHWBios, cpqHe5ResMemBoardInserted=cpqHe5ResMemBoardInserted, cpqHePowerMeterPrevReading=cpqHePowerMeterPrevReading, cpqHeFltTolPowerSupplyPresent=cpqHeFltTolPowerSupplyPresent, cpqHeResMem2ModulePartNo=cpqHeResMem2ModulePartNo, cpqHeNvdimmBatteryNotChargedwithNoWait=cpqHeNvdimmBatteryNotChargedwithNoWait, cpqHeTemperatureHwLocation=cpqHeTemperatureHwLocation, cpqHePowerFailureIndex=cpqHePowerFailureIndex, cpqHeSysPwrHw=cpqHeSysPwrHw, cpqHeResilientMemTotalMemSize=cpqHeResilientMemTotalMemSize, cpqHeCorrMemLogCondition=cpqHeCorrMemLogCondition, cpqHeNvdimmLifecycleWarning=cpqHeNvdimmLifecycleWarning, cpqHeFltTolFanTable=cpqHeFltTolFanTable, cpqHeMibRevMajor=cpqHeMibRevMajor, cpqHeThermalFanHwLocation=cpqHeThermalFanHwLocation, cpqHeAsrPollTime=cpqHeAsrPollTime, cpqHeNvdimmSerialNumber=cpqHeNvdimmSerialNumber, cpqHeBbuFirmware=cpqHeBbuFirmware, cpqHeInterlockFailureTable=cpqHeInterlockFailureTable, cpqHePowerFailureTable=cpqHePowerFailureTable, cpqHeResMemBoardOsMemSize=cpqHeResMemBoardOsMemSize, cpqHeCorrMemErrEntry=cpqHeCorrMemErrEntry, cpqHeResMem2ModuleSerialNo=cpqHeResMem2ModuleSerialNo, cpqHeResMem2BoardNum=cpqHeResMem2BoardNum, cpqHeNvdimmErrorInterleaveOn=cpqHeNvdimmErrorInterleaveOn, cpqHePowerMeterSupport=cpqHePowerMeterSupport, cpqHePwrConvSocket=cpqHePwrConvSocket, cpqHeResMemBoardNumSockets=cpqHeResMemBoardNumSockets, cpqHeThermal=cpqHeThermal, cpqHeResMem2RiserNum=cpqHeResMem2RiserNum, cpqHePwrConvIndex=cpqHePwrConvIndex, cpqHe4CorrMemReplaceMemModule=cpqHe4CorrMemReplaceMemModule, cpqHePostMsgTable=cpqHePostMsgTable, cpqHeResMemBoardRemoved=cpqHeResMemBoardRemoved, cpqHeCorrMemErrTime=cpqHeCorrMemErrTime, cpqHeTrapTime=cpqHeTrapTime, cpqHeNvdimmTable=cpqHeNvdimmTable, cpqHeFltTolPowerSupplyStatus=cpqHeFltTolPowerSupplyStatus, cpqHeNvdimmNVDIMMControllerError=cpqHeNvdimmNVDIMMControllerError, cpqHeThermalFanCurrentSpeed=cpqHeThermalFanCurrentSpeed, cpqHeTrapType=cpqHeTrapType, cpqHe3PowerConverterFailed=cpqHe3PowerConverterFailed, cpqHeFltTolFanChassis=cpqHeFltTolFanChassis, cpqHePostError=cpqHePostError, cpqHeOsCommonModuleIndex=cpqHeOsCommonModuleIndex, cpqHeEventLogEntryClass=cpqHeEventLogEntryClass, cpqHeCorrectableMemoryError=cpqHeCorrectableMemoryError, cpqHeBbuCutoffCapacity=cpqHeBbuCutoffCapacity, cpqHeResMem2BoardOsMemSize=cpqHeResMem2BoardOsMemSize, cpqHeAsrConfirmation=cpqHeAsrConfirmation, cpqHeFltTolPowerSupplyEntry=cpqHeFltTolPowerSupplyEntry, cpqHeInterlockFailureDeviceName=cpqHeInterlockFailureDeviceName, cpqHeResMem2ModuleType=cpqHeResMem2ModuleType, cpqHeNvdimmPredictedMediaLifePercent=cpqHeNvdimmPredictedMediaLifePercent, cpqHeNvdimmPersistentRegionSizeLimitMiB=cpqHeNvdimmPersistentRegionSizeLimitMiB, cpqHeThermalFanIndex=cpqHeThermalFanIndex, cpqHeHWBiosCondition=cpqHeHWBiosCondition, cpqHePowerMeterCurrReading=cpqHePowerMeterCurrReading, cpqHeAsrDialOutStatus=cpqHeAsrDialOutStatus, cpqHeFltTolPwrSupplyStatus=cpqHeFltTolPwrSupplyStatus, cpqHe3FltTolPowerSupplyFailed=cpqHe3FltTolPowerSupplyFailed, cpqHeResMemModuleStatus=cpqHeResMemModuleStatus, cpqHeNvdimmBatteryNotChargedwithWait=cpqHeNvdimmBatteryNotChargedwithWait, cpqHeTemperatureChassis=cpqHeTemperatureChassis, cpqHeCriticalErrorIndex=cpqHeCriticalErrorIndex, cpqHePowerProtectionFault=cpqHePowerProtectionFault, cpqHeFltTolFanCurrentSpeed=cpqHeFltTolFanCurrentSpeed, cpqHeResMem2BoardHotPlug=cpqHeResMem2BoardHotPlug, cpqHeResMem2CpuNum=cpqHeResMem2CpuNum, cpqHeNvdimmAssociatedNVMeDrive=cpqHeNvdimmAssociatedNVMeDrive, cpqHeThermalTempFailed=cpqHeThermalTempFailed, cpqHeSysUtil=cpqHeSysUtil, cpqHeSysUtilPciBus=cpqHeSysUtilPciBus, cpqHeFltTolFanRedundant=cpqHeFltTolFanRedundant, cpqHeAsrPagerStatus=cpqHeAsrPagerStatus, cpqHeNvdimmMfrId=cpqHeNvdimmMfrId, cpqHePwrConvSlot=cpqHePwrConvSlot, cpqHeAsrReboot=cpqHeAsrReboot, cpqHeResMemBoardSlotIndex=cpqHeResMemBoardSlotIndex, cpqHeTrapLogTable=cpqHeTrapLogTable, cpqHeEventLogSupported=cpqHeEventLogSupported, cpqHeResMem2ModuleFrequency=cpqHeResMem2ModuleFrequency, cpqHeResMem2BoardOperatingVoltage=cpqHeResMem2BoardOperatingVoltage, cpqHeFltTolPowerSupplyMainVoltage=cpqHeFltTolPowerSupplyMainVoltage, cpqHeEventLogInitialTime=cpqHeEventLogInitialTime, cpqHe3ThermalSystemFanFailed=cpqHe3ThermalSystemFanFailed, cpqHeCorrMemErrTable=cpqHeCorrMemErrTable, cpqHeFltTolPowerSupplyCondition=cpqHeFltTolPowerSupplyCondition, cpqHeFltTolFanType=cpqHeFltTolFanType, cpqHeFltTolPowerSupplyHwLocation=cpqHeFltTolPowerSupplyHwLocation, cpqHe3CacheAccelParityError=cpqHe3CacheAccelParityError, cpqHePostMsgCondition=cpqHePostMsgCondition, cpqHeSysBatteryIndex=cpqHeSysBatteryIndex, cpqHeResilientMemCondition=cpqHeResilientMemCondition, cpqHeMgmtUID=cpqHeMgmtUID, cpqHeBbuChargeState=cpqHeBbuChargeState, cpqHeResMemBoardTable=cpqHeResMemBoardTable, cpqHeNvdimmArmingError=cpqHeNvdimmArmingError, cpqHeResMem2BoardRiserNum=cpqHeResMem2BoardRiserNum, cpqHeSysBatteryPresent=cpqHeSysBatteryPresent, cpqHeResMem2ModuleStatus=cpqHeResMem2ModuleStatus, cpqHeFltTolPowerSupplyFirmwareRev=cpqHeFltTolPowerSupplyFirmwareRev, cpqHeSysBoardFruStatus=cpqHeSysBoardFruStatus, cpqHePowerMeter=cpqHePowerMeter, cpqHeResMemBoardTotalMemSize=cpqHeResMemBoardTotalMemSize, cpqHeSysPwrOnDenied=cpqHeSysPwrOnDenied, cpqHeResMem2BoardLocked=cpqHeResMem2BoardLocked, cpqHe5ResMemBoardRemoved=cpqHe5ResMemBoardRemoved, cpqHeSysUtilPciThirtyMin=cpqHeSysUtilPciThirtyMin, cpqHeSysBoardFru=cpqHeSysBoardFru, cpqHeBbuTable=cpqHeBbuTable, cpqHeTemperatureEntry=cpqHeTemperatureEntry, cpqHeInterlockFailureDeviceID=cpqHeInterlockFailureDeviceID, cpqHe3FltTolFanRedundancyRestored=cpqHe3FltTolFanRedundancyRestored, cpqHeBbuChassis=cpqHeBbuChassis, cpqHeBbuChargePercentage=cpqHeBbuChargePercentage, cpqHeSysBatterySparePartNum=cpqHeSysBatterySparePartNum, cpqHeInterlockFailureSupported=cpqHeInterlockFailureSupported, cpqHeEventLogCondition=cpqHeEventLogCondition, cpqHeAsrDialInStatus=cpqHeAsrDialInStatus, cpqHeNvdimmBackupStatus=cpqHeNvdimmBackupStatus, cpqHeSysUtilPciHour=cpqHeSysUtilPciHour, cpqHeResMem2ModuleSize=cpqHeResMem2ModuleSize, cpqHeFltTolPwrSupply=cpqHeFltTolPwrSupply, cpqHeMgmtDisplay=cpqHeMgmtDisplay, cpqHeOsCommonModuleVersion=cpqHeOsCommonModuleVersion, cpqHeAsr=cpqHeAsr, cpqHeEventLogEntrySeverity=cpqHeEventLogEntrySeverity, cpqHeSysBatteryStatus=cpqHeSysBatteryStatus, cpqHeNvdimmMfrDate=cpqHeNvdimmMfrDate, cpqHeNvdimmMfrLocation=cpqHeNvdimmMfrLocation, cpqHeTemperatureThresholdType=cpqHeTemperatureThresholdType, cpqHeNvdimmSanitizationError=cpqHeNvdimmSanitizationError, cpqHeTemperatureTable=cpqHeTemperatureTable, cpqHeNvdimmEraseError=cpqHeNvdimmEraseError, cpqHeOsCommonPollFreq=cpqHeOsCommonPollFreq, cpqHeSysBatteryFailed=cpqHeSysBatteryFailed, cpqHe3ThermalSystemFanOk=cpqHe3ThermalSystemFanOk, cpqHeCorrMemErrDesc=cpqHeCorrMemErrDesc, cpqHeEventLogEntryNumber=cpqHeEventLogEntryNumber, cpqHeFltTolPowerSupplySparePartNum=cpqHeFltTolPowerSupplySparePartNum, cpqHeComponent=cpqHeComponent, cpqHePowerFailureGroupString=cpqHePowerFailureGroupString, cpqHeFltTolFanIndex=cpqHeFltTolFanIndex, cpqHeResilientMemOperatingSpeed=cpqHeResilientMemOperatingSpeed, cpqHe4FltTolPowerSupplyFailed=cpqHe4FltTolPowerSupplyFailed, cpqHeBbuTimeToCutoff=cpqHeBbuTimeToCutoff, cpqHe2CorrectableMemoryLogDisabled=cpqHe2CorrectableMemoryLogDisabled, cpqHeLastCritErrorAbendMsg=cpqHeLastCritErrorAbendMsg, cpqHeSysBatteryEntry=cpqHeSysBatteryEntry, cpqHeInterlockFailureIndex=cpqHeInterlockFailureIndex, cpqHeBbuEntry=cpqHeBbuEntry, cpqHeResMem2ModuleSpd=cpqHeResMem2ModuleSpd, cpqHeOsCommonModuleEntry=cpqHeOsCommonModuleEntry, cpqHeThermalFanCpuFan=cpqHeThermalFanCpuFan)
