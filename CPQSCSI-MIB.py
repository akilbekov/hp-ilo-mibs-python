#
# PySNMP MIB module CPQSCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/dauren/projects/snmp-kmg/CPQSCSI-MIB.mib
# Produced by pysmi-0.3.1 at Thu Aug  2 17:44:38 2018
# On host dauren-pc platform Linux version 4.15.0-29-generic by user dauren
# Using Python version 2.7.15rc1 (default, Apr 15 2018, 21:51:34) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, enterprises, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqScsi = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5))
cpqScsiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 1))
cpqScsiComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2))
cpqScsiTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 3))
cpqTapeComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4))
cpqSasComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5))
cpqScsiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 1))
cpqScsiCntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 2))
cpqScsiLogDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 3))
cpqScsiPhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 4))
cpqScsiTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 5))
cpqScsiCd = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 6))
cpqScsiOsNetWare = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1))
cpqScsiOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4))
cpqTapePhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4, 1))
cpqTapeCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4, 2))
cpqTapeLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4, 3))
cpqSasHba = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5, 1))
cpqSasPhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5, 2))
cpqSasLogDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5, 3))
cpqSasTapeDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5, 4))
cpqSbScsiBus = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 7))
cpqSbScsiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 7, 1))
cpqSbDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 7, 2))
cpqScsiMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiMibRevMajor.setStatus('mandatory')
cpqScsiMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiMibRevMinor.setStatus('mandatory')
cpqScsiMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiMibCondition.setStatus('mandatory')
cpqScsiNw3xDriverName = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xDriverName.setStatus('deprecated')
cpqScsiNw3xDriverVers = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xDriverVers.setStatus('deprecated')
cpqScsiNw3xDriverPollType = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("polled", 2), ("demand", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xDriverPollType.setStatus('deprecated')
cpqScsiNw3xDriverPollTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xDriverPollTime.setStatus('deprecated')
cpqScsiNw3xCntlrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5), )
if mibBuilder.loadTexts: cpqScsiNw3xCntlrInfoTable.setStatus('deprecated')
cpqScsiNw3xCntlrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiNw3xCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xBusIndex"))
if mibBuilder.loadTexts: cpqScsiNw3xCntlrInfoEntry.setStatus('deprecated')
cpqScsiNw3xCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xCntlrIndex.setStatus('deprecated')
cpqScsiNw3xBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xBusIndex.setStatus('deprecated')
cpqScsiNw3xXptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xXptDesc.setStatus('deprecated')
cpqScsiNw3xXptVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xXptVers.setStatus('deprecated')
cpqScsiNw3xSimDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xSimDesc.setStatus('deprecated')
cpqScsiNw3xSimVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xSimVers.setStatus('deprecated')
cpqScsiNw3xHbaDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xHbaDesc.setStatus('deprecated')
cpqScsiLogDrvStatTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6), )
if mibBuilder.loadTexts: cpqScsiLogDrvStatTable.setStatus('deprecated')
cpqScsiLogDrvStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiNw3xStatCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xStatBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xStatLogDrvIndex"))
if mibBuilder.loadTexts: cpqScsiLogDrvStatEntry.setStatus('deprecated')
cpqScsiNw3xStatCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xStatCntlrIndex.setStatus('deprecated')
cpqScsiNw3xStatBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xStatBusIndex.setStatus('deprecated')
cpqScsiNw3xStatLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xStatLogDrvIndex.setStatus('deprecated')
cpqScsiNw3xTotalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xTotalReads.setStatus('deprecated')
cpqScsiNw3xTotalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xTotalWrites.setStatus('deprecated')
cpqScsiNw3xCorrReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xCorrReads.setStatus('deprecated')
cpqScsiNw3xCorrWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xCorrWrites.setStatus('deprecated')
cpqScsiNw3xFatalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xFatalReads.setStatus('deprecated')
cpqScsiNw3xFatalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xFatalWrites.setStatus('deprecated')
cpqScsiVolMapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7), )
if mibBuilder.loadTexts: cpqScsiVolMapTable.setStatus('deprecated')
cpqScsiVolMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiNw3xVolCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xVolBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xVolLogDrvIndex"))
if mibBuilder.loadTexts: cpqScsiVolMapEntry.setStatus('deprecated')
cpqScsiNw3xVolCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xVolCntlrIndex.setStatus('deprecated')
cpqScsiNw3xVolBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xVolBusIndex.setStatus('deprecated')
cpqScsiNw3xVolLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xVolLogDrvIndex.setStatus('deprecated')
cpqScsiNw3xVolMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xVolMap.setStatus('deprecated')
cpqScsiOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqScsiOsCommonPollFreq.setStatus('mandatory')
cpqScsiOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqScsiOsCommonModuleTable.setStatus('deprecated')
cpqScsiOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqScsiOsCommonModuleEntry.setStatus('deprecated')
cpqScsiOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModuleIndex.setStatus('deprecated')
cpqScsiOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModuleName.setStatus('deprecated')
cpqScsiOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModuleVersion.setStatus('deprecated')
cpqScsiOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModuleDate.setStatus('deprecated')
cpqScsiOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModulePurpose.setStatus('deprecated')
cpqScsiCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1), )
if mibBuilder.loadTexts: cpqScsiCntlrTable.setStatus('mandatory')
cpqScsiCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiCntlrBusIndex"))
if mibBuilder.loadTexts: cpqScsiCntlrEntry.setStatus('mandatory')
cpqScsiCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrIndex.setStatus('mandatory')
cpqScsiCntlrBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrBusIndex.setStatus('mandatory')
cpqScsiCntlrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)).clone(namedValues=NamedValues(("other", 1), ("cpqs710", 2), ("cpqs94", 3), ("cpqs810p", 4), ("cpqs825e", 5), ("cpqs825p", 6), ("cpqs974p", 7), ("cpqs875p", 8), ("extended", 9), ("cpqs895p", 10), ("cpqs896p", 11), ("cpqa789x", 12), ("cpqs876t", 13), ("hpu320", 14), ("hpu320r", 15), ("generic", 16), ("hp1u320g2", 17), ("hp1u320g1", 18), ("hpSc11Xe", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrModel.setStatus('mandatory')
cpqScsiCntlrFWVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrFWVers.setStatus('mandatory')
cpqScsiCntlrSWVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrSWVers.setStatus('deprecated')
cpqScsiCntlrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrSlot.setStatus('mandatory')
cpqScsiCntlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrStatus.setStatus('mandatory')
cpqScsiCntlrHardResets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrHardResets.setStatus('mandatory')
cpqScsiCntlrSoftResets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrSoftResets.setStatus('mandatory')
cpqScsiCntlrTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrTimeouts.setStatus('mandatory')
cpqScsiCntlrBaseIOAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrBaseIOAddr.setStatus('mandatory')
cpqScsiCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrCondition.setStatus('mandatory')
cpqScsiCntlrSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrSerialNum.setStatus('mandatory')
cpqScsiCntlrBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrBusWidth.setStatus('mandatory')
cpqScsiCntlrModelExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrModelExtended.setStatus('mandatory')
cpqScsiCntlrHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrHwLocation.setStatus('optional')
cpqScsiCntlrPciLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrPciLocation.setStatus('optional')
cpqScsiLogDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1), )
if mibBuilder.loadTexts: cpqScsiLogDrvTable.setStatus('mandatory')
cpqScsiLogDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiLogDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiLogDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiLogDrvIndex"))
if mibBuilder.loadTexts: cpqScsiLogDrvEntry.setStatus('mandatory')
cpqScsiLogDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvCntlrIndex.setStatus('mandatory')
cpqScsiLogDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvBusIndex.setStatus('mandatory')
cpqScsiLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvIndex.setStatus('mandatory')
cpqScsiLogDrvFaultTol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("mirroring", 3), ("dataGuard", 4), ("distribDataGuard", 5), ("enhancedMirroring", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvFaultTol.setStatus('mandatory')
cpqScsiLogDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("unconfigured", 4), ("recovering", 5), ("readyForRebuild", 6), ("rebuilding", 7), ("wrongDrive", 8), ("badConnect", 9), ("degraded", 10), ("disabled", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvStatus.setStatus('mandatory')
cpqScsiLogDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvSize.setStatus('mandatory')
cpqScsiLogDrvPhyDrvIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvPhyDrvIDs.setStatus('mandatory')
cpqScsiLogDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvCondition.setStatus('mandatory')
cpqScsiLogDrvStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvStripeSize.setStatus('mandatory')
cpqScsiLogDrvAvailSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvAvailSpares.setStatus('mandatory')
cpqScsiLogDrvPercentRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvPercentRebuild.setStatus('mandatory')
cpqScsiLogDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvOsName.setStatus('mandatory')
cpqScsiPhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1), )
if mibBuilder.loadTexts: cpqScsiPhyDrvTable.setStatus('mandatory')
cpqScsiPhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiPhyDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiPhyDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiPhyDrvIndex"))
if mibBuilder.loadTexts: cpqScsiPhyDrvEntry.setStatus('mandatory')
cpqScsiPhyDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvCntlrIndex.setStatus('mandatory')
cpqScsiPhyDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvBusIndex.setStatus('mandatory')
cpqScsiPhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvIndex.setStatus('mandatory')
cpqScsiPhyDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvModel.setStatus('mandatory')
cpqScsiPhyDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvFWRev.setStatus('mandatory')
cpqScsiPhyDrvVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvVendor.setStatus('mandatory')
cpqScsiPhyDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSize.setStatus('mandatory')
cpqScsiPhyDrvScsiID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvScsiID.setStatus('mandatory')
cpqScsiPhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("notConfigured", 4), ("badCable", 5), ("missingWasOk", 6), ("missingWasFailed", 7), ("predictiveFailure", 8), ("missingWasPredictiveFailure", 9), ("offline", 10), ("missingWasOffline", 11), ("hardError", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvStatus.setStatus('mandatory')
cpqScsiPhyDrvServiceHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvServiceHours.setStatus('mandatory')
cpqScsiPhyDrvHighReadSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHighReadSectors.setStatus('mandatory')
cpqScsiPhyDrvLowReadSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvLowReadSectors.setStatus('mandatory')
cpqScsiPhyDrvHighWriteSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHighWriteSectors.setStatus('mandatory')
cpqScsiPhyDrvLowWriteSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvLowWriteSectors.setStatus('mandatory')
cpqScsiPhyDrvHardReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHardReadErrs.setStatus('mandatory')
cpqScsiPhyDrvHardWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHardWriteErrs.setStatus('mandatory')
cpqScsiPhyDrvEccCorrReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvEccCorrReads.setStatus('mandatory')
cpqScsiPhyDrvRecvReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvRecvReadErrs.setStatus('mandatory')
cpqScsiPhyDrvRecvWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvRecvWriteErrs.setStatus('mandatory')
cpqScsiPhyDrvSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSeekErrs.setStatus('mandatory')
cpqScsiPhyDrvSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSpinupTime.setStatus('mandatory')
cpqScsiPhyDrvUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvUsedReallocs.setStatus('mandatory')
cpqScsiPhyDrvTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvTimeouts.setStatus('mandatory')
cpqScsiPhyDrvPostErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvPostErrs.setStatus('mandatory')
cpqScsiPhyDrvPostErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvPostErrCode.setStatus('mandatory')
cpqScsiPhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvCondition.setStatus('mandatory')
cpqScsiPhyDrvFuncTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvFuncTest1.setStatus('mandatory')
cpqScsiPhyDrvFuncTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvFuncTest2.setStatus('mandatory')
cpqScsiPhyDrvStatsPreserved = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("other", 1), ("inNVRAM", 2), ("onDisk", 3), ("noCPUSupport", 4), ("noFreeNVRAM", 5), ("noDrvSupport", 6), ("noSoftwareSupport", 7), ("statsNotSupported", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvStatsPreserved.setStatus('mandatory')
cpqScsiPhyDrvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSerialNum.setStatus('mandatory')
cpqScsiPhyDrvLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("other", 1), ("proliant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvLocation.setStatus('deprecated')
cpqScsiPhyDrvParent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvParent.setStatus('mandatory')
cpqScsiPhyDrvSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSectorSize.setStatus('mandatory')
cpqScsiPhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHotPlug.setStatus('mandatory')
cpqScsiPhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvPlacement.setStatus('mandatory')
cpqScsiPhyDrvPreFailMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("notAvailable", 2), ("available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvPreFailMonitoring.setStatus('mandatory')
cpqScsiPhyDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvOsName.setStatus('mandatory')
cpqScsiPhyDrvRotationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("rpm7200", 2), ("rpm10K", 3), ("rpm15K", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvRotationalSpeed.setStatus('mandatory')
cpqScsiPhyDrvMemberLogDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("member", 2), ("spare", 3), ("nonMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvMemberLogDrv.setStatus('mandatory')
cpqScsiTargetTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1), )
if mibBuilder.loadTexts: cpqScsiTargetTable.setStatus('mandatory')
cpqScsiTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiTargetCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiTargetBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiTargetScsiIdIndex"))
if mibBuilder.loadTexts: cpqScsiTargetEntry.setStatus('mandatory')
cpqScsiTargetCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetCntlrIndex.setStatus('mandatory')
cpqScsiTargetBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetBusIndex.setStatus('mandatory')
cpqScsiTargetScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetScsiIdIndex.setStatus('mandatory')
cpqScsiTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)).clone(namedValues=NamedValues(("other", 1), ("disk", 2), ("tape", 3), ("printer", 4), ("processor", 5), ("wormDrive", 6), ("cd-rom", 7), ("scanner", 8), ("optical", 9), ("jukeBox", 10), ("commDev", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetType.setStatus('mandatory')
cpqScsiTargetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetModel.setStatus('mandatory')
cpqScsiTargetFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetFWRev.setStatus('mandatory')
cpqScsiTargetVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetVendor.setStatus('mandatory')
cpqScsiTargetParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetParityErrs.setStatus('mandatory')
cpqScsiTargetPhaseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetPhaseErrs.setStatus('mandatory')
cpqScsiTargetSelectTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetSelectTimeouts.setStatus('mandatory')
cpqScsiTargetMsgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetMsgRejects.setStatus('mandatory')
cpqScsiTargetNegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetNegPeriod.setStatus('deprecated')
cpqScsiTargetLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("other", 1), ("proliant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetLocation.setStatus('mandatory')
cpqScsiTargetNegSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetNegSpeed.setStatus('mandatory')
cpqScsiTargetPhysWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetPhysWidth.setStatus('mandatory')
cpqScsiTargetNegWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetNegWidth.setStatus('mandatory')
cpqScsiTargetTypeExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("other", 1), ("pdcd", 2), ("removableDisk", 3), ("dltAutoloader", 4), ("cdJukebox", 5), ("cr3500", 6), ("autoloader", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetTypeExtended.setStatus('mandatory')
cpqScsiTargetCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6), ("scsi1", 7), ("ultra4", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetCurrentSpeed.setStatus('mandatory')
cpqScsiCdDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1), )
if mibBuilder.loadTexts: cpqScsiCdDrvTable.setStatus('mandatory')
cpqScsiCdDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiCdDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiCdDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiCdDrvScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqScsiCdDrvLunIndex"))
if mibBuilder.loadTexts: cpqScsiCdDrvEntry.setStatus('mandatory')
cpqScsiCdDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvCntlrIndex.setStatus('mandatory')
cpqScsiCdDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvBusIndex.setStatus('mandatory')
cpqScsiCdDrvScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvScsiIdIndex.setStatus('mandatory')
cpqScsiCdDrvLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvLunIndex.setStatus('mandatory')
cpqScsiCdDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvModel.setStatus('mandatory')
cpqScsiCdDrvVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvVendor.setStatus('mandatory')
cpqScsiCdDrvFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvFwRev.setStatus('mandatory')
cpqCdLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2), )
if mibBuilder.loadTexts: cpqCdLibraryTable.setStatus('mandatory')
cpqCdLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqCdLibraryCntlrIndex"), (0, "CPQSCSI-MIB", "cpqCdLibraryBusIndex"), (0, "CPQSCSI-MIB", "cpqCdLibraryScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqCdLibraryLunIndex"))
if mibBuilder.loadTexts: cpqCdLibraryEntry.setStatus('mandatory')
cpqCdLibraryCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryCntlrIndex.setStatus('mandatory')
cpqCdLibraryBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryBusIndex.setStatus('mandatory')
cpqCdLibraryScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryScsiIdIndex.setStatus('mandatory')
cpqCdLibraryLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryLunIndex.setStatus('mandatory')
cpqCdLibraryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryCondition.setStatus('mandatory')
cpqCdLibraryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("offline", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryStatus.setStatus('mandatory')
cpqCdLibraryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryModel.setStatus('mandatory')
cpqCdLibraryVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryVendor.setStatus('mandatory')
cpqCdLibrarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibrarySerialNumber.setStatus('mandatory')
cpqCdLibraryDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryDriveList.setStatus('mandatory')
cpqCdLibraryFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryFwRev.setStatus('mandatory')
cpqCdLibraryFwSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryFwSubtype.setStatus('mandatory')
cpqScsiTrapPkts = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapPkts.setStatus('deprecated')
cpqScsiTrapLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapLogMaxSize.setStatus('deprecated')
cpqScsiTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 3, 3), )
if mibBuilder.loadTexts: cpqScsiTrapLogTable.setStatus('deprecated')
cpqScsiTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiTrapLogIndex"))
if mibBuilder.loadTexts: cpqScsiTrapLogEntry.setStatus('deprecated')
cpqScsiTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapLogIndex.setStatus('deprecated')
cpqScsiTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 5001, 5002, 5003)).clone(namedValues=NamedValues(("cpqScsiCntlrStatusChange", 1), ("cpqScsiLogDrvStatusChange", 2), ("cpqScsiPhyDrvStatusChange", 3), ("cpqScsi2CntlrStatusChange", 5001), ("cpqScsi2LogDrvStatusChange", 5002), ("cpqScsi2PhyDrvStatusChange", 5003)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapType.setStatus('deprecated')
cpqScsiTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapTime.setStatus('deprecated')
cpqSbMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbMibRevMajor.setStatus('deprecated')
cpqSbMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbMibRevMinor.setStatus('deprecated')
cpqSbDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 232, 7, 2, 2), )
if mibBuilder.loadTexts: cpqSbDeviceTable.setStatus('deprecated')
cpqSbDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSbDevCntlrIndex"), (0, "CPQSCSI-MIB", "cpqSbDevBusIndex"), (0, "CPQSCSI-MIB", "cpqSbDevScsiIdIndex"))
if mibBuilder.loadTexts: cpqSbDeviceEntry.setStatus('deprecated')
cpqSbDevCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevCntlrIndex.setStatus('deprecated')
cpqSbDevBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevBusIndex.setStatus('deprecated')
cpqSbDevScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevScsiIdIndex.setStatus('deprecated')
cpqSbDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)).clone(namedValues=NamedValues(("other", 1), ("disk", 2), ("tape", 3), ("printer", 4), ("processor", 5), ("wormDrive", 6), ("cd-rom", 7), ("scanner", 8), ("optical", 9), ("jukeBox", 10), ("commDev", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevType.setStatus('deprecated')
cpqSbDevModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevModel.setStatus('deprecated')
cpqSbDevFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevFWRev.setStatus('deprecated')
cpqSbDevVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevVendor.setStatus('deprecated')
cpqSbDevParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevParityErrs.setStatus('deprecated')
cpqSbDevPhaseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevPhaseErrs.setStatus('deprecated')
cpqSbDevSelectTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevSelectTimeouts.setStatus('deprecated')
cpqSbDevMsgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevMsgRejects.setStatus('deprecated')
cpqSbDevNegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevNegPeriod.setStatus('deprecated')
cpqSbDevLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("other", 1), ("proliant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevLocation.setStatus('deprecated')
cpqTapePhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1), )
if mibBuilder.loadTexts: cpqTapePhyDrvTable.setStatus('mandatory')
cpqTapePhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqTapePhyDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqTapePhyDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqTapePhyDrvScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqTapePhyDrvLunIndex"))
if mibBuilder.loadTexts: cpqTapePhyDrvEntry.setStatus('mandatory')
cpqTapePhyDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCntlrIndex.setStatus('mandatory')
cpqTapePhyDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvBusIndex.setStatus('mandatory')
cpqTapePhyDrvScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvScsiIdIndex.setStatus('mandatory')
cpqTapePhyDrvLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLunIndex.setStatus('mandatory')
cpqTapePhyDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)).clone(namedValues=NamedValues(("other", 1), ("cpqDat4-16", 2), ("cpqDatAuto", 3), ("cpqDat2-8", 4), ("cpqDlt10-20", 5), ("cpqDlt20-40", 6), ("cpqDlt15-30", 7), ("cpqDlt35-70", 8), ("cpqDat4-8", 9), ("cpqSlr4-8", 10), ("cpqDat12-24", 11), ("cpqDatAuto12-24", 12), ("cpqMlr16-32", 13), ("cpqAit35", 14), ("cpqAit50", 15), ("cpqDat20-40", 16), ("cpqDlt40-80", 17), ("cpqDatAuto20-40", 18), ("cpqSuperDlt1", 19), ("cpqAit35Lvd", 20), ("cpqCompaq", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvType.setStatus('mandatory')
cpqTapePhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCondition.setStatus('mandatory')
cpqTapePhyDrvMagSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvMagSize.setStatus('mandatory')
cpqTapePhyDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvSerialNumber.setStatus('mandatory')
cpqTapePhyDrvCleanReq = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCleanReq.setStatus('mandatory')
cpqTapePhyDrvCleanTapeRepl = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCleanTapeRepl.setStatus('mandatory')
cpqTapePhyDrvFwSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvFwSubtype.setStatus('mandatory')
cpqTapePhyDrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvName.setStatus('mandatory')
cpqTapePhyDrvCleanTapeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCleanTapeCount.setStatus('mandatory')
cpqTapePhyDrvFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvFwRev.setStatus('mandatory')
cpqTapePhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 4), ("offline", 5), ("missingWasOk", 6), ("missingWasFailed", 7), ("missingWasOffline", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvStatus.setStatus('mandatory')
cpqTapePhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvHotPlug.setStatus('mandatory')
cpqTapePhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvPlacement.setStatus('mandatory')
cpqTapePhyDrvLibraryDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLibraryDrive.setStatus('mandatory')
cpqTapePhyDrvLoaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLoaderName.setStatus('mandatory')
cpqTapePhyDrvLoaderFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLoaderFwRev.setStatus('mandatory')
cpqTapePhyDrvLoaderSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLoaderSerialNum.setStatus('mandatory')
cpqTapeCountersTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1), )
if mibBuilder.loadTexts: cpqTapeCountersTable.setStatus('mandatory')
cpqTapeCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqTapeCountersCntlrIndex"), (0, "CPQSCSI-MIB", "cpqTapeCountersBusIndex"), (0, "CPQSCSI-MIB", "cpqTapeCountersScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqTapeCountersLunIndex"))
if mibBuilder.loadTexts: cpqTapeCountersEntry.setStatus('mandatory')
cpqTapeCountersCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersCntlrIndex.setStatus('mandatory')
cpqTapeCountersBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersBusIndex.setStatus('mandatory')
cpqTapeCountersScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersScsiIdIndex.setStatus('mandatory')
cpqTapeCountersLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersLunIndex.setStatus('mandatory')
cpqTapeCountersReWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersReWrites.setStatus('mandatory')
cpqTapeCountersReReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersReReads.setStatus('mandatory')
cpqTapeCountersTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersTotalErrors.setStatus('mandatory')
cpqTapeCountersTotalUncorrectable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersTotalUncorrectable.setStatus('mandatory')
cpqTapeCountersTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersTotalBytes.setStatus('mandatory')
cpqTapeLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1), )
if mibBuilder.loadTexts: cpqTapeLibraryTable.setStatus('mandatory')
cpqTapeLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqTapeLibraryCntlrIndex"), (0, "CPQSCSI-MIB", "cpqTapeLibraryBusIndex"), (0, "CPQSCSI-MIB", "cpqTapeLibraryScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqTapeLibraryLunIndex"))
if mibBuilder.loadTexts: cpqTapeLibraryEntry.setStatus('mandatory')
cpqTapeLibraryCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryCntlrIndex.setStatus('mandatory')
cpqTapeLibraryBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryBusIndex.setStatus('mandatory')
cpqTapeLibraryScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryScsiIdIndex.setStatus('mandatory')
cpqTapeLibraryLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryLunIndex.setStatus('mandatory')
cpqTapeLibraryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryCondition.setStatus('mandatory')
cpqTapeLibraryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryStatus.setStatus('mandatory')
cpqTapeLibraryDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("closed", 2), ("open", 3), ("notSupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryDoorStatus.setStatus('mandatory')
cpqTapeLibraryStatHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryStatHours.setStatus('mandatory')
cpqTapeLibraryStatMoves = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryStatMoves.setStatus('mandatory')
cpqTapeLibraryName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryName.setStatus('mandatory')
cpqTapeLibrarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibrarySerialNumber.setStatus('mandatory')
cpqTapeLibraryDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 320))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryDriveList.setStatus('deprecated')
cpqTapeLibraryState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("offline", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryState.setStatus('mandatory')
cpqTapeLibraryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("ok", 3), ("safeTempExceeded", 4), ("maxTempExceeded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryTemperature.setStatus('mandatory')
cpqTapeLibraryRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("capable", 3), ("notCapable", 4), ("active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryRedundancy.setStatus('mandatory')
cpqTapeLibraryHotSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("capable", 3), ("notCapable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryHotSwap.setStatus('mandatory')
cpqTapeLibraryFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryFwRev.setStatus('mandatory')
cpqTapeLibraryTapeList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 560))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryTapeList.setStatus('mandatory')
cpqSasHbaTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1), )
if mibBuilder.loadTexts: cpqSasHbaTable.setStatus('mandatory')
cpqSasHbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSasHbaIndex"))
if mibBuilder.loadTexts: cpqSasHbaEntry.setStatus('mandatory')
cpqSasHbaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaIndex.setStatus('mandatory')
cpqSasHbaHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaHwLocation.setStatus('optional')
cpqSasHbaModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("other", 1), ("generic", 2), ("sas8int", 3), ("sas4int", 4), ("sasSc44Ge", 5), ("sasSc40Ge", 6), ("sasSc08Ge", 7), ("sasSc08e", 8), ("sasH220i", 9), ("sasH221", 10), ("sasH210i", 11), ("sasH220", 12), ("sasH222", 13), ("sasP824ip", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaModel.setStatus('mandatory')
cpqSasHbaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaStatus.setStatus('mandatory')
cpqSasHbaCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaCondition.setStatus('mandatory')
cpqSasHbaOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaOverallCondition.setStatus('mandatory')
cpqSasHbaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaSerialNumber.setStatus('mandatory')
cpqSasHbaFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaFwVersion.setStatus('mandatory')
cpqSasHbaBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaBiosVersion.setStatus('mandatory')
cpqSasHbaPciLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasHbaPciLocation.setStatus('optional')
cpqSasPhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1), )
if mibBuilder.loadTexts: cpqSasPhyDrvTable.setStatus('mandatory')
cpqSasPhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSasPhyDrvHbaIndex"), (0, "CPQSCSI-MIB", "cpqSasPhyDrvIndex"))
if mibBuilder.loadTexts: cpqSasPhyDrvEntry.setStatus('mandatory')
cpqSasPhyDrvHbaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvHbaIndex.setStatus('mandatory')
cpqSasPhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvIndex.setStatus('mandatory')
cpqSasPhyDrvLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvLocationString.setStatus('mandatory')
cpqSasPhyDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvModel.setStatus('mandatory')
cpqSasPhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("predictiveFailure", 3), ("offline", 4), ("failed", 5), ("missingWasOk", 6), ("missingWasPredictiveFailure", 7), ("missingWasOffline", 8), ("missingWasFailed", 9), ("ssdWearOut", 10), ("missingWasSSDWearOut", 11), ("notAuthenticated", 12), ("missingWasNotAuthenticated", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvStatus.setStatus('mandatory')
cpqSasPhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvCondition.setStatus('mandatory')
cpqSasPhyDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvFWRev.setStatus('mandatory')
cpqSasPhyDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSize.setStatus('mandatory')
cpqSasPhyDrvUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvUsedReallocs.setStatus('mandatory')
cpqSasPhyDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSerialNumber.setStatus('mandatory')
cpqSasPhyDrvMemberLogDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("member", 2), ("spare", 3), ("nonMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvMemberLogDrv.setStatus('mandatory')
cpqSasPhyDrvRotationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("rpm7200", 2), ("rpm10K", 3), ("rpm15K", 4), ("rpmSsd", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvRotationalSpeed.setStatus('mandatory')
cpqSasPhyDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvOsName.setStatus('mandatory')
cpqSasPhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvPlacement.setStatus('mandatory')
cpqSasPhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvHotPlug.setStatus('mandatory')
cpqSasPhyDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("sas", 2), ("sata", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvType.setStatus('mandatory')
cpqSasPhyDrvSasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSasAddress.setStatus('mandatory')
cpqSasPhyDrvMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("rotatingPlatters", 2), ("solidState", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvMediaType.setStatus('mandatory')
cpqSasPhyDrvSSDWearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fiftySixDayThreshold", 3), ("fivePercentThreshold", 4), ("twoPercentThreshold", 5), ("ssdWearOut", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSSDWearStatus.setStatus('mandatory')
cpqSasPhyDrvPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvPowerOnHours.setStatus('mandatory')
cpqSasPhyDrvSSDPercntEndrnceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSSDPercntEndrnceUsed.setStatus('mandatory')
cpqSasPhyDrvSSDEstTimeRemainingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSSDEstTimeRemainingHours.setStatus('mandatory')
cpqSasPhyDrvAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("authenticationFailed", 3), ("authenticationPassed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvAuthenticationStatus.setStatus('mandatory')
cpqSasPhyDrvSmartCarrierAppFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSmartCarrierAppFWRev.setStatus('mandatory')
cpqSasPhyDrvSmartCarrierBootldrFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSmartCarrierBootldrFWRev.setStatus('mandatory')
cpqSasPhyDrvCurrTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvCurrTemperature.setStatus('mandatory')
cpqSasPhyDrvTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvTemperatureThreshold.setStatus('mandatory')
cpqSasPhyDrvSsBoxModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSsBoxModel.setStatus('mandatory')
cpqSasPhyDrvSsBoxFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSsBoxFwRev.setStatus('mandatory')
cpqSasPhyDrvSsBoxVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSsBoxVendor.setStatus('mandatory')
cpqSasPhyDrvSsBoxSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasPhyDrvSsBoxSerialNumber.setStatus('mandatory')
cpqSasLogDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1), )
if mibBuilder.loadTexts: cpqSasLogDrvTable.setStatus('mandatory')
cpqSasLogDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSasLogDrvHbaIndex"), (0, "CPQSCSI-MIB", "cpqSasLogDrvIndex"))
if mibBuilder.loadTexts: cpqSasLogDrvEntry.setStatus('mandatory')
cpqSasLogDrvHbaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvHbaIndex.setStatus('mandatory')
cpqSasLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvIndex.setStatus('mandatory')
cpqSasLogDrvRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("other", 1), ("raid0", 2), ("raid1", 3), ("raid0plus1", 4), ("raid5", 5), ("raid15", 6), ("volume", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvRaidLevel.setStatus('mandatory')
cpqSasLogDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("rebuilding", 4), ("failed", 5), ("offline", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvStatus.setStatus('mandatory')
cpqSasLogDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvCondition.setStatus('mandatory')
cpqSasLogDrvRebuildingDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvRebuildingDisk.setStatus('mandatory')
cpqSasLogDrvCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvCapacity.setStatus('mandatory')
cpqSasLogDrvStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvStripeSize.setStatus('mandatory')
cpqSasLogDrvPhyDrvIds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvPhyDrvIds.setStatus('mandatory')
cpqSasLogDrvSpareIds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvSpareIds.setStatus('mandatory')
cpqSasLogDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvOsName.setStatus('mandatory')
cpqSasLogDrvRebuildingPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasLogDrvRebuildingPercent.setStatus('mandatory')
cpqSasTapeDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1), )
if mibBuilder.loadTexts: cpqSasTapeDrvTable.setStatus('mandatory')
cpqSasTapeDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSasTapeDrvHbaIndex"), (0, "CPQSCSI-MIB", "cpqSasTapeDrvIndex"))
if mibBuilder.loadTexts: cpqSasTapeDrvEntry.setStatus('mandatory')
cpqSasTapeDrvHbaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasTapeDrvHbaIndex.setStatus('mandatory')
cpqSasTapeDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasTapeDrvIndex.setStatus('mandatory')
cpqSasTapeDrvLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasTapeDrvLocationString.setStatus('mandatory')
cpqSasTapeDrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasTapeDrvName.setStatus('mandatory')
cpqSasTapeDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasTapeDrvStatus.setStatus('mandatory')
cpqSasTapeDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasTapeDrvCondition.setStatus('mandatory')
cpqSasTapeDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasTapeDrvFWRev.setStatus('mandatory')
cpqSasTapeDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasTapeDrvSerialNumber.setStatus('mandatory')
cpqSasTapeDrvSasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSasTapeDrvSasAddress.setStatus('mandatory')
cpqScsiCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 5) + (0,1)).setObjects(("CPQSCSI-MIB", "cpqScsiCntlrStatus"))
cpqScsiLogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 5) + (0,2)).setObjects(("CPQSCSI-MIB", "cpqScsiLogDrvStatus"))
cpqScsiPhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 5) + (0,3)).setObjects(("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"))
cpqScsi2CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5001)).setObjects(("CPQSCSI-MIB", "cpqScsiCntlrStatus"))
cpqScsi2LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5002)).setObjects(("CPQSCSI-MIB", "cpqScsiLogDrvStatus"))
cpqScsi2PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5003)).setObjects(("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"))
cpqTapePhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5004)).setObjects(("CPQSCSI-MIB", "cpqTapePhyDrvCondition"))
cpqScsi3CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiCntlrStatus"))
cpqScsi3PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"))
cpqTape3PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCondition"))
cpqTape3PhyDrvCleaningRequired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCondition"))
cpqTape3PhyDrvCleanTapeReplace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCondition"))
cpqTape3LibraryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqTape3LibraryOkay = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqTape3LibraryDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqTape3LibraryDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqTape3LibraryDoorClosed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqScsiCdLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqCdLibraryCntlrIndex"), ("CPQSCSI-MIB", "cpqCdLibraryBusIndex"), ("CPQSCSI-MIB", "cpqCdLibraryScsiIdIndex"), ("CPQSCSI-MIB", "cpqCdLibraryStatus"))
cpqTape4PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvScsiIdIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvStatus"))
cpqScsi4PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"), ("CPQSCSI-MIB", "cpqScsiPhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvVendor"), ("CPQSCSI-MIB", "cpqScsiPhyDrvModel"), ("CPQSCSI-MIB", "cpqScsiPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqScsiPhyDrvSerialNum"))
cpqTapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibraryCntlrIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryBusIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryScsiIdIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryLunIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryName"), ("CPQSCSI-MIB", "cpqTapeLibraryFwRev"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"), ("CPQSCSI-MIB", "cpqTapeLibraryState"))
cpqTape5PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvScsiIdIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvLunIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvName"), ("CPQSCSI-MIB", "cpqTapePhyDrvFwRev"), ("CPQSCSI-MIB", "cpqTapePhyDrvSerialNumber"), ("CPQSCSI-MIB", "cpqTapePhyDrvStatus"))
cpqScsi5PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"), ("CPQSCSI-MIB", "cpqScsiPhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvVendor"), ("CPQSCSI-MIB", "cpqScsiPhyDrvModel"), ("CPQSCSI-MIB", "cpqScsiPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqScsiPhyDrvSerialNum"), ("CPQSCSI-MIB", "cpqScsiPhyDrvOsName"))
cpqScsi3LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiLogDrvStatus"), ("CPQSCSI-MIB", "cpqScsiLogDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqScsiLogDrvBusIndex"), ("CPQSCSI-MIB", "cpqScsiLogDrvIndex"), ("CPQSCSI-MIB", "cpqScsiLogDrvOsName"))
cpqSasPhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5022)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqSasHbaHwLocation"), ("CPQSCSI-MIB", "cpqSasPhyDrvLocationString"), ("CPQSCSI-MIB", "cpqSasPhyDrvHbaIndex"), ("CPQSCSI-MIB", "cpqSasPhyDrvIndex"), ("CPQSCSI-MIB", "cpqSasPhyDrvStatus"), ("CPQSCSI-MIB", "cpqSasPhyDrvType"), ("CPQSCSI-MIB", "cpqSasPhyDrvModel"), ("CPQSCSI-MIB", "cpqSasPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqSasPhyDrvSerialNumber"), ("CPQSCSI-MIB", "cpqSasPhyDrvSasAddress"))
cpqSasLogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5023)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqSasHbaHwLocation"), ("CPQSCSI-MIB", "cpqSasLogDrvHbaIndex"), ("CPQSCSI-MIB", "cpqSasLogDrvIndex"), ("CPQSCSI-MIB", "cpqSasLogDrvStatus"), ("CPQSCSI-MIB", "cpqSasLogDrvOsName"))
cpqSas2TapeDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5025)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqSasHbaHwLocation"), ("CPQSCSI-MIB", "cpqSasTapeDrvLocationString"), ("CPQSCSI-MIB", "cpqSasTapeDrvHbaIndex"), ("CPQSCSI-MIB", "cpqSasTapeDrvIndex"), ("CPQSCSI-MIB", "cpqSasTapeDrvName"), ("CPQSCSI-MIB", "cpqSasTapeDrvFWRev"), ("CPQSCSI-MIB", "cpqSasTapeDrvSerialNumber"), ("CPQSCSI-MIB", "cpqSasTapeDrvSasAddress"), ("CPQSCSI-MIB", "cpqSasTapeDrvStatus"))
cpqSasPhyDrvSSDWearStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5026)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqSasHbaHwLocation"), ("CPQSCSI-MIB", "cpqSasPhyDrvLocationString"), ("CPQSCSI-MIB", "cpqSasPhyDrvHbaIndex"), ("CPQSCSI-MIB", "cpqSasPhyDrvIndex"), ("CPQSCSI-MIB", "cpqSasPhyDrvType"), ("CPQSCSI-MIB", "cpqSasPhyDrvModel"), ("CPQSCSI-MIB", "cpqSasPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqSasPhyDrvSerialNumber"), ("CPQSCSI-MIB", "cpqSasPhyDrvSasAddress"), ("CPQSCSI-MIB", "cpqSasPhyDrvSSDWearStatus"))
mibBuilder.exportSymbols("CPQSCSI-MIB", cpqScsiPhyDrvHighWriteSectors=cpqScsiPhyDrvHighWriteSectors, cpqTapeCountersReReads=cpqTapeCountersReReads, cpqTapePhyDrvCntlrIndex=cpqTapePhyDrvCntlrIndex, cpqTapeCountersTotalUncorrectable=cpqTapeCountersTotalUncorrectable, cpqSasLogDrvCondition=cpqSasLogDrvCondition, cpqSbDevModel=cpqSbDevModel, cpqSasLogDrvCapacity=cpqSasLogDrvCapacity, cpqScsiNw3xStatBusIndex=cpqScsiNw3xStatBusIndex, cpqSasPhyDrvSasAddress=cpqSasPhyDrvSasAddress, cpqScsiTrapTime=cpqScsiTrapTime, cpqScsiLogDrvOsName=cpqScsiLogDrvOsName, cpqSasLogDrvEntry=cpqSasLogDrvEntry, cpqSasTapeDrvName=cpqSasTapeDrvName, cpqSasTapeDrvSerialNumber=cpqSasTapeDrvSerialNumber, cpqScsiPhyDrvSectorSize=cpqScsiPhyDrvSectorSize, cpqScsiCdDrvFwRev=cpqScsiCdDrvFwRev, cpqSasLogDrv=cpqSasLogDrv, cpqScsiNw3xVolMap=cpqScsiNw3xVolMap, cpqSasPhyDrvSSDWearStatusChange=cpqSasPhyDrvSSDWearStatusChange, cpqSasTapeDrvHbaIndex=cpqSasTapeDrvHbaIndex, cpqTapeLibraryStatus=cpqTapeLibraryStatus, cpqSbDevScsiIdIndex=cpqSbDevScsiIdIndex, cpqSbScsiMibRev=cpqSbScsiMibRev, cpqSasPhyDrvTemperatureThreshold=cpqSasPhyDrvTemperatureThreshold, cpqScsiTrapLogEntry=cpqScsiTrapLogEntry, cpqTape3LibraryFailed=cpqTape3LibraryFailed, cpqSasHbaOverallCondition=cpqSasHbaOverallCondition, cpqScsiPhyDrvScsiID=cpqScsiPhyDrvScsiID, cpqSbDevType=cpqSbDevType, cpqScsiVolMapTable=cpqScsiVolMapTable, cpqScsiNw3xCorrWrites=cpqScsiNw3xCorrWrites, cpqTapeLibrarySerialNumber=cpqTapeLibrarySerialNumber, cpqScsiTargetMsgRejects=cpqScsiTargetMsgRejects, cpqScsiMibRevMajor=cpqScsiMibRevMajor, cpqScsiOsCommonModulePurpose=cpqScsiOsCommonModulePurpose, cpqTapeLibraryStatMoves=cpqTapeLibraryStatMoves, cpqScsiVolMapEntry=cpqScsiVolMapEntry, cpqScsiCdDrvBusIndex=cpqScsiCdDrvBusIndex, cpqScsiNw3xCntlrInfoTable=cpqScsiNw3xCntlrInfoTable, cpqTapePhyDrvLibraryDrive=cpqTapePhyDrvLibraryDrive, cpqScsi=cpqScsi, cpqScsiMibRev=cpqScsiMibRev, cpqSasPhyDrvSSDEstTimeRemainingHours=cpqSasPhyDrvSSDEstTimeRemainingHours, cpqSbDevNegPeriod=cpqSbDevNegPeriod, cpqSasPhyDrvHotPlug=cpqSasPhyDrvHotPlug, cpqSbDevPhaseErrs=cpqSbDevPhaseErrs, cpqSasHbaHwLocation=cpqSasHbaHwLocation, cpqScsiCntlrBusWidth=cpqScsiCntlrBusWidth, cpqSasHba=cpqSasHba, cpqScsiPhyDrvServiceHours=cpqScsiPhyDrvServiceHours, cpqTapePhyDrvLoaderFwRev=cpqTapePhyDrvLoaderFwRev, cpqSasLogDrvStatusChange=cpqSasLogDrvStatusChange, cpqScsiCntlrFWVers=cpqScsiCntlrFWVers, cpqSasPhyDrvFWRev=cpqSasPhyDrvFWRev, cpqSbDevVendor=cpqSbDevVendor, cpqScsiPhyDrvMemberLogDrv=cpqScsiPhyDrvMemberLogDrv, cpqTapePhyDrvCleanReq=cpqTapePhyDrvCleanReq, cpqScsiLogDrvBusIndex=cpqScsiLogDrvBusIndex, cpqTape3PhyDrvStatusChange=cpqTape3PhyDrvStatusChange, cpqScsiCdDrvEntry=cpqScsiCdDrvEntry, cpqScsi4PhyDrvStatusChange=cpqScsi4PhyDrvStatusChange, cpqScsiPhyDrvLowWriteSectors=cpqScsiPhyDrvLowWriteSectors, cpqSasPhyDrvMemberLogDrv=cpqSasPhyDrvMemberLogDrv, cpqScsiPhyDrvOsName=cpqScsiPhyDrvOsName, cpqScsiPhyDrvCondition=cpqScsiPhyDrvCondition, cpqTapeLibraryDoorStatus=cpqTapeLibraryDoorStatus, cpqTapeLibraryRedundancy=cpqTapeLibraryRedundancy, cpqSasHbaEntry=cpqSasHbaEntry, cpqScsiNw3xXptDesc=cpqScsiNw3xXptDesc, cpqScsiMibCondition=cpqScsiMibCondition, cpqScsiOsNetWare=cpqScsiOsNetWare, cpqTape4PhyDrvStatusChange=cpqTape4PhyDrvStatusChange, cpqTapePhyDrvName=cpqTapePhyDrvName, cpqScsiLogDrvFaultTol=cpqScsiLogDrvFaultTol, cpqScsiTargetNegWidth=cpqScsiTargetNegWidth, cpqTapePhyDrvBusIndex=cpqTapePhyDrvBusIndex, cpqScsiCntlrTimeouts=cpqScsiCntlrTimeouts, cpqSasPhyDrvSmartCarrierAppFWRev=cpqSasPhyDrvSmartCarrierAppFWRev, cpqScsiCntlrCondition=cpqScsiCntlrCondition, cpqSasPhyDrvSerialNumber=cpqSasPhyDrvSerialNumber, cpqTapeLibraryCondition=cpqTapeLibraryCondition, cpqScsiCntlrStatus=cpqScsiCntlrStatus, cpqScsiTargetLocation=cpqScsiTargetLocation, cpqScsiLogDrvPhyDrvIDs=cpqScsiLogDrvPhyDrvIDs, cpqScsiCntlrTable=cpqScsiCntlrTable, cpqTapePhyDrvSerialNumber=cpqTapePhyDrvSerialNumber, cpqScsiPhyDrvHotPlug=cpqScsiPhyDrvHotPlug, cpqScsiCntlrIndex=cpqScsiCntlrIndex, cpqSasPhyDrvPowerOnHours=cpqSasPhyDrvPowerOnHours, cpqTapeLibraryScsiIdIndex=cpqTapeLibraryScsiIdIndex, cpqTapeCountersTotalErrors=cpqTapeCountersTotalErrors, cpqCdLibraryStatus=cpqCdLibraryStatus, cpqScsiPhyDrvPostErrCode=cpqScsiPhyDrvPostErrCode, cpqScsiTrap=cpqScsiTrap, cpqSasLogDrvIndex=cpqSasLogDrvIndex, cpqSasTapeDrvTable=cpqSasTapeDrvTable, cpqCdLibraryFwRev=cpqCdLibraryFwRev, cpqScsiPhyDrvHardReadErrs=cpqScsiPhyDrvHardReadErrs, cpqTapeLibraryLunIndex=cpqTapeLibraryLunIndex, cpqTapeLibraryTemperature=cpqTapeLibraryTemperature, cpqScsiNw3xCntlrInfoEntry=cpqScsiNw3xCntlrInfoEntry, cpqSasHbaBiosVersion=cpqSasHbaBiosVersion, cpqScsiPhyDrvFWRev=cpqScsiPhyDrvFWRev, cpqScsiPhyDrvVendor=cpqScsiPhyDrvVendor, cpqSasComponent=cpqSasComponent, cpqSasPhyDrvAuthenticationStatus=cpqSasPhyDrvAuthenticationStatus, cpqTapeLibraryHotSwap=cpqTapeLibraryHotSwap, cpqCdLibraryCntlrIndex=cpqCdLibraryCntlrIndex, cpqTapeLibraryCntlrIndex=cpqTapeLibraryCntlrIndex, cpqScsiPhyDrv=cpqScsiPhyDrv, cpqScsiLogDrvAvailSpares=cpqScsiLogDrvAvailSpares, cpqScsiCdDrvVendor=cpqScsiCdDrvVendor, cpqTapePhyDrvCleanTapeCount=cpqTapePhyDrvCleanTapeCount, cpqSasLogDrvStatus=cpqSasLogDrvStatus, cpqSasPhyDrvSSDWearStatus=cpqSasPhyDrvSSDWearStatus, cpqTapePhyDrvCleanTapeRepl=cpqTapePhyDrvCleanTapeRepl, cpqScsiNw3xDriverVers=cpqScsiNw3xDriverVers, cpqSasPhyDrvCurrTemperature=cpqSasPhyDrvCurrTemperature, cpqScsiTargetEntry=cpqScsiTargetEntry, cpqCdLibraryCondition=cpqCdLibraryCondition, cpqSbMibRevMinor=cpqSbMibRevMinor, cpqScsiPhyDrvSpinupTime=cpqScsiPhyDrvSpinupTime, cpqScsiCntlrEntry=cpqScsiCntlrEntry, cpqScsiNw3xXptVers=cpqScsiNw3xXptVers, cpqSasPhyDrvPlacement=cpqSasPhyDrvPlacement, cpqTapeCountersCntlrIndex=cpqTapeCountersCntlrIndex, cpqScsiCdDrvLunIndex=cpqScsiCdDrvLunIndex, cpqScsiNw3xCntlrIndex=cpqScsiNw3xCntlrIndex, cpqScsiOsCommonModuleDate=cpqScsiOsCommonModuleDate, cpqTapeCountersBusIndex=cpqTapeCountersBusIndex, cpqTapePhyDrvCondition=cpqTapePhyDrvCondition, cpqSasTapeDrvCondition=cpqSasTapeDrvCondition, cpqScsiPhyDrvRotationalSpeed=cpqScsiPhyDrvRotationalSpeed, cpqScsiPhyDrvLowReadSectors=cpqScsiPhyDrvLowReadSectors, cpqSasLogDrvRaidLevel=cpqSasLogDrvRaidLevel, cpqScsiLogDrvCntlrIndex=cpqScsiLogDrvCntlrIndex, cpqTapePhyDrvHotPlug=cpqTapePhyDrvHotPlug, cpqTape3PhyDrvCleanTapeReplace=cpqTape3PhyDrvCleanTapeReplace, cpqTapeCounters=cpqTapeCounters, cpqSasPhyDrvStatus=cpqSasPhyDrvStatus, cpqTapeLibraryFwRev=cpqTapeLibraryFwRev, cpqScsi2LogDrvStatusChange=cpqScsi2LogDrvStatusChange, cpqScsiNw3xSimDesc=cpqScsiNw3xSimDesc, cpqSbMibRevMajor=cpqSbMibRevMajor, cpqCdLibraryEntry=cpqCdLibraryEntry, cpqScsiTargetCurrentSpeed=cpqScsiTargetCurrentSpeed, cpqTapeLibraryTapeList=cpqTapeLibraryTapeList, cpqScsiLogDrvStripeSize=cpqScsiLogDrvStripeSize, cpqScsiTargetCntlrIndex=cpqScsiTargetCntlrIndex, cpqSasTapeDrv=cpqSasTapeDrv, cpqCdLibraryFwSubtype=cpqCdLibraryFwSubtype, cpqScsiTargetPhysWidth=cpqScsiTargetPhysWidth, cpqScsiPhyDrvRecvWriteErrs=cpqScsiPhyDrvRecvWriteErrs, cpqTapePhyDrvFwRev=cpqTapePhyDrvFwRev, cpqScsiTargetModel=cpqScsiTargetModel, cpqScsiTrapLogTable=cpqScsiTrapLogTable, cpqScsiCdDrvScsiIdIndex=cpqScsiCdDrvScsiIdIndex, cpqSasTapeDrvSasAddress=cpqSasTapeDrvSasAddress, cpqScsiTrapLogIndex=cpqScsiTrapLogIndex, cpqSasPhyDrvSmartCarrierBootldrFWRev=cpqSasPhyDrvSmartCarrierBootldrFWRev, cpqSasLogDrvSpareIds=cpqSasLogDrvSpareIds, cpqSasHbaPciLocation=cpqSasHbaPciLocation, cpqScsiPhyDrvHighReadSectors=cpqScsiPhyDrvHighReadSectors, cpqScsiNw3xDriverPollType=cpqScsiNw3xDriverPollType, cpqTape3PhyDrvCleaningRequired=cpqTape3PhyDrvCleaningRequired, cpqSasLogDrvStripeSize=cpqSasLogDrvStripeSize, cpqScsiPhyDrvEccCorrReads=cpqScsiPhyDrvEccCorrReads, cpqScsiCntlrSWVers=cpqScsiCntlrSWVers, cpqTapePhyDrvLunIndex=cpqTapePhyDrvLunIndex, cpqTapeCountersScsiIdIndex=cpqTapeCountersScsiIdIndex, cpqScsiPhyDrvRecvReadErrs=cpqScsiPhyDrvRecvReadErrs, cpqScsiLogDrvCondition=cpqScsiLogDrvCondition, cpqSasHbaTable=cpqSasHbaTable, cpqSasHbaStatus=cpqSasHbaStatus, cpqCdLibraryTable=cpqCdLibraryTable, cpqSasPhyDrvType=cpqSasPhyDrvType, cpqSasPhyDrvSize=cpqSasPhyDrvSize, cpqSasLogDrvTable=cpqSasLogDrvTable, cpqScsi5PhyDrvStatusChange=cpqScsi5PhyDrvStatusChange, cpqTapeLibraryStatusChange=cpqTapeLibraryStatusChange, cpqTapeCountersReWrites=cpqTapeCountersReWrites, cpqScsiCntlrHwLocation=cpqScsiCntlrHwLocation, cpqScsiTrapLogMaxSize=cpqScsiTrapLogMaxSize, cpqScsiCdDrvModel=cpqScsiCdDrvModel, cpqScsiTargetFWRev=cpqScsiTargetFWRev, cpqScsiOsCommon=cpqScsiOsCommon, cpqScsiMibRevMinor=cpqScsiMibRevMinor, cpqScsiTargetParityErrs=cpqScsiTargetParityErrs, cpqScsiLogDrvStatEntry=cpqScsiLogDrvStatEntry, cpqScsiTrapType=cpqScsiTrapType, cpqSbDevBusIndex=cpqSbDevBusIndex, cpqSas2TapeDrvStatusChange=cpqSas2TapeDrvStatusChange, cpqSasHbaCondition=cpqSasHbaCondition, cpqTape3LibraryDoorOpen=cpqTape3LibraryDoorOpen, cpqScsiNw3xVolBusIndex=cpqScsiNw3xVolBusIndex, cpqScsiPhyDrvPreFailMonitoring=cpqScsiPhyDrvPreFailMonitoring, cpqScsiNw3xHbaDesc=cpqScsiNw3xHbaDesc, cpqScsiNw3xVolLogDrvIndex=cpqScsiNw3xVolLogDrvIndex, cpqCdLibraryDriveList=cpqCdLibraryDriveList, cpqScsiLogDrvStatus=cpqScsiLogDrvStatus, cpqScsiTargetNegSpeed=cpqScsiTargetNegSpeed, cpqScsiLogDrvEntry=cpqScsiLogDrvEntry, cpqScsiPhyDrvBusIndex=cpqScsiPhyDrvBusIndex, cpqScsiCntlr=cpqScsiCntlr, cpqTapeLibraryBusIndex=cpqTapeLibraryBusIndex, cpqSbDevCntlrIndex=cpqSbDevCntlrIndex, cpqScsiLogDrvPercentRebuild=cpqScsiLogDrvPercentRebuild, cpqTapePhyDrvLoaderSerialNum=cpqTapePhyDrvLoaderSerialNum, cpqSasHbaSerialNumber=cpqSasHbaSerialNumber, cpqScsiPhyDrvSerialNum=cpqScsiPhyDrvSerialNum, cpqScsiCdDrvTable=cpqScsiCdDrvTable, cpqScsi3PhyDrvStatusChange=cpqScsi3PhyDrvStatusChange, cpqScsiLogDrvSize=cpqScsiLogDrvSize, cpqScsiCd=cpqScsiCd, cpqSasLogDrvOsName=cpqSasLogDrvOsName, cpqTapeLibrary=cpqTapeLibrary, cpqScsiTarget=cpqScsiTarget, cpqSasPhyDrvModel=cpqSasPhyDrvModel, cpqTapePhyDrvPlacement=cpqTapePhyDrvPlacement, cpqSasPhyDrvIndex=cpqSasPhyDrvIndex, cpqScsiComponent=cpqScsiComponent, cpqSasPhyDrvUsedReallocs=cpqSasPhyDrvUsedReallocs, cpqScsiCntlrBaseIOAddr=cpqScsiCntlrBaseIOAddr, cpqScsiTargetType=cpqScsiTargetType, cpqSasLogDrvRebuildingDisk=cpqSasLogDrvRebuildingDisk, cpqScsiCdDrvCntlrIndex=cpqScsiCdDrvCntlrIndex, cpqSasTapeDrvEntry=cpqSasTapeDrvEntry, cpqScsiCntlrHardResets=cpqScsiCntlrHardResets, cpqScsiLogDrvTable=cpqScsiLogDrvTable, cpqSasPhyDrvStatusChange=cpqSasPhyDrvStatusChange, cpqSbDevParityErrs=cpqSbDevParityErrs, cpqScsiNw3xTotalReads=cpqScsiNw3xTotalReads, cpqScsiCntlrStatusChange=cpqScsiCntlrStatusChange, cpqScsiCdLibraryStatusChange=cpqScsiCdLibraryStatusChange, cpqScsiCntlrSerialNum=cpqScsiCntlrSerialNum, cpqScsiOsCommonModuleEntry=cpqScsiOsCommonModuleEntry, cpqSbDeviceTable=cpqSbDeviceTable, cpqTapeCountersTotalBytes=cpqTapeCountersTotalBytes, cpqTapePhyDrvStatusChange=cpqTapePhyDrvStatusChange, cpqSasPhyDrvSsBoxFwRev=cpqSasPhyDrvSsBoxFwRev, cpqSasPhyDrvCondition=cpqSasPhyDrvCondition, cpqTapeLibraryName=cpqTapeLibraryName, cpqTape3LibraryDoorClosed=cpqTape3LibraryDoorClosed, cpqSasPhyDrvRotationalSpeed=cpqSasPhyDrvRotationalSpeed, cpqScsiTargetScsiIdIndex=cpqScsiTargetScsiIdIndex, cpqTapePhyDrvStatus=cpqTapePhyDrvStatus, cpqSasLogDrvRebuildingPercent=cpqSasLogDrvRebuildingPercent, cpqSasTapeDrvIndex=cpqSasTapeDrvIndex, cpqScsiPhyDrvModel=cpqScsiPhyDrvModel, cpqSbDevLocation=cpqSbDevLocation, cpqScsiNw3xVolCntlrIndex=cpqScsiNw3xVolCntlrIndex, cpqScsiOsCommonModuleVersion=cpqScsiOsCommonModuleVersion, cpqTapePhyDrvFwSubtype=cpqTapePhyDrvFwSubtype, cpqScsiPhyDrvEntry=cpqScsiPhyDrvEntry)
mibBuilder.exportSymbols("CPQSCSI-MIB", cpqScsiPhyDrvPostErrs=cpqScsiPhyDrvPostErrs, cpqScsiCntlrSoftResets=cpqScsiCntlrSoftResets, cpqTapeLibraryStatHours=cpqTapeLibraryStatHours, cpqScsi3LogDrvStatusChange=cpqScsi3LogDrvStatusChange, cpqScsiCntlrSlot=cpqScsiCntlrSlot, cpqScsi3CntlrStatusChange=cpqScsi3CntlrStatusChange, cpqSasPhyDrvEntry=cpqSasPhyDrvEntry, cpqTapePhyDrvScsiIdIndex=cpqTapePhyDrvScsiIdIndex, cpqSbDevSelectTimeouts=cpqSbDevSelectTimeouts, cpqSasPhyDrvLocationString=cpqSasPhyDrvLocationString, cpqScsiOsCommonModuleName=cpqScsiOsCommonModuleName, cpqSasPhyDrvSsBoxVendor=cpqSasPhyDrvSsBoxVendor, cpqSasHbaIndex=cpqSasHbaIndex, cpqTapeCountersLunIndex=cpqTapeCountersLunIndex, cpqScsiTrapPkts=cpqScsiTrapPkts, cpqSbDevice=cpqSbDevice, cpqScsiPhyDrvSeekErrs=cpqScsiPhyDrvSeekErrs, cpqSbDeviceEntry=cpqSbDeviceEntry, cpqScsiLogDrvStatusChange=cpqScsiLogDrvStatusChange, cpqSasHbaFwVersion=cpqSasHbaFwVersion, cpqScsiTargetSelectTimeouts=cpqScsiTargetSelectTimeouts, cpqSasTapeDrvFWRev=cpqSasTapeDrvFWRev, cpqSasLogDrvPhyDrvIds=cpqSasLogDrvPhyDrvIds, cpqScsiNw3xCorrReads=cpqScsiNw3xCorrReads, cpqScsiPhyDrvStatsPreserved=cpqScsiPhyDrvStatsPreserved, cpqTape3LibraryOkay=cpqTape3LibraryOkay, cpqScsiTargetTable=cpqScsiTargetTable, cpqSasPhyDrvMediaType=cpqSasPhyDrvMediaType, cpqCdLibrarySerialNumber=cpqCdLibrarySerialNumber, cpqSasPhyDrvSSDPercntEndrnceUsed=cpqSasPhyDrvSSDPercntEndrnceUsed, cpqScsiNw3xFatalReads=cpqScsiNw3xFatalReads, cpqScsiTargetPhaseErrs=cpqScsiTargetPhaseErrs, cpqTapePhyDrvEntry=cpqTapePhyDrvEntry, cpqScsiPhyDrvStatusChange=cpqScsiPhyDrvStatusChange, cpqTape3LibraryDegraded=cpqTape3LibraryDegraded, cpqScsiNw3xBusIndex=cpqScsiNw3xBusIndex, cpqScsiPhyDrvFuncTest2=cpqScsiPhyDrvFuncTest2, cpqSasLogDrvHbaIndex=cpqSasLogDrvHbaIndex, cpqCdLibraryLunIndex=cpqCdLibraryLunIndex, cpqCdLibraryModel=cpqCdLibraryModel, cpqTapeCountersEntry=cpqTapeCountersEntry, cpqScsiInterface=cpqScsiInterface, cpqScsiPhyDrvSize=cpqScsiPhyDrvSize, cpqScsiTargetVendor=cpqScsiTargetVendor, cpqScsiCntlrModel=cpqScsiCntlrModel, cpqScsiCntlrPciLocation=cpqScsiCntlrPciLocation, cpqScsi2PhyDrvStatusChange=cpqScsi2PhyDrvStatusChange, cpqScsiPhyDrvStatus=cpqScsiPhyDrvStatus, cpqScsiNw3xDriverPollTime=cpqScsiNw3xDriverPollTime, cpqScsiNw3xStatLogDrvIndex=cpqScsiNw3xStatLogDrvIndex, cpqScsiNw3xTotalWrites=cpqScsiNw3xTotalWrites, cpqScsi2CntlrStatusChange=cpqScsi2CntlrStatusChange, cpqSasTapeDrvLocationString=cpqSasTapeDrvLocationString, cpqTapePhyDrvType=cpqTapePhyDrvType, cpqScsiNw3xSimVers=cpqScsiNw3xSimVers, cpqScsiPhyDrvLocation=cpqScsiPhyDrvLocation, cpqScsiLogDrv=cpqScsiLogDrv, cpqScsiLogDrvIndex=cpqScsiLogDrvIndex, cpqScsiPhyDrvCntlrIndex=cpqScsiPhyDrvCntlrIndex, cpqScsiTargetNegPeriod=cpqScsiTargetNegPeriod, cpqTapePhyDrvMagSize=cpqTapePhyDrvMagSize, cpqCdLibraryVendor=cpqCdLibraryVendor, cpqTapePhyDrvTable=cpqTapePhyDrvTable, cpqTapeLibraryEntry=cpqTapeLibraryEntry, cpqCdLibraryScsiIdIndex=cpqCdLibraryScsiIdIndex, cpqScsiCntlrBusIndex=cpqScsiCntlrBusIndex, cpqScsiPhyDrvParent=cpqScsiPhyDrvParent, cpqScsiPhyDrvUsedReallocs=cpqScsiPhyDrvUsedReallocs, cpqScsiOsCommonModuleTable=cpqScsiOsCommonModuleTable, cpqScsiLogDrvStatTable=cpqScsiLogDrvStatTable, cpqScsiCntlrModelExtended=cpqScsiCntlrModelExtended, cpqSasPhyDrvHbaIndex=cpqSasPhyDrvHbaIndex, cpqSasPhyDrv=cpqSasPhyDrv, cpqScsiOsCommonModuleIndex=cpqScsiOsCommonModuleIndex, cpqSasTapeDrvStatus=cpqSasTapeDrvStatus, cpqTape5PhyDrvStatusChange=cpqTape5PhyDrvStatusChange, cpqSbDevMsgRejects=cpqSbDevMsgRejects, cpqScsiNw3xDriverName=cpqScsiNw3xDriverName, cpqScsiPhyDrvTimeouts=cpqScsiPhyDrvTimeouts, cpqTapePhyDrvLoaderName=cpqTapePhyDrvLoaderName, cpqSasPhyDrvTable=cpqSasPhyDrvTable, cpqSbScsiBus=cpqSbScsiBus, cpqScsiNw3xStatCntlrIndex=cpqScsiNw3xStatCntlrIndex, cpqSasPhyDrvOsName=cpqSasPhyDrvOsName, cpqScsiPhyDrvIndex=cpqScsiPhyDrvIndex, cpqScsiOsCommonPollFreq=cpqScsiOsCommonPollFreq, cpqScsiPhyDrvTable=cpqScsiPhyDrvTable, cpqSbDevFWRev=cpqSbDevFWRev, cpqTapePhyDrv=cpqTapePhyDrv, cpqScsiNw3xFatalWrites=cpqScsiNw3xFatalWrites, cpqTapeLibraryTable=cpqTapeLibraryTable, cpqSasPhyDrvSsBoxModel=cpqSasPhyDrvSsBoxModel, cpqScsiTargetTypeExtended=cpqScsiTargetTypeExtended, cpqTapeComponent=cpqTapeComponent, cpqTapeLibraryDriveList=cpqTapeLibraryDriveList, cpqScsiTargetBusIndex=cpqScsiTargetBusIndex, cpqCdLibraryBusIndex=cpqCdLibraryBusIndex, cpqScsiPhyDrvPlacement=cpqScsiPhyDrvPlacement, cpqScsiPhyDrvHardWriteErrs=cpqScsiPhyDrvHardWriteErrs, cpqTapeCountersTable=cpqTapeCountersTable, cpqScsiPhyDrvFuncTest1=cpqScsiPhyDrvFuncTest1, cpqTapeLibraryState=cpqTapeLibraryState, cpqSasHbaModel=cpqSasHbaModel, cpqSasPhyDrvSsBoxSerialNumber=cpqSasPhyDrvSsBoxSerialNumber)
