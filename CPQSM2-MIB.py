#
# PySNMP MIB module CPQSM2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/dauren/projects/snmp-kmg/CPQSM2-MIB.mib
# Produced by pysmi-0.3.1 at Thu Aug  2 17:43:46 2018
# On host dauren-pc platform Linux version 4.15.0-29-generic by user dauren
# Using Python version 2.7.15rc1 (default, Apr 15 2018, 21:51:34) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoGUIDCanonical, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoGUIDCanonical", "cpqHoTrapFlags")
cpqSiSysProductId, cpqSiSysSerialNum, cpqSiProductName, cpqSiAssetTag = mibBuilder.importSymbols("CPQSINFO-MIB", "cpqSiSysProductId", "cpqSiSysSerialNum", "cpqSiProductName", "cpqSiAssetTag")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqSm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9))
cpqSm2MibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 1))
cpqSm2Component = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2))
cpqSm2Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 3))
cpqSm2Interface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 1))
cpqSm2Cntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 2))
cpqSm2EventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 3))
cpqSm2AsyncComm = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 4))
cpqSm2Nic = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 5))
cpqSm2Ers = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 6))
cpqSm2FW = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 7))
cpqSm2OsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4))
cpqSm2NicIpv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3))
cpqSm2Products = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4))
cpaSm2ProdEisaRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 2))
cpqSm2ProdPCIRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 3))
cpqSm2ProdRILOE = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 4))
cpqSm2ProdiLo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 5))
cpqSm2ProdRILOEII = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 6))
cpqSm2ProdRILO2 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 7))
cpqSm2ProdRLO100 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 8))
cpqSm2ProdRILO3 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 9))
cpqSm2ProdRILO4 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 10))
cpqSm2ProdRILO5 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 11))
cpqSm2MibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2MibRevMajor.setStatus('mandatory')
cpqSm2MibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2MibRevMinor.setStatus('mandatory')
cpqSm2MibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2MibCondition.setStatus('mandatory')
cpqSm2OsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2OsCommonPollFreq.setStatus('mandatory')
cpqSm2OsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqSm2OsCommonModuleTable.setStatus('deprecated')
cpqSm2OsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2OsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqSm2OsCommonModuleEntry.setStatus('deprecated')
cpqSm2OsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModuleIndex.setStatus('deprecated')
cpqSm2OsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModuleName.setStatus('deprecated')
cpqSm2OsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModuleVersion.setStatus('deprecated')
cpqSm2OsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModuleDate.setStatus('deprecated')
cpqSm2OsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModulePurpose.setStatus('deprecated')
cpqSm2CntlrRomDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrRomDate.setStatus('mandatory')
cpqSm2CntlrRomRevision = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrRomRevision.setStatus('mandatory')
cpqSm2CntlrVideoStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrVideoStatus.setStatus('mandatory')
cpqSm2CntlrBatteryEnabled = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("noBattery", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrBatteryEnabled.setStatus('mandatory')
cpqSm2CntlrBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("batteryOk", 2), ("batteryFailed", 3), ("batteryDisconnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrBatteryStatus.setStatus('mandatory')
cpqSm2CntlrBatteryPercentCharged = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrBatteryPercentCharged.setStatus('mandatory')
cpqSm2CntlrAlertStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrAlertStatus.setStatus('mandatory')
cpqSm2CntlrPendingAlerts = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("noAlertsPending", 2), ("alertsPending", 3), ("clearPendingAlerts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrPendingAlerts.setStatus('mandatory')
cpqSm2CntlrSelfTestErrors = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrSelfTestErrors.setStatus('mandatory')
cpqSm2CntlrAgentLocation = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("hostOsAgent", 1), ("firmwareAgent", 2), ("remoteInsightPciFirmwareAgent", 3), ("enclosureFirmwareAgent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrAgentLocation.setStatus('mandatory')
cpqSm2CntlrLastDataUpdate = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrLastDataUpdate.setStatus('deprecated')
cpqSm2CntlrDataStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("noData", 2), ("onlineData", 3), ("offlineData", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrDataStatus.setStatus('mandatory')
cpqSm2CntlrColdReboot = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("notAvailable", 1), ("available", 2), ("doColdReboot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrColdReboot.setStatus('mandatory')
cpqSm2CntlrBadLoginAttemptsThresh = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrBadLoginAttemptsThresh.setStatus('mandatory')
cpqSm2CntlrBoardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrBoardSerialNumber.setStatus('mandatory')
cpqSm2CntlrRemoteSessionStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrRemoteSessionStatus.setStatus('mandatory')
cpqSm2CntlrInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("notResponding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrInterfaceStatus.setStatus('mandatory')
cpqSm2CntlrSystemId = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrSystemId.setStatus('mandatory')
cpqSm2CntlrKeyboardCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrKeyboardCableStatus.setStatus('mandatory')
cpqSm2ServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2ServerIpAddress.setStatus('mandatory')
cpqSm2CntlrModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)).clone(namedValues=NamedValues(("other", 1), ("eisaRemoteInsightBoard", 2), ("pciRemoteInsightBoard", 3), ("pciLightsOutRemoteInsightBoard", 4), ("pciIntegratedLightsOutRemoteInsight", 5), ("pciLightsOutRemoteInsightBoardII", 6), ("pciIntegratedLightsOutRemoteInsight2", 7), ("pciLightsOut100series", 8), ("pciIntegratedLightsOutRemoteInsight3", 9), ("pciIntegratedLightsOutRemoteInsight4", 10), ("pciIntegratedLightsOutRemoteInsight5", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrModel.setStatus('mandatory')
cpqSm2CntlrSelfTestErrorMask = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrSelfTestErrorMask.setStatus('mandatory')
cpqSm2CntlrMouseCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrMouseCableStatus.setStatus('mandatory')
cpqSm2CntlrVirtualPowerCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("connected", 2), ("disconnected", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrVirtualPowerCableStatus.setStatus('mandatory')
cpqSm2CntlrExternalPowerCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("other", 1), ("externallyConnected", 2), ("disconnected", 3), ("internallyConnected", 4), ("externallyAndInternallyConnected", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrExternalPowerCableStatus.setStatus('mandatory')
cpqSm2CntlrHostGUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrHostGUID.setStatus('mandatory')
cpqSm2CntlriLOSecurityOverrideSwitchState = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("notSupported", 1), ("set", 2), ("notSet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlriLOSecurityOverrideSwitchState.setStatus('mandatory')
cpqSm2CntlrHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrHardwareVer.setStatus('mandatory')
cpqSm2CntlrAction = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrAction.setStatus('mandatory')
cpqSm2CntlrLicenseActive = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("none", 1), ("iloAdvanced", 2), ("iloLight", 3), ("iloAdvancedBlade", 4), ("iloStandard", 5), ("iloEssentials", 6), ("iloScaleOut", 7), ("iloAdvancedPremiumSecurity", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrLicenseActive.setStatus('mandatory')
cpqSm2CntlrLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrLicenseKey.setStatus('mandatory')
cpqSm2CntlrServerPowerState = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("poweredOff", 2), ("poweredOn", 3), ("insufficientPowerOrPowerOnDenied", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrServerPowerState.setStatus('mandatory')
cpqSm2CntlrSysAutoShutdownCause = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 129, 130, 131, 132, 133, 134, 135)).clone(namedValues=NamedValues(("fanFailure", 1), ("overheatCondition", 2), ("vrmFailure", 3), ("powerSupplyFailure", 4), ("systemRunningOnBatteryBackupUnit", 5), ("aborted", 129), ("fanFailureAborted", 130), ("overheatAborted", 131), ("vrmFailureAborted", 132), ("softPowerDown", 133), ("softwareAutomaticServerRecovery", 134), ("powerSupplyFailureAborted", 135)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrSysAutoShutdownCause.setStatus('mandatory')
cpqSm2CntlrSecurityState = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("factory", 1), ("wipe", 2), ("production", 3), ("highSecurity", 4), ("fips", 5), ("cnsa", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrSecurityState.setStatus('mandatory')
cpqSm2WDTimerType = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("unknown", 1), ("ipmi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2WDTimerType.setStatus('mandatory')
cpqSm2WDTimerTimeoutDetails = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2WDTimerTimeoutDetails.setStatus('mandatory')
cpqSm2EventTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2EventTotalEntries.setStatus('mandatory')
cpqSm2EventLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2), )
if mibBuilder.loadTexts: cpqSm2EventLogTable.setStatus('mandatory')
cpqSm2EventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2EventLogIndex"))
if mibBuilder.loadTexts: cpqSm2EventLogEntry.setStatus('mandatory')
cpqSm2EventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2EventLogIndex.setStatus('mandatory')
cpqSm2EventLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2EventLogNumber.setStatus('mandatory')
cpqSm2EventLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2EventLogDate.setStatus('mandatory')
cpqSm2EventLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2EventLogMessage.setStatus('mandatory')
cpqSm2CommSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1), )
if mibBuilder.loadTexts: cpqSm2CommSettingsTable.setStatus('mandatory')
cpqSm2CommSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2CommPort"))
if mibBuilder.loadTexts: cpqSm2CommSettingsEntry.setStatus('mandatory')
cpqSm2CommPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("internal", 1), ("auxiliary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPort.setStatus('mandatory')
cpqSm2CommType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("modem", 3), ("nulModemCable", 4), ("xonXoff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommType.setStatus('mandatory')
cpqSm2CommBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommBaudRate.setStatus('mandatory')
cpqSm2CommParity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("odd", 3), ("even", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommParity.setStatus('mandatory')
cpqSm2CommDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("sevenBits", 2), ("eightBits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommDataBits.setStatus('mandatory')
cpqSm2CommStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("oneBit", 2), ("twoBits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommStopBits.setStatus('mandatory')
cpqSm2CommModemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommModemReset.setStatus('mandatory')
cpqSm2CommModemInit = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommModemInit.setStatus('mandatory')
cpqSm2CommModemDialPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommModemDialPrefix.setStatus('mandatory')
cpqSm2CommPortInit = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPortInit.setStatus('mandatory')
cpqSm2CommDialin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommDialin.setStatus('mandatory')
cpqSm2CommDialbackRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("required", 2), ("notRequired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommDialbackRequired.setStatus('mandatory')
cpqSm2CommNonPppConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommNonPppConnections.setStatus('mandatory')
cpqSm2CommSnmpTrapDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommSnmpTrapDelivery.setStatus('mandatory')
cpqSm2CommPageDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPageDelivery.setStatus('mandatory')
cpqSm2CommPagerBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPagerBaudRate.setStatus('mandatory')
cpqSm2CommPagerParity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("odd", 3), ("even", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPagerParity.setStatus('mandatory')
cpqSm2CommPagerDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("sevenBits", 2), ("eightBits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPagerDataBits.setStatus('mandatory')
cpqSm2CommPagerStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("oneBit", 2), ("twoBits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPagerStopBits.setStatus('mandatory')
cpqSm2CommPcmciaModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPcmciaModel.setStatus('mandatory')
cpqSm2NicConfigTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1), )
if mibBuilder.loadTexts: cpqSm2NicConfigTable.setStatus('mandatory')
cpqSm2NicConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2NicLocation"))
if mibBuilder.loadTexts: cpqSm2NicConfigEntry.setStatus('mandatory')
cpqSm2NicLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("embedded", 2), ("pcmcia", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicLocation.setStatus('mandatory')
cpqSm2NicModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicModel.setStatus('mandatory')
cpqSm2NicType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ethernet", 2), ("tokenRing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicType.setStatus('mandatory')
cpqSm2NicMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicMacAddress.setStatus('mandatory')
cpqSm2NicIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpAddress.setStatus('mandatory')
cpqSm2NicIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpSubnetMask.setStatus('mandatory')
cpqSm2NicEnabledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicEnabledStatus.setStatus('mandatory')
cpqSm2NicDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("halfDuplex", 2), ("fullDuplex", 3), ("notSupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicDuplexState.setStatus('mandatory')
cpqSm2NicSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicSpeed.setStatus('mandatory')
cpqSm2NicDhcpUse = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicDhcpUse.setStatus('mandatory')
cpqSm2NicCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicCondition.setStatus('mandatory')
cpqSm2NicMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicMtu.setStatus('mandatory')
cpqSm2NicGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicGatewayIpAddress.setStatus('mandatory')
cpqSm2NicRibFullQualDnsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRibFullQualDnsName.setStatus('mandatory')
cpqSm2NicStatsTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2), )
if mibBuilder.loadTexts: cpqSm2NicStatsTable.setStatus('mandatory')
cpqSm2NicStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2NicStatsLocation"))
if mibBuilder.loadTexts: cpqSm2NicStatsEntry.setStatus('mandatory')
cpqSm2NicStatsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("embedded", 2), ("pcmcia", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicStatsLocation.setStatus('mandatory')
cpqSm2NicXmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitBytes.setStatus('mandatory')
cpqSm2NicXmitTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitTotalPackets.setStatus('mandatory')
cpqSm2NicXmitUnicastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitUnicastPackets.setStatus('mandatory')
cpqSm2NicXmitNonUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitNonUniPackets.setStatus('mandatory')
cpqSm2NicXmitDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitDiscardPackets.setStatus('mandatory')
cpqSm2NicXmitErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitErrorPackets.setStatus('mandatory')
cpqSm2NicXmitQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitQueueLength.setStatus('mandatory')
cpqSm2NicRecvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvBytes.setStatus('mandatory')
cpqSm2NicRecvTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvTotalPackets.setStatus('mandatory')
cpqSm2NicRecvUnicastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvUnicastPackets.setStatus('mandatory')
cpqSm2NicRecvNonUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvNonUniPackets.setStatus('mandatory')
cpqSm2NicRecvDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvDiscardPackets.setStatus('mandatory')
cpqSm2NicRecvErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvErrorPackets.setStatus('mandatory')
cpqSm2NicRecvUnknownPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvUnknownPackets.setStatus('mandatory')
cpqSm2NicIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6Gateway.setStatus('mandatory')
cpqSm2NicIpv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 2), )
if mibBuilder.loadTexts: cpqSm2NicIpv6AddressTable.setStatus('mandatory')
cpqSm2NicIpv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 2, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2NicIpv6Index"))
if mibBuilder.loadTexts: cpqSm2NicIpv6AddressEntry.setStatus('mandatory')
cpqSm2NicIpv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6Index.setStatus('mandatory')
cpqSm2NicIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6Address.setStatus('mandatory')
cpqSm2NicIpv6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6Status.setStatus('mandatory')
cpqSm2NicIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6PrefixLen.setStatus('mandatory')
cpqSm2NicIpv6DhcpTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 3), )
if mibBuilder.loadTexts: cpqSm2NicIpv6DhcpTable.setStatus('mandatory')
cpqSm2NicIpv6DhcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 3, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2NicIpv6Index"))
if mibBuilder.loadTexts: cpqSm2NicIpv6DhcpEntry.setStatus('mandatory')
cpqSm2NicIpv6DhcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6DhcpIndex.setStatus('mandatory')
cpqSm2NicIpv6Dhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6Dhcp.setStatus('mandatory')
cpqSm2NicIpv6DhcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6DhcpStatus.setStatus('mandatory')
cpqSm2NicIpv6DhcpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6DhcpPrefixLen.setStatus('mandatory')
cpqSm2NicIpv6SlaacTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 4), )
if mibBuilder.loadTexts: cpqSm2NicIpv6SlaacTable.setStatus('mandatory')
cpqSm2NicIpv6SlaacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 4, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2NicIpv6SlaacIndex"))
if mibBuilder.loadTexts: cpqSm2NicIpv6SlaacEntry.setStatus('mandatory')
cpqSm2NicIpv6SlaacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6SlaacIndex.setStatus('mandatory')
cpqSm2NicIpv6Slaac = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6Slaac.setStatus('mandatory')
cpqsm2NicIpv6SlaacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqsm2NicIpv6SlaacStatus.setStatus('mandatory')
cpqSm2NicIpv6SlaacPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6SlaacPrefixLen.setStatus('mandatory')
cpqSm2NicIpv6RouteTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 5), )
if mibBuilder.loadTexts: cpqSm2NicIpv6RouteTable.setStatus('mandatory')
cpqSm2NicIpv6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 5, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2NicIpv6RouteIndex"))
if mibBuilder.loadTexts: cpqSm2NicIpv6RouteEntry.setStatus('mandatory')
cpqSm2NicIpv6RouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6RouteIndex.setStatus('mandatory')
cpqSm2NicIpv6RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6RouteDest.setStatus('mandatory')
cpqsm2NicIpv6RouteDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqsm2NicIpv6RouteDestStatus.setStatus('mandatory')
cpqSm2NicIpv6RouteDestPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpv6RouteDestPrefixLen.setStatus('mandatory')
cpqSM2NicIpv6RouteGate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSM2NicIpv6RouteGate.setStatus('mandatory')
cpqsm2NicIpv6RouteGateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 3, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqsm2NicIpv6RouteGateStatus.setStatus('mandatory')
cpqSm2ErsTransactionType = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("registration", 1), ("serviceEvent", 2), ("l2DataCollection", 3), ("unregistration", 4), ("ahsDataCollection", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2ErsTransactionType.setStatus('mandatory')
cpqSm2ErsConnectionModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("insightOnline", 1), ("insightRemoteSupport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2ErsConnectionModel.setStatus('mandatory')
cpqSm2ErsFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 6, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("genericTransmitError", 1), ("clientTransmitTimeout", 2), ("clientReceiveTimeout", 3), ("proxyConnectError", 4), ("remoteHostConnectError", 5), ("remoteServiceError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2ErsFailureCode.setStatus('mandatory')
cpqSm2ErsRemoteHost = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 135))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2ErsRemoteHost.setStatus('mandatory')
cpqSm2FirmwareType = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("unknown", 1), ("ilo", 2), ("bios", 3), ("cpld", 4), ("ie", 5), ("sps", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2FirmwareType.setStatus('mandatory')
cpqSm2FwFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 135))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2FwFailureCode.setStatus('mandatory')
cpqSm2ServerReset = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2ServerPowerOutage = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2UnauthorizedLoginAttempts = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2CntlrBadLoginAttemptsThresh"))
cpqSm2BatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2SelfTestError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2CntlrSelfTestErrors"))
cpqSm2InterfaceError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2BatteryDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2KeyboardCableDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2MouseCableDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2ExternalPowerCableDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2LogsFull = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2SecurityOverrideEngaged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2SecurityOverrideDisengaged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSm2ServerFatalError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9014)).setObjects(("SNMPv2-MIB", "sysName"))
cpqSm2NicLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9015)).setObjects(("SNMPv2-MIB", "sysName"))
cpqSm2NicLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9016)).setObjects(("SNMPv2-MIB", "sysName"))
cpqSm2ServerPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"))
cpqSm2ServerPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"))
cpqSm2ServerPowerOnFailure = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"))
cpqSm2IrsCommFailure = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGUIDCanonical"), ("CPQSINFO-MIB", "cpqSiProductName"), ("CPQSINFO-MIB", "cpqSiSysProductId"), ("CPQSINFO-MIB", "cpqSiSysSerialNum"), ("CPQSINFO-MIB", "cpqSiAssetTag"), ("CPQSM2-MIB", "cpqSm2ErsTransactionType"), ("CPQSM2-MIB", "cpqSm2ErsConnectionModel"), ("CPQSM2-MIB", "cpqSm2ErsFailureCode"), ("CPQSM2-MIB", "cpqSm2ErsRemoteHost"))
cpqSm2FirmwareValidationScanFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2FirmwareType"))
cpqSm2FirmwareValidationScanErrorRepaired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9022)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2FirmwareType"))
cpqSm2FirmwareValidationAutoRepairFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9023)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2FirmwareType"))
cpqSm2AutoShutdownInitiated = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9024)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2CntlrSysAutoShutdownCause"))
cpqSm2AutoShutdownCancelled = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9025)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2CntlrSysAutoShutdownCause"))
cpqSm2FwUpdateUploadFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9026)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2FwFailureCode"))
cpqSm2SecurityStateChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9027)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2CntlrSecurityState"))
cpqSm2WDTimerReset = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9028)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2WDTimerType"), ("CPQSM2-MIB", "cpqSm2WDTimerTimeoutDetails"))
mibBuilder.exportSymbols("CPQSM2-MIB", cpqSm2SecurityStateChange=cpqSm2SecurityStateChange, cpqSm2NicIpv6RouteEntry=cpqSm2NicIpv6RouteEntry, cpqSm2AutoShutdownInitiated=cpqSm2AutoShutdownInitiated, cpqSm2CntlrSelfTestErrorMask=cpqSm2CntlrSelfTestErrorMask, cpqsm2NicIpv6SlaacStatus=cpqsm2NicIpv6SlaacStatus, cpqSm2AutoShutdownCancelled=cpqSm2AutoShutdownCancelled, cpqSm2CntlrSystemId=cpqSm2CntlrSystemId, cpqSm2EventLogMessage=cpqSm2EventLogMessage, cpqSm2NicIpv6DhcpPrefixLen=cpqSm2NicIpv6DhcpPrefixLen, cpqSm2NicRecvDiscardPackets=cpqSm2NicRecvDiscardPackets, cpqSm2NicIpAddress=cpqSm2NicIpAddress, cpqSm2EventLogIndex=cpqSm2EventLogIndex, cpqSm2NicIpSubnetMask=cpqSm2NicIpSubnetMask, cpqSm2MibRevMajor=cpqSm2MibRevMajor, cpqSm2WDTimerTimeoutDetails=cpqSm2WDTimerTimeoutDetails, cpqSm2NicIpv6DhcpStatus=cpqSm2NicIpv6DhcpStatus, cpqSm2OsCommonPollFreq=cpqSm2OsCommonPollFreq, cpqSm2CommPort=cpqSm2CommPort, cpqSm2ExternalPowerCableDisconnected=cpqSm2ExternalPowerCableDisconnected, cpqSm2CntlrSelfTestErrors=cpqSm2CntlrSelfTestErrors, cpqSm2CommParity=cpqSm2CommParity, cpqSm2NicRecvTotalPackets=cpqSm2NicRecvTotalPackets, cpqSm2FirmwareType=cpqSm2FirmwareType, cpqSm2WDTimerReset=cpqSm2WDTimerReset, cpqSm2Interface=cpqSm2Interface, cpqSm2ProdRILO4=cpqSm2ProdRILO4, cpqSm2EventLogDate=cpqSm2EventLogDate, cpqSm2CntlrAlertStatus=cpqSm2CntlrAlertStatus, cpqSm2CntlrVirtualPowerCableStatus=cpqSm2CntlrVirtualPowerCableStatus, cpqSm2CntlrKeyboardCableStatus=cpqSm2CntlrKeyboardCableStatus, cpqSm2ServerIpAddress=cpqSm2ServerIpAddress, cpqSm2ServerFatalError=cpqSm2ServerFatalError, cpqSm2NicIpv6RouteTable=cpqSm2NicIpv6RouteTable, cpqSm2CntlrHardwareVer=cpqSm2CntlrHardwareVer, cpqSm2NicRecvUnicastPackets=cpqSm2NicRecvUnicastPackets, cpqSm2CommPageDelivery=cpqSm2CommPageDelivery, cpqsm2NicIpv6RouteGateStatus=cpqsm2NicIpv6RouteGateStatus, cpqSm2CommDataBits=cpqSm2CommDataBits, cpqSm2CntlrSecurityState=cpqSm2CntlrSecurityState, cpqSm2NicSpeed=cpqSm2NicSpeed, cpqSm2NicDuplexState=cpqSm2NicDuplexState, cpqSm2NicRibFullQualDnsName=cpqSm2NicRibFullQualDnsName, cpqSm2EventLogTable=cpqSm2EventLogTable, cpqSm2CommSettingsTable=cpqSm2CommSettingsTable, cpqSm2CommSettingsEntry=cpqSm2CommSettingsEntry, cpqSm2NicIpv6RouteDest=cpqSm2NicIpv6RouteDest, cpqSm2WDTimerType=cpqSm2WDTimerType, cpqSm2ProdRILO3=cpqSm2ProdRILO3, cpqSm2NicStatsTable=cpqSm2NicStatsTable, cpqSm2CntlrRomDate=cpqSm2CntlrRomDate, cpqSm2NicEnabledStatus=cpqSm2NicEnabledStatus, cpqSm2CntlrAgentLocation=cpqSm2CntlrAgentLocation, cpqSm2CntlrBatteryEnabled=cpqSm2CntlrBatteryEnabled, cpqSm2NicXmitUnicastPackets=cpqSm2NicXmitUnicastPackets, cpqSm2CommType=cpqSm2CommType, cpqSm2Cntlr=cpqSm2Cntlr, cpqSm2NicIpv6RouteIndex=cpqSm2NicIpv6RouteIndex, cpqSm2NicXmitTotalPackets=cpqSm2NicXmitTotalPackets, cpqSm2ServerReset=cpqSm2ServerReset, cpqSm2ProdPCIRemote=cpqSm2ProdPCIRemote, cpqSm2NicType=cpqSm2NicType, cpqSm2NicRecvBytes=cpqSm2NicRecvBytes, cpqSm2OsCommonModulePurpose=cpqSm2OsCommonModulePurpose, cpqSm2CntlrExternalPowerCableStatus=cpqSm2CntlrExternalPowerCableStatus, cpqSm2CntlrPendingAlerts=cpqSm2CntlrPendingAlerts, cpqSm2CntlrServerPowerState=cpqSm2CntlrServerPowerState, cpqSm2CommDialin=cpqSm2CommDialin, cpqSm2CommNonPppConnections=cpqSm2CommNonPppConnections, cpqSm2NicIpv6DhcpEntry=cpqSm2NicIpv6DhcpEntry, cpqSM2NicIpv6RouteGate=cpqSM2NicIpv6RouteGate, cpqSm2NicXmitBytes=cpqSm2NicXmitBytes, cpqSm2Products=cpqSm2Products, cpqSm2AsyncComm=cpqSm2AsyncComm, cpqSm2UnauthorizedLoginAttempts=cpqSm2UnauthorizedLoginAttempts, cpqSm2FW=cpqSm2FW, cpqSm2NicIpv6DhcpTable=cpqSm2NicIpv6DhcpTable, cpqSm2IrsCommFailure=cpqSm2IrsCommFailure, cpqSm2CommPagerDataBits=cpqSm2CommPagerDataBits, cpqSm2CommBaudRate=cpqSm2CommBaudRate, cpqSm2Component=cpqSm2Component, cpqSm2CntlrInterfaceStatus=cpqSm2CntlrInterfaceStatus, cpqSm2NicIpv6AddressEntry=cpqSm2NicIpv6AddressEntry, cpqSm2NicIpv6SlaacPrefixLen=cpqSm2NicIpv6SlaacPrefixLen, cpqSm2NicIpv6Address=cpqSm2NicIpv6Address, cpqSm2NicIpv6DhcpIndex=cpqSm2NicIpv6DhcpIndex, cpqSm2CntlrAction=cpqSm2CntlrAction, cpqSm2MouseCableDisconnected=cpqSm2MouseCableDisconnected, cpqSm2MibRev=cpqSm2MibRev, cpqSm2CommModemInit=cpqSm2CommModemInit, cpqSm2NicIpv6PrefixLen=cpqSm2NicIpv6PrefixLen, cpqSm2ProdRILO5=cpqSm2ProdRILO5, cpqSm2ErsRemoteHost=cpqSm2ErsRemoteHost, cpqSm2Trap=cpqSm2Trap, cpqSm2OsCommonModuleIndex=cpqSm2OsCommonModuleIndex, cpqSm2CommModemReset=cpqSm2CommModemReset, cpqSm2NicStatsEntry=cpqSm2NicStatsEntry, cpqSm2CntlrModel=cpqSm2CntlrModel, cpqSm2ErsConnectionModel=cpqSm2ErsConnectionModel, cpqSm2NicDhcpUse=cpqSm2NicDhcpUse, cpqSm2CommModemDialPrefix=cpqSm2CommModemDialPrefix, cpqSm2CntlrSysAutoShutdownCause=cpqSm2CntlrSysAutoShutdownCause, cpqSm2NicIpv6RouteDestPrefixLen=cpqSm2NicIpv6RouteDestPrefixLen, cpqSm2NicMtu=cpqSm2NicMtu, cpqSm2ServerPowerOff=cpqSm2ServerPowerOff, cpqSm2ProdRILOE=cpqSm2ProdRILOE, cpqSm2NicIpv6=cpqSm2NicIpv6, cpqSm2CntlrMouseCableStatus=cpqSm2CntlrMouseCableStatus, cpqSm2CommStopBits=cpqSm2CommStopBits, cpqSm2NicXmitErrorPackets=cpqSm2NicXmitErrorPackets, cpqSm2OsCommon=cpqSm2OsCommon, cpqSm2CntlrColdReboot=cpqSm2CntlrColdReboot, cpqSm2NicLocation=cpqSm2NicLocation, cpqSm2NicRecvUnknownPackets=cpqSm2NicRecvUnknownPackets, cpqSm2SecurityOverrideEngaged=cpqSm2SecurityOverrideEngaged, cpqSm2NicXmitNonUniPackets=cpqSm2NicXmitNonUniPackets, cpqSm2CntlriLOSecurityOverrideSwitchState=cpqSm2CntlriLOSecurityOverrideSwitchState, cpqSm2NicIpv6Gateway=cpqSm2NicIpv6Gateway, cpqSm2OsCommonModuleEntry=cpqSm2OsCommonModuleEntry, cpqSm2=cpqSm2, cpqSm2SecurityOverrideDisengaged=cpqSm2SecurityOverrideDisengaged, cpqSm2CntlrLastDataUpdate=cpqSm2CntlrLastDataUpdate, cpqSm2FwUpdateUploadFailed=cpqSm2FwUpdateUploadFailed, cpqSm2OsCommonModuleTable=cpqSm2OsCommonModuleTable, cpqSm2NicMacAddress=cpqSm2NicMacAddress, cpqSm2CommPortInit=cpqSm2CommPortInit, cpqSm2CntlrVideoStatus=cpqSm2CntlrVideoStatus, cpqSm2BatteryDisconnected=cpqSm2BatteryDisconnected, cpqSm2ProdRLO100=cpqSm2ProdRLO100, cpqSm2CommPcmciaModel=cpqSm2CommPcmciaModel, cpqSm2NicIpv6SlaacEntry=cpqSm2NicIpv6SlaacEntry, cpqSm2FirmwareValidationScanErrorRepaired=cpqSm2FirmwareValidationScanErrorRepaired, cpqSm2CommPagerParity=cpqSm2CommPagerParity, cpaSm2ProdEisaRemote=cpaSm2ProdEisaRemote, cpqSm2ServerPowerOutage=cpqSm2ServerPowerOutage, cpqSm2CntlrRomRevision=cpqSm2CntlrRomRevision, cpqSm2CntlrBatteryPercentCharged=cpqSm2CntlrBatteryPercentCharged, cpqSm2CntlrDataStatus=cpqSm2CntlrDataStatus, cpqSm2CommPagerBaudRate=cpqSm2CommPagerBaudRate, cpqSm2EventTotalEntries=cpqSm2EventTotalEntries, cpqSm2OsCommonModuleDate=cpqSm2OsCommonModuleDate, cpqSm2Nic=cpqSm2Nic, cpqSm2NicIpv6AddressTable=cpqSm2NicIpv6AddressTable, cpqSm2CommSnmpTrapDelivery=cpqSm2CommSnmpTrapDelivery, cpqSm2CntlrLicenseActive=cpqSm2CntlrLicenseActive, cpqSm2FirmwareValidationScanFailed=cpqSm2FirmwareValidationScanFailed, cpqSm2ProdRILOEII=cpqSm2ProdRILOEII, cpqSm2NicIpv6Dhcp=cpqSm2NicIpv6Dhcp, cpqSm2NicModel=cpqSm2NicModel, cpqSm2FirmwareValidationAutoRepairFailed=cpqSm2FirmwareValidationAutoRepairFailed, cpqSm2NicIpv6Slaac=cpqSm2NicIpv6Slaac, cpqSm2CntlrLicenseKey=cpqSm2CntlrLicenseKey, cpqSm2NicCondition=cpqSm2NicCondition, cpqSm2CommDialbackRequired=cpqSm2CommDialbackRequired, cpqSm2CommPagerStopBits=cpqSm2CommPagerStopBits, cpqSm2ProdiLo=cpqSm2ProdiLo, cpqSm2NicIpv6Index=cpqSm2NicIpv6Index, cpqSm2OsCommonModuleName=cpqSm2OsCommonModuleName, cpqSm2EventLogNumber=cpqSm2EventLogNumber, cpqSm2EventLogEntry=cpqSm2EventLogEntry, cpqSm2NicGatewayIpAddress=cpqSm2NicGatewayIpAddress, cpqSm2NicRecvNonUniPackets=cpqSm2NicRecvNonUniPackets, cpqSm2CntlrHostGUID=cpqSm2CntlrHostGUID, cpqSm2NicIpv6SlaacTable=cpqSm2NicIpv6SlaacTable, cpqSm2MibRevMinor=cpqSm2MibRevMinor, cpqSm2Ers=cpqSm2Ers, cpqSm2NicXmitQueueLength=cpqSm2NicXmitQueueLength, cpqSm2MibCondition=cpqSm2MibCondition, cpqSm2NicLinkDown=cpqSm2NicLinkDown, cpqSm2ProdRILO2=cpqSm2ProdRILO2, cpqSm2CntlrBadLoginAttemptsThresh=cpqSm2CntlrBadLoginAttemptsThresh, cpqSm2NicLinkUp=cpqSm2NicLinkUp, cpqSm2CntlrRemoteSessionStatus=cpqSm2CntlrRemoteSessionStatus, cpqSm2BatteryFailed=cpqSm2BatteryFailed, cpqSm2CntlrBatteryStatus=cpqSm2CntlrBatteryStatus, cpqSm2ErsFailureCode=cpqSm2ErsFailureCode, cpqSm2SelfTestError=cpqSm2SelfTestError, cpqSm2OsCommonModuleVersion=cpqSm2OsCommonModuleVersion, cpqSm2NicConfigTable=cpqSm2NicConfigTable, cpqSm2NicIpv6Status=cpqSm2NicIpv6Status, cpqSm2LogsFull=cpqSm2LogsFull, cpqSm2NicStatsLocation=cpqSm2NicStatsLocation, cpqSm2NicIpv6SlaacIndex=cpqSm2NicIpv6SlaacIndex, cpqSm2CntlrBoardSerialNumber=cpqSm2CntlrBoardSerialNumber, cpqSm2ServerPowerOnFailure=cpqSm2ServerPowerOnFailure, cpqSm2NicXmitDiscardPackets=cpqSm2NicXmitDiscardPackets, cpqSm2EventLog=cpqSm2EventLog, cpqSm2KeyboardCableDisconnected=cpqSm2KeyboardCableDisconnected, cpqSm2FwFailureCode=cpqSm2FwFailureCode, cpqSm2ServerPowerOn=cpqSm2ServerPowerOn, cpqSm2ErsTransactionType=cpqSm2ErsTransactionType, cpqsm2NicIpv6RouteDestStatus=cpqsm2NicIpv6RouteDestStatus, cpqSm2InterfaceError=cpqSm2InterfaceError, cpqSm2NicConfigEntry=cpqSm2NicConfigEntry, cpqSm2NicRecvErrorPackets=cpqSm2NicRecvErrorPackets)
