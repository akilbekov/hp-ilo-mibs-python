#
# PySNMP MIB module CPQFCA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/CPQFCA-MIB
# Produced by pysmi-0.3.1 at Thu Aug  2 16:31:56 2018
# On host dauren-pc platform Linux version 4.15.0-29-generic by user dauren
# Using Python version 2.7.15rc1 (default, Apr 15 2018, 21:51:34) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
cpqSsChassisName, cpqSsChassisTime = mibBuilder.importSymbols("CPQSTSYS-MIB", "cpqSsChassisName", "cpqSsChassisTime")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, enterprises, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqFibreArray = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16))
cpqFcaMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 1))
cpqFcaComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2))
cpqFcTapeComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 3))
cpqFcSwitchComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 4))
cpqFcaInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 1))
cpqFcaCntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 2))
cpqFcaLogDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 3))
cpqFcaSpareDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 4))
cpqFcaPhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 5))
cpqFcaPhyDrvThr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 6))
cpqFcaHostCntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 7))
cpqExtArrRsrcVol = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 8))
cpqExtArrSnapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 9))
cpqFcaOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 2, 1, 4))
cpqFcTapeCntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 3, 1))
cpqFcTapeLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 3, 2))
cpqFcTapeDrive = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 3, 3))
cpqFcTapeCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 3, 4))
cpqFcSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 16, 4, 1))
cpqFcaMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaMibRevMajor.setStatus('mandatory')
cpqFcaMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaMibRevMinor.setStatus('mandatory')
cpqFcaMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 16, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaMibCondition.setStatus('mandatory')
cpqFcaOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 16, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqFcaOsCommonPollFreq.setStatus('mandatory')
cpqFcaOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqFcaOsCommonModuleTable.setStatus('deprecated')
cpqFcaOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcaOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqFcaOsCommonModuleEntry.setStatus('deprecated')
cpqFcaOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaOsCommonModuleIndex.setStatus('deprecated')
cpqFcaOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaOsCommonModuleName.setStatus('deprecated')
cpqFcaOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaOsCommonModuleVersion.setStatus('deprecated')
cpqFcaOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaOsCommonModuleDate.setStatus('deprecated')
cpqFcaOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaOsCommonModulePurpose.setStatus('deprecated')
cpqFcaCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1), )
if mibBuilder.loadTexts: cpqFcaCntlrTable.setStatus('mandatory')
cpqFcaCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcaCntlrBoxIndex"), (0, "CPQFCA-MIB", "cpqFcaCntlrBoxIoSlot"))
if mibBuilder.loadTexts: cpqFcaCntlrEntry.setStatus('mandatory')
cpqFcaCntlrBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrBoxIndex.setStatus('mandatory')
cpqFcaCntlrBoxIoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrBoxIoSlot.setStatus('mandatory')
cpqFcaCntlrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("other", 1), ("fibreArray", 2), ("msa1000", 3), ("smartArrayClusterStorage", 4), ("hsg80", 5), ("hsv110", 6), ("msa500G2", 7), ("msa20", 8), ("msa1510i", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrModel.setStatus('mandatory')
cpqFcaCntlrFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrFWRev.setStatus('mandatory')
cpqFcaCntlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("offline", 4), ("redundantPathOffline", 5), ("notConnected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrStatus.setStatus('mandatory')
cpqFcaCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrCondition.setStatus('mandatory')
cpqFcaCntlrProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrProductRev.setStatus('mandatory')
cpqFcaCntlrWorldWideName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrWorldWideName.setStatus('mandatory')
cpqFcaCntlrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrSerialNumber.setStatus('mandatory')
cpqFcaCntlrCurrentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notDuplexed", 2), ("active", 3), ("backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrCurrentRole.setStatus('mandatory')
cpqFcaCntlrRedundancyType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("fwActiveStandby", 3), ("fwPrimarySecondary", 4), ("fwActiveActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrRedundancyType.setStatus('mandatory')
cpqFcaCntlrRedundancyError = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("other", 1), ("noFailure", 2), ("noRedundantController", 3), ("differentHardware", 4), ("noLink", 5), ("differentFirmware", 6), ("differentCache", 7), ("otherCacheFailure", 8), ("noDrives", 9), ("otherNoDrives", 10), ("unsupportedDrives", 11), ("expandInProgress", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrRedundancyError.setStatus('mandatory')
cpqFcaCntlrBlinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqFcaCntlrBlinkTime.setStatus('mandatory')
cpqFcaCntlrWorldWideNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrWorldWideNodeName.setStatus('mandatory')
cpqFcaCntlrRebuildPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrRebuildPriority.setStatus('mandatory')
cpqFcaCntlrExpandPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaCntlrExpandPriority.setStatus('mandatory')
cpqFcaAccelTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2), )
if mibBuilder.loadTexts: cpqFcaAccelTable.setStatus('mandatory')
cpqFcaAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcaAccelBoxIndex"), (0, "CPQFCA-MIB", "cpqFcaAccelBoxIoSlot"))
if mibBuilder.loadTexts: cpqFcaAccelEntry.setStatus('mandatory')
cpqFcaAccelBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelBoxIndex.setStatus('mandatory')
cpqFcaAccelBoxIoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelBoxIoSlot.setStatus('mandatory')
cpqFcaAccelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("enabled", 3), ("tmpDisabled", 4), ("permDisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelStatus.setStatus('mandatory')
cpqFcaAccelBadData = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("possible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelBadData.setStatus('mandatory')
cpqFcaAccelErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19)).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("badConfig", 3), ("lowBattery", 4), ("disableCmd", 5), ("noResources", 6), ("notConnected", 7), ("badMirrorData", 8), ("readErr", 9), ("writeErr", 10), ("configCmd", 11), ("expandInProgress", 12), ("snapshotInProgress", 13), ("redundantLowBattery", 14), ("redundantSizeMismatch", 15), ("redundantCacheFailure", 16), ("excessiveEccErrors", 17), ("postEccErrors", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelErrCode.setStatus('mandatory')
cpqFcaAccelBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("recharging", 3), ("failed", 4), ("degraded", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelBatteryStatus.setStatus('mandatory')
cpqFcaAccelReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelReadErrs.setStatus('mandatory')
cpqFcaAccelWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelWriteErrs.setStatus('mandatory')
cpqFcaAccelCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelCondition.setStatus('mandatory')
cpqFcaAccelWriteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelWriteCache.setStatus('mandatory')
cpqFcaAccelReadCache = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelReadCache.setStatus('mandatory')
cpqFcaAccelSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelSerialNumber.setStatus('mandatory')
cpqFcaAccelTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelTotalMemory.setStatus('mandatory')
cpqFcaAccelFailedBatteries = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaAccelFailedBatteries.setStatus('mandatory')
cpqFcaLogDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1), )
if mibBuilder.loadTexts: cpqFcaLogDrvTable.setStatus('mandatory')
cpqFcaLogDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcaLogDrvBoxIndex"), (0, "CPQFCA-MIB", "cpqFcaLogDrvIndex"))
if mibBuilder.loadTexts: cpqFcaLogDrvEntry.setStatus('mandatory')
cpqFcaLogDrvBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvBoxIndex.setStatus('mandatory')
cpqFcaLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvIndex.setStatus('mandatory')
cpqFcaLogDrvFaultTol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("mirroring", 3), ("dataGuard", 4), ("distribDataGuard", 5), ("advancedDataGuard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvFaultTol.setStatus('mandatory')
cpqFcaLogDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("unconfigured", 4), ("recovering", 5), ("readyForRebuild", 6), ("rebuilding", 7), ("wrongDrive", 8), ("badConnect", 9), ("overheating", 10), ("shutdown", 11), ("expanding", 12), ("notAvailable", 13), ("queuedForExpansion", 14), ("hardError", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvStatus.setStatus('mandatory')
cpqFcaLogDrvAutoRel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvAutoRel.setStatus('mandatory')
cpqFcaLogDrvPercentRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvPercentRebuild.setStatus('mandatory')
cpqFcaLogDrvHasAccel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("unavailable", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvHasAccel.setStatus('mandatory')
cpqFcaLogDrvAvailSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvAvailSpares.setStatus('mandatory')
cpqFcaLogDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvSize.setStatus('mandatory')
cpqFcaLogDrvPhyDrvIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvPhyDrvIDs.setStatus('mandatory')
cpqFcaLogDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvCondition.setStatus('mandatory')
cpqFcaLogDrvStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvStripeSize.setStatus('mandatory')
cpqFcaLogDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvOsName.setStatus('mandatory')
cpqFcaLogDrvBlinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqFcaLogDrvBlinkTime.setStatus('mandatory')
cpqFcaLogDrvSpareReplaceMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvSpareReplaceMap.setStatus('mandatory')
cpqFcaLogDrvRebuildingPhyDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvRebuildingPhyDrv.setStatus('mandatory')
cpqFcaLogDrvSnapshotResourceDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvSnapshotResourceDrvIndex.setStatus('mandatory')
cpqFcaLogDrvSnapshotSourceDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvSnapshotSourceDrvIndex.setStatus('mandatory')
cpqFcaLogDrvPreferredPath = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvPreferredPath.setStatus('mandatory')
cpqFcaLogDrvCurrentPath = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaLogDrvCurrentPath.setStatus('mandatory')
cpqFcaSpareTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1), )
if mibBuilder.loadTexts: cpqFcaSpareTable.setStatus('mandatory')
cpqFcaSpareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcaSpareBoxIndex"), (0, "CPQFCA-MIB", "cpqFcaSparePhyDrvIndex"))
if mibBuilder.loadTexts: cpqFcaSpareEntry.setStatus('mandatory')
cpqFcaSpareBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSpareBoxIndex.setStatus('mandatory')
cpqFcaSparePhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSparePhyDrvIndex.setStatus('mandatory')
cpqFcaSpareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("failed", 3), ("building", 4), ("active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSpareStatus.setStatus('mandatory')
cpqFcaSpareReplacedDrvBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSpareReplacedDrvBay.setStatus('mandatory')
cpqFcaSparePercentRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSparePercentRebuild.setStatus('mandatory')
cpqFcaSpareCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSpareCondition.setStatus('mandatory')
cpqFcaSpareBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSpareBusNumber.setStatus('mandatory')
cpqFcaSpareBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSpareBay.setStatus('mandatory')
cpqFcaSpareReplacedDrvBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSpareReplacedDrvBusNumber.setStatus('mandatory')
cpqFcaSpareLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaSpareLocationString.setStatus('mandatory')
cpqFcaPhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1), )
if mibBuilder.loadTexts: cpqFcaPhyDrvTable.setStatus('mandatory')
cpqFcaPhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcaPhyDrvBoxIndex"), (0, "CPQFCA-MIB", "cpqFcaPhyDrvIndex"))
if mibBuilder.loadTexts: cpqFcaPhyDrvEntry.setStatus('mandatory')
cpqFcaPhyDrvBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvBoxIndex.setStatus('mandatory')
cpqFcaPhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvIndex.setStatus('mandatory')
cpqFcaPhyDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvModel.setStatus('mandatory')
cpqFcaPhyDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvFWRev.setStatus('mandatory')
cpqFcaPhyDrvBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvBay.setStatus('mandatory')
cpqFcaPhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("other", 1), ("unconfigured", 2), ("ok", 3), ("threshExceeded", 4), ("predictiveFailure", 5), ("failed", 6), ("unsupportedDrive", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvStatus.setStatus('mandatory')
cpqFcaPhyDrvUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvUsedReallocs.setStatus('mandatory')
cpqFcaPhyDrvRefHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvRefHours.setStatus('mandatory')
cpqFcaPhyDrvHReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHReads.setStatus('mandatory')
cpqFcaPhyDrvReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvReads.setStatus('mandatory')
cpqFcaPhyDrvHWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHWrites.setStatus('mandatory')
cpqFcaPhyDrvWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvWrites.setStatus('mandatory')
cpqFcaPhyDrvHSeeks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHSeeks.setStatus('mandatory')
cpqFcaPhyDrvSeeks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvSeeks.setStatus('mandatory')
cpqFcaPhyDrvHardReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHardReadErrs.setStatus('mandatory')
cpqFcaPhyDrvRecvReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvRecvReadErrs.setStatus('mandatory')
cpqFcaPhyDrvHardWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHardWriteErrs.setStatus('mandatory')
cpqFcaPhyDrvRecvWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvRecvWriteErrs.setStatus('mandatory')
cpqFcaPhyDrvHSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHSeekErrs.setStatus('mandatory')
cpqFcaPhyDrvSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvSeekErrs.setStatus('mandatory')
cpqFcaPhyDrvSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvSpinupTime.setStatus('mandatory')
cpqFcaPhyDrvFunctTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvFunctTest1.setStatus('deprecated')
cpqFcaPhyDrvFunctTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvFunctTest2.setStatus('deprecated')
cpqFcaPhyDrvFunctTest3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvFunctTest3.setStatus('deprecated')
cpqFcaPhyDrvOtherTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvOtherTimeouts.setStatus('mandatory')
cpqFcaPhyDrvBadRecvReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvBadRecvReads.setStatus('mandatory')
cpqFcaPhyDrvBadRecvWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvBadRecvWrites.setStatus('mandatory')
cpqFcaPhyDrvFormatErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvFormatErrs.setStatus('mandatory')
cpqFcaPhyDrvNotReadyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvNotReadyErrs.setStatus('mandatory')
cpqFcaPhyDrvHasMonInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHasMonInfo.setStatus('mandatory')
cpqFcaPhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvCondition.setStatus('mandatory')
cpqFcaPhyDrvHotPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHotPlugs.setStatus('mandatory')
cpqFcaPhyDrvMediaErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvMediaErrs.setStatus('mandatory')
cpqFcaPhyDrvHardwareErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHardwareErrs.setStatus('mandatory')
cpqFcaPhyDrvAbortedCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvAbortedCmds.setStatus('mandatory')
cpqFcaPhyDrvSpinUpErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvSpinUpErrs.setStatus('mandatory')
cpqFcaPhyDrvBadTargetErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvBadTargetErrs.setStatus('mandatory')
cpqFcaPhyDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvSize.setStatus('mandatory')
cpqFcaPhyDrvBusFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvBusFaults.setStatus('mandatory')
cpqFcaPhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvHotPlug.setStatus('mandatory')
cpqFcaPhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 41), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvPlacement.setStatus('mandatory')
cpqFcaPhyDrvBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvBusNumber.setStatus('mandatory')
cpqFcaPhyDrvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvSerialNum.setStatus('mandatory')
cpqFcaPhyDrvPreFailMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 44), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("notAvailable", 2), ("available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvPreFailMonitoring.setStatus('mandatory')
cpqFcaPhyDrvCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 45), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvCurrentWidth.setStatus('mandatory')
cpqFcaPhyDrvCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 46), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6), ("ultra320", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvCurrentSpeed.setStatus('mandatory')
cpqFcaPhyDrvFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvFailureCode.setStatus('mandatory')
cpqFcaPhyDrvBlinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 48), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqFcaPhyDrvBlinkTime.setStatus('mandatory')
cpqFcaPhyDrvSmartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 49), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("replaceDrive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvSmartStatus.setStatus('mandatory')
cpqFcaPhyDrvRotationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 50), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("rpm7200", 2), ("rpm10K", 3), ("rpm15K", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvRotationalSpeed.setStatus('mandatory')
cpqFcaPhyDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 51), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("parallelScsi", 2), ("sata", 3), ("sas", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvType.setStatus('mandatory')
cpqFcaPhyDrvSataVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 52), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("sataOne", 2), ("sataTwo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvSataVersion.setStatus('mandatory')
cpqFcaPhyDrvBoxConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvBoxConnector.setStatus('mandatory')
cpqFcaPhyDrvBoxOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvBoxOnConnector.setStatus('mandatory')
cpqFcaPhyDrvLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvLocationString.setStatus('mandatory')
cpqFcaPhyDrvNegotiatedLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 56), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("rate-1-5", 2), ("rate-3-0", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvNegotiatedLinkRate.setStatus('mandatory')
cpqFcaPhyDrvPhyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvPhyCount.setStatus('mandatory')
cpqFcaPhyDrvUnsupportedDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 5, 1, 1, 58), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("supported", 2), ("unsupported-SinglePorted", 3), ("unsupported-SATA", 4), ("unsupported-TooSmall", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvUnsupportedDrive.setStatus('mandatory')
cpqFcaPhyDrvThrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1), )
if mibBuilder.loadTexts: cpqFcaPhyDrvThrTable.setStatus('mandatory')
cpqFcaPhyDrvThrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcaPhyDrvThrBoxIndex"), (0, "CPQFCA-MIB", "cpqFcaPhyDrvThrIndex"))
if mibBuilder.loadTexts: cpqFcaPhyDrvThrEntry.setStatus('mandatory')
cpqFcaPhyDrvThrBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrBoxIndex.setStatus('mandatory')
cpqFcaPhyDrvThrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrIndex.setStatus('mandatory')
cpqFcaPhyDrvThrUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrUsedReallocs.setStatus('mandatory')
cpqFcaPhyDrvThrSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrSpinupTime.setStatus('mandatory')
cpqFcaPhyDrvThrFunctTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrFunctTest1.setStatus('deprecated')
cpqFcaPhyDrvThrFunctTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrFunctTest2.setStatus('deprecated')
cpqFcaPhyDrvThrFunctTest3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrFunctTest3.setStatus('deprecated')
cpqFcaPhyDrvThrViUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrViUsedReallocs.setStatus('mandatory')
cpqFcaPhyDrvThrViSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrViSpinupTime.setStatus('mandatory')
cpqFcaPhyDrvThrViFunctTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrViFunctTest1.setStatus('mandatory')
cpqFcaPhyDrvThrViFunctTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrViFunctTest2.setStatus('mandatory')
cpqFcaPhyDrvThrViFunctTest3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaPhyDrvThrViFunctTest3.setStatus('mandatory')
cpqFcaHostCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1), )
if mibBuilder.loadTexts: cpqFcaHostCntlrTable.setStatus('mandatory')
cpqFcaHostCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcaHostCntlrIndex"))
if mibBuilder.loadTexts: cpqFcaHostCntlrEntry.setStatus('mandatory')
cpqFcaHostCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrIndex.setStatus('mandatory')
cpqFcaHostCntlrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrSlot.setStatus('mandatory')
cpqFcaHostCntlrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36)).clone(namedValues=NamedValues(("other", 1), ("fchc-p", 2), ("fchc-e", 3), ("fchc64", 4), ("sa-sam", 5), ("fca-2101", 6), ("sw64-33", 7), ("fca-221x", 8), ("dpfcmc", 9), ("fca-2404", 10), ("fca-2214", 11), ("a7298a", 12), ("fca-2214dc", 13), ("a6826a", 14), ("fcmcG3", 15), ("fcmcG4", 16), ("ab46xa", 17), ("fc-generic", 18), ("fca-1143", 19), ("fca-1243", 20), ("fca-2143", 21), ("fca-2243", 22), ("fca-1050", 23), ("fca-lpe1105", 24), ("fca-qmh2462", 25), ("fca-1142sr", 26), ("fca-1242sr", 27), ("fca-2142sr", 28), ("fca-2242sr", 29), ("fcmc20pe", 30), ("fca-81q", 31), ("fca-82q", 32), ("fca-qmh2562", 33), ("fca-81e", 34), ("fca-82e", 35), ("fca-1205", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrModel.setStatus('mandatory')
cpqFcaHostCntlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("shutdown", 4), ("loopDegraded", 5), ("loopFailed", 6), ("notConnected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrStatus.setStatus('mandatory')
cpqFcaHostCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrCondition.setStatus('mandatory')
cpqFcaHostCntlrWorldWideName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrWorldWideName.setStatus('mandatory')
cpqFcaHostCntlrStorBoxList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrStorBoxList.setStatus('mandatory')
cpqFcaHostCntlrOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrOverallCondition.setStatus('mandatory')
cpqFcaHostCntlrTapeCntlrList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrTapeCntlrList.setStatus('mandatory')
cpqFcaHostCntlrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrSerialNumber.setStatus('mandatory')
cpqFcaHostCntlrHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrHwLocation.setStatus('optional')
cpqFcaHostCntlrWorldWidePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrWorldWidePortName.setStatus('mandatory')
cpqFcaHostCntlrFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrFirmwareVersion.setStatus('mandatory')
cpqFcaHostCntlrOptionRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 7, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcaHostCntlrOptionRomVersion.setStatus('mandatory')
cpqExtArrRsrcVolTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1), )
if mibBuilder.loadTexts: cpqExtArrRsrcVolTable.setStatus('mandatory')
cpqExtArrRsrcVolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqExtArrRsrcVolBoxIndex"), (0, "CPQFCA-MIB", "cpqExtArrRsrcVolIndex"))
if mibBuilder.loadTexts: cpqExtArrRsrcVolEntry.setStatus('mandatory')
cpqExtArrRsrcVolBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolBoxIndex.setStatus('mandatory')
cpqExtArrRsrcVolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolIndex.setStatus('mandatory')
cpqExtArrRsrcVolActiveInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolActiveInstances.setStatus('mandatory')
cpqExtArrRsrcVolDisabledInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolDisabledInstances.setStatus('mandatory')
cpqExtArrRsrcVolAllowCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("allowed", 2), ("notAllowed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolAllowCreation.setStatus('mandatory')
cpqExtArrRsrcVolVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolVolumeId.setStatus('mandatory')
cpqExtArrRsrcVolSourceVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolSourceVolumeId.setStatus('mandatory')
cpqExtArrRsrcVolTotalSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolTotalSpace.setStatus('mandatory')
cpqExtArrRsrcVolFreeActiveSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolFreeActiveSpace.setStatus('mandatory')
cpqExtArrRsrcVolFreeNewSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolFreeNewSpace.setStatus('mandatory')
cpqExtArrRsrcVolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("unknownFailure", 3), ("resourceVolDisconnected", 4), ("sourceVolNotLocated", 5), ("resourceVolNotLocated", 6), ("sourceVolFailed", 7), ("resourceVolFailed", 8), ("sourceVolNotAvail", 9), ("resourceVolNotAvail", 10), ("resourceVolObsolete", 11), ("resourceVolObsoleteFailed", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrRsrcVolStatus.setStatus('mandatory')
cpqExtArrSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1), )
if mibBuilder.loadTexts: cpqExtArrSnapshotTable.setStatus('mandatory')
cpqExtArrSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqExtArrSnapshotBoxIndex"), (0, "CPQFCA-MIB", "cpqExtArrSnapshotRsrcVolIndex"), (0, "CPQFCA-MIB", "cpqExtArrSnapshotIndex"))
if mibBuilder.loadTexts: cpqExtArrSnapshotEntry.setStatus('mandatory')
cpqExtArrSnapshotBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrSnapshotBoxIndex.setStatus('mandatory')
cpqExtArrSnapshotRsrcVolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrSnapshotRsrcVolIndex.setStatus('mandatory')
cpqExtArrSnapshotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrSnapshotIndex.setStatus('mandatory')
cpqExtArrSnapshotInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrSnapshotInstance.setStatus('mandatory')
cpqExtArrSnapshotUsedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrSnapshotUsedSpace.setStatus('mandatory')
cpqExtArrSnapshotDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrSnapshotDateTime.setStatus('deprecated')
cpqExtArrSnapshotType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("other", 1), ("cow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrSnapshotType.setStatus('mandatory')
cpqExtArrSnapshotMounted = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("mounted", 2), ("notMounted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrSnapshotMounted.setStatus('mandatory')
cpqExtArrSnapshotAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 2, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("readWrite", 2), ("readOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqExtArrSnapshotAccess.setStatus('mandatory')
cpqFcTapeCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1), )
if mibBuilder.loadTexts: cpqFcTapeCntlrTable.setStatus('mandatory')
cpqFcTapeCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcTapeCntlrIndex"))
if mibBuilder.loadTexts: cpqFcTapeCntlrEntry.setStatus('mandatory')
cpqFcTapeCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCntlrIndex.setStatus('mandatory')
cpqFcTapeCntlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCntlrStatus.setStatus('mandatory')
cpqFcTapeCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCntlrCondition.setStatus('mandatory')
cpqFcTapeCntlrOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCntlrOverallCondition.setStatus('mandatory')
cpqFcTapeCntlrWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCntlrWWN.setStatus('mandatory')
cpqFcTapeCntlrFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCntlrFWRev.setStatus('mandatory')
cpqFcTapeCntlrType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("fiberTape", 2), ("modularDataRouter", 3), ("extended", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCntlrType.setStatus('mandatory')
cpqFcTapeCntlrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCntlrModel.setStatus('mandatory')
cpqFcTapeCntlrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCntlrSerialNumber.setStatus('mandatory')
cpqFcTapeLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1), )
if mibBuilder.loadTexts: cpqFcTapeLibraryTable.setStatus('mandatory')
cpqFcTapeLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcTapeLibraryCntlrIndex"), (0, "CPQFCA-MIB", "cpqFcTapeLibraryScsiBus"), (0, "CPQFCA-MIB", "cpqFcTapeLibraryScsiTarget"), (0, "CPQFCA-MIB", "cpqFcTapeLibraryScsiLun"))
if mibBuilder.loadTexts: cpqFcTapeLibraryEntry.setStatus('mandatory')
cpqFcTapeLibraryCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryCntlrIndex.setStatus('mandatory')
cpqFcTapeLibraryScsiBus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryScsiBus.setStatus('mandatory')
cpqFcTapeLibraryScsiTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryScsiTarget.setStatus('mandatory')
cpqFcTapeLibraryScsiLun = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryScsiLun.setStatus('mandatory')
cpqFcTapeLibrarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibrarySerialNumber.setStatus('mandatory')
cpqFcTapeLibraryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryModel.setStatus('mandatory')
cpqFcTapeLibraryFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryFWRev.setStatus('mandatory')
cpqFcTapeLibraryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("offline", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryStatus.setStatus('mandatory')
cpqFcTapeLibraryDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("closed", 3), ("open", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryDoorStatus.setStatus('mandatory')
cpqFcTapeLibraryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryCondition.setStatus('mandatory')
cpqFcTapeLibraryOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryOverallCondition.setStatus('mandatory')
cpqFcTapeLibraryLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryLastError.setStatus('mandatory')
cpqFcTapeLibraryStatHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryStatHours.setStatus('mandatory')
cpqFcTapeLibraryStatMoves = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryStatMoves.setStatus('mandatory')
cpqFcTapeLibraryDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryDriveList.setStatus('mandatory')
cpqFcTapeLibraryLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryLocation.setStatus('mandatory')
cpqFcTapeLibraryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("ok", 3), ("safeTempExceeded", 4), ("maxTempExceeded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryTemperature.setStatus('mandatory')
cpqFcTapeLibraryRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("capable", 3), ("notCapable", 4), ("active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryRedundancy.setStatus('mandatory')
cpqFcTapeLibraryHotSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("capable", 3), ("notCapable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeLibraryHotSwap.setStatus('mandatory')
cpqFcTapeDriveTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1), )
if mibBuilder.loadTexts: cpqFcTapeDriveTable.setStatus('mandatory')
cpqFcTapeDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcTapeDriveCntlrIndex"), (0, "CPQFCA-MIB", "cpqFcTapeDriveScsiBus"), (0, "CPQFCA-MIB", "cpqFcTapeDriveScsiTarget"), (0, "CPQFCA-MIB", "cpqFcTapeDriveScsiLun"))
if mibBuilder.loadTexts: cpqFcTapeDriveEntry.setStatus('mandatory')
cpqFcTapeDriveCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveCntlrIndex.setStatus('mandatory')
cpqFcTapeDriveScsiBus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveScsiBus.setStatus('mandatory')
cpqFcTapeDriveScsiTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveScsiTarget.setStatus('mandatory')
cpqFcTapeDriveScsiLun = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveScsiLun.setStatus('mandatory')
cpqFcTapeDriveSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveSerialNumber.setStatus('mandatory')
cpqFcTapeDriveModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveModel.setStatus('mandatory')
cpqFcTapeDriveFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveFWRev.setStatus('mandatory')
cpqFcTapeDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("other", 1), ("cpqDlt35-70", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveType.setStatus('deprecated')
cpqFcTapeDriveFWSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveFWSubtype.setStatus('mandatory')
cpqFcTapeDriveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("offline", 5), ("missingWasOk", 6), ("missingWasOffline", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveStatus.setStatus('mandatory')
cpqFcTapeDriveCleanReq = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveCleanReq.setStatus('mandatory')
cpqFcTapeDriveCleanTapeRepl = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveCleanTapeRepl.setStatus('mandatory')
cpqFcTapeDriveCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveCondition.setStatus('mandatory')
cpqFcTapeDriveCleanTapeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveCleanTapeCount.setStatus('mandatory')
cpqFcTapeDriveLibraryDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveLibraryDrive.setStatus('mandatory')
cpqFcTapeDriveLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveLocation.setStatus('mandatory')
cpqFcTapeDriveHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveHotPlug.setStatus('mandatory')
cpqFcTapeDriveBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveBay.setStatus('mandatory')
cpqFcTapeDriveCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveCurrentWidth.setStatus('mandatory')
cpqFcTapeDriveCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeDriveCurrentSpeed.setStatus('mandatory')
cpqFcTapeCountersTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1), )
if mibBuilder.loadTexts: cpqFcTapeCountersTable.setStatus('mandatory')
cpqFcTapeCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcTapeCountersCntlrIndex"), (0, "CPQFCA-MIB", "cpqFcTapeCountersScsiBus"), (0, "CPQFCA-MIB", "cpqFcTapeCountersScsiTarget"), (0, "CPQFCA-MIB", "cpqFcTapeCountersScsiLun"))
if mibBuilder.loadTexts: cpqFcTapeCountersEntry.setStatus('mandatory')
cpqFcTapeCountersCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCountersCntlrIndex.setStatus('mandatory')
cpqFcTapeCountersScsiBus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCountersScsiBus.setStatus('mandatory')
cpqFcTapeCountersScsiTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCountersScsiTarget.setStatus('mandatory')
cpqFcTapeCountersScsiLun = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCountersScsiLun.setStatus('mandatory')
cpqFcTapeCountersReWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCountersReWrites.setStatus('mandatory')
cpqFcTapeCountersReReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCountersReReads.setStatus('mandatory')
cpqFcTapeCountersTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCountersTotalErrors.setStatus('mandatory')
cpqFcTapeCountersTotalUncorrectable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCountersTotalUncorrectable.setStatus('mandatory')
cpqFcTapeCountersTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 3, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcTapeCountersTotalBytes.setStatus('mandatory')
cpqFcSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1), )
if mibBuilder.loadTexts: cpqFcSwitchTable.setStatus('mandatory')
cpqFcSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1), ).setIndexNames((0, "CPQFCA-MIB", "cpqFcSwitchIndex"))
if mibBuilder.loadTexts: cpqFcSwitchEntry.setStatus('mandatory')
cpqFcSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchIndex.setStatus('mandatory')
cpqFcSwitchLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchLocation.setStatus('mandatory')
cpqFcSwitchChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchChassisIndex.setStatus('mandatory')
cpqFcSwitchChassisSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchChassisSlot.setStatus('mandatory')
cpqFcSwitchWorldWideNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchWorldWideNodeName.setStatus('mandatory')
cpqFcSwitchWorldWidePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchWorldWidePortName.setStatus('mandatory')
cpqFcSwitchIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchIpAddress.setStatus('mandatory')
cpqFcSwitchIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchIpGateway.setStatus('mandatory')
cpqFcSwitchIpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchIpSubnet.setStatus('mandatory')
cpqFcSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchName.setStatus('mandatory')
cpqFcSwitchNetworkLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchNetworkLinkStatus.setStatus('mandatory')
cpqFcSwitchFibreConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchFibreConnectStatus.setStatus('mandatory')
cpqFcSwitchFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 16, 4, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqFcSwitchFWRev.setStatus('mandatory')
cpqFcaLogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaLogDrvIndex"), ("CPQFCA-MIB", "cpqFcaLogDrvStatus"))
cpqFcaSpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaSpareBusNumber"), ("CPQFCA-MIB", "cpqFcaSpareBay"), ("CPQFCA-MIB", "cpqFcaSpareStatus"))
cpqFcaPhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaPhyDrvBusNumber"), ("CPQFCA-MIB", "cpqFcaPhyDrvBay"), ("CPQFCA-MIB", "cpqFcaPhyDrvStatus"))
cpqFcaAccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaAccelBoxIoSlot"), ("CPQFCA-MIB", "cpqFcaAccelStatus"))
cpqFcaAccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaAccelBoxIoSlot"))
cpqFcaAccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaAccelBoxIoSlot"))
cpqFcaCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaCntlrBoxIoSlot"), ("CPQFCA-MIB", "cpqFcaCntlrStatus"))
cpqFcTapeCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeCntlrWWN"), ("CPQFCA-MIB", "cpqFcTapeCntlrStatus"))
cpqFcTapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeCntlrWWN"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiBus"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiLun"), ("CPQFCA-MIB", "cpqFcTapeLibraryStatus"))
cpqFcTapeLibraryDoorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeCntlrWWN"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiBus"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiLun"), ("CPQFCA-MIB", "cpqFcTapeLibraryDoorStatus"))
cpqFcTapeDriveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeCntlrWWN"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiBus"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiLun"), ("CPQFCA-MIB", "cpqFcTapeDriveStatus"))
cpqFcTapeDriveCleaningRequired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeCntlrWWN"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiBus"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiLun"))
cpqFcTapeDriveCleanTapeReplace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeCntlrWWN"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiBus"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiLun"))
cpqFcaCntlrActive = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaCntlrBoxIoSlot"))
cpqFcaHostCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcaHostCntlrSlot"), ("CPQFCA-MIB", "cpqFcaHostCntlrStatus"))
cpqFca2PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaPhyDrvBusNumber"), ("CPQFCA-MIB", "cpqFcaPhyDrvBay"), ("CPQFCA-MIB", "cpqFcaPhyDrvStatus"), ("CPQFCA-MIB", "cpqFcaPhyDrvModel"), ("CPQFCA-MIB", "cpqFcaPhyDrvSerialNum"), ("CPQFCA-MIB", "cpqFcaPhyDrvFWRev"), ("CPQFCA-MIB", "cpqFcaPhyDrvFailureCode"))
cpqFca2AccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaAccelBoxIoSlot"), ("CPQFCA-MIB", "cpqFcaAccelStatus"), ("CPQFCA-MIB", "cpqFcaCntlrModel"), ("CPQFCA-MIB", "cpqFcaAccelSerialNumber"), ("CPQFCA-MIB", "cpqFcaAccelTotalMemory"), ("CPQFCA-MIB", "cpqFcaAccelErrCode"))
cpqFca2AccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaAccelBoxIoSlot"), ("CPQFCA-MIB", "cpqFcaCntlrModel"), ("CPQFCA-MIB", "cpqFcaAccelSerialNumber"), ("CPQFCA-MIB", "cpqFcaAccelTotalMemory"))
cpqFca2AccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaAccelBoxIoSlot"), ("CPQFCA-MIB", "cpqFcaCntlrModel"), ("CPQFCA-MIB", "cpqFcaAccelSerialNumber"), ("CPQFCA-MIB", "cpqFcaAccelTotalMemory"))
cpqFca2CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaCntlrBoxIoSlot"), ("CPQFCA-MIB", "cpqFcaCntlrStatus"), ("CPQFCA-MIB", "cpqFcaCntlrModel"), ("CPQFCA-MIB", "cpqFcaCntlrSerialNumber"), ("CPQFCA-MIB", "cpqFcaAccelTotalMemory"))
cpqFca2HostCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcaHostCntlrSlot"), ("CPQFCA-MIB", "cpqFcaHostCntlrStatus"), ("CPQFCA-MIB", "cpqFcaHostCntlrModel"), ("CPQFCA-MIB", "cpqFcaHostCntlrWorldWideName"))
cpqExtArrayLogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16022)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQFCA-MIB", "cpqFcaLogDrvBoxIndex"), ("CPQFCA-MIB", "cpqFcaLogDrvIndex"), ("CPQFCA-MIB", "cpqFcaLogDrvStatus"), ("CPQFCA-MIB", "cpqFcaLogDrvOsName"), ("CPQFCA-MIB", "cpqFcaLogDrvFaultTol"), ("CPQFCA-MIB", "cpqFcaLogDrvSize"))
cpqExtTapeDriveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16023)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeDriveCntlrIndex"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiBus"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiLun"), ("CPQFCA-MIB", "cpqFcTapeDriveModel"), ("CPQFCA-MIB", "cpqFcTapeDriveFWRev"), ("CPQFCA-MIB", "cpqFcTapeDriveSerialNumber"), ("CPQFCA-MIB", "cpqFcTapeDriveLocation"), ("CPQFCA-MIB", "cpqFcTapeDriveStatus"))
cpqExtTapeDriveCleaningRequired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16024)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeDriveCntlrIndex"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiBus"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiLun"), ("CPQFCA-MIB", "cpqFcTapeDriveModel"), ("CPQFCA-MIB", "cpqFcTapeDriveFWRev"), ("CPQFCA-MIB", "cpqFcTapeDriveSerialNumber"), ("CPQFCA-MIB", "cpqFcTapeDriveLocation"))
cpqExtTapeDriveCleanTapeReplace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16025)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeDriveCntlrIndex"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiBus"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeDriveScsiLun"), ("CPQFCA-MIB", "cpqFcTapeDriveModel"), ("CPQFCA-MIB", "cpqFcTapeDriveFWRev"), ("CPQFCA-MIB", "cpqFcTapeDriveSerialNumber"), ("CPQFCA-MIB", "cpqFcTapeDriveLocation"))
cpqExtTapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16026)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeLibraryCntlrIndex"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiBus"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiLun"), ("CPQFCA-MIB", "cpqFcTapeLibraryModel"), ("CPQFCA-MIB", "cpqFcTapeLibraryFWRev"), ("CPQFCA-MIB", "cpqFcTapeLibrarySerialNumber"), ("CPQFCA-MIB", "cpqFcTapeLibraryLocation"), ("CPQFCA-MIB", "cpqFcTapeLibraryStatus"))
cpqExtTapeLibraryDoorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16027)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcTapeLibraryCntlrIndex"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiBus"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiTarget"), ("CPQFCA-MIB", "cpqFcTapeLibraryScsiLun"), ("CPQFCA-MIB", "cpqFcTapeLibraryModel"), ("CPQFCA-MIB", "cpqFcTapeLibraryFWRev"), ("CPQFCA-MIB", "cpqFcTapeLibrarySerialNumber"), ("CPQFCA-MIB", "cpqFcTapeLibraryLocation"), ("CPQFCA-MIB", "cpqFcTapeLibraryDoorStatus"))
cpqFca3HostCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,16028)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQFCA-MIB", "cpqFcaHostCntlrHwLocation"), ("CPQFCA-MIB", "cpqFcaHostCntlrIndex"), ("CPQFCA-MIB", "cpqFcaHostCntlrStatus"), ("CPQFCA-MIB", "cpqFcaHostCntlrModel"), ("CPQFCA-MIB", "cpqFcaHostCntlrSerialNumber"), ("CPQFCA-MIB", "cpqFcaHostCntlrWorldWideName"), ("CPQFCA-MIB", "cpqFcaHostCntlrWorldWidePortName"))
mibBuilder.exportSymbols("CPQFCA-MIB", cpqFcaSparePhyDrvIndex=cpqFcaSparePhyDrvIndex, cpqFcTapeCntlrTable=cpqFcTapeCntlrTable, cpqFcaPhyDrvThrBoxIndex=cpqFcaPhyDrvThrBoxIndex, cpqFcTapeLibraryLastError=cpqFcTapeLibraryLastError, cpqFcaPhyDrvRotationalSpeed=cpqFcaPhyDrvRotationalSpeed, cpqFcTapeCountersEntry=cpqFcTapeCountersEntry, cpqFcaPhyDrvHardReadErrs=cpqFcaPhyDrvHardReadErrs, cpqExtArrRsrcVolActiveInstances=cpqExtArrRsrcVolActiveInstances, cpqFcaPhyDrvBusFaults=cpqFcaPhyDrvBusFaults, cpqFcSwitchIpAddress=cpqFcSwitchIpAddress, cpqFcTapeLibraryEntry=cpqFcTapeLibraryEntry, cpqFca3HostCntlrStatusChange=cpqFca3HostCntlrStatusChange, cpqExtTapeDriveStatusChange=cpqExtTapeDriveStatusChange, cpqFcTapeDriveBay=cpqFcTapeDriveBay, cpqFcaCntlrCurrentRole=cpqFcaCntlrCurrentRole, cpqFcaHostCntlrTapeCntlrList=cpqFcaHostCntlrTapeCntlrList, cpqFcTapeCountersScsiTarget=cpqFcTapeCountersScsiTarget, cpqFcaCntlrRedundancyError=cpqFcaCntlrRedundancyError, cpqFca2HostCntlrStatusChange=cpqFca2HostCntlrStatusChange, cpqFcTapeDriveFWRev=cpqFcTapeDriveFWRev, cpqFcaCntlr=cpqFcaCntlr, cpqFcaPhyDrvFormatErrs=cpqFcaPhyDrvFormatErrs, cpqExtArrSnapshotUsedSpace=cpqExtArrSnapshotUsedSpace, cpqFcaHostCntlrStorBoxList=cpqFcaHostCntlrStorBoxList, cpqFcaOsCommonModulePurpose=cpqFcaOsCommonModulePurpose, cpqFcTapeCntlrFWRev=cpqFcTapeCntlrFWRev, cpqFcTapeDriveFWSubtype=cpqFcTapeDriveFWSubtype, cpqFcaAccelErrCode=cpqFcaAccelErrCode, cpqFcaPhyDrvCondition=cpqFcaPhyDrvCondition, cpqExtArrRsrcVolVolumeId=cpqExtArrRsrcVolVolumeId, cpqFcaAccelStatusChange=cpqFcaAccelStatusChange, cpqFcaOsCommonModuleVersion=cpqFcaOsCommonModuleVersion, cpqFcaCntlrRedundancyType=cpqFcaCntlrRedundancyType, cpqFcTapeDriveHotPlug=cpqFcTapeDriveHotPlug, cpqFcTapeLibraryStatMoves=cpqFcTapeLibraryStatMoves, cpqExtArrSnapshotTable=cpqExtArrSnapshotTable, cpqFcaPhyDrvBadRecvReads=cpqFcaPhyDrvBadRecvReads, cpqFcSwitch=cpqFcSwitch, cpqExtArrRsrcVolBoxIndex=cpqExtArrRsrcVolBoxIndex, cpqFcaSpareDrv=cpqFcaSpareDrv, cpqFcaAccelReadCache=cpqFcaAccelReadCache, cpqFcaPhyDrvHardwareErrs=cpqFcaPhyDrvHardwareErrs, cpqFcTapeCntlrModel=cpqFcTapeCntlrModel, cpqFcaLogDrvSnapshotResourceDrvIndex=cpqFcaLogDrvSnapshotResourceDrvIndex, cpqExtTapeDriveCleaningRequired=cpqExtTapeDriveCleaningRequired, cpqFcaHostCntlrWorldWidePortName=cpqFcaHostCntlrWorldWidePortName, cpqFcaAccelCondition=cpqFcaAccelCondition, cpqFcTapeCountersTotalUncorrectable=cpqFcTapeCountersTotalUncorrectable, cpqFcaPhyDrvReads=cpqFcaPhyDrvReads, cpqFcTapeDriveScsiLun=cpqFcTapeDriveScsiLun, cpqFcaPhyDrvThrTable=cpqFcaPhyDrvThrTable, cpqFcaPhyDrvBay=cpqFcaPhyDrvBay, cpqFcaPhyDrvThr=cpqFcaPhyDrvThr, cpqFcaPhyDrvThrFunctTest3=cpqFcaPhyDrvThrFunctTest3, cpqFcaCntlrTable=cpqFcaCntlrTable, cpqFcaPhyDrvHotPlug=cpqFcaPhyDrvHotPlug, cpqFcaPhyDrvSerialNum=cpqFcaPhyDrvSerialNum, cpqFcTapeDriveEntry=cpqFcTapeDriveEntry, cpqExtArrSnapshotMounted=cpqExtArrSnapshotMounted, cpqFcaPhyDrvHardWriteErrs=cpqFcaPhyDrvHardWriteErrs, cpqFcTapeCounters=cpqFcTapeCounters, cpqFcTapeLibraryDriveList=cpqFcTapeLibraryDriveList, cpqFcaCntlrWorldWideName=cpqFcaCntlrWorldWideName, cpqFcTapeDriveCondition=cpqFcTapeDriveCondition, cpqFcaAccelWriteErrs=cpqFcaAccelWriteErrs, cpqExtArrRsrcVolSourceVolumeId=cpqExtArrRsrcVolSourceVolumeId, cpqFcaCntlrStatus=cpqFcaCntlrStatus, cpqFcaCntlrModel=cpqFcaCntlrModel, cpqFcaHostCntlrSlot=cpqFcaHostCntlrSlot, cpqFcTapeCountersReReads=cpqFcTapeCountersReReads, cpqFcaPhyDrvBlinkTime=cpqFcaPhyDrvBlinkTime, cpqFcaAccelReadErrs=cpqFcaAccelReadErrs, cpqFcaPhyDrvThrViFunctTest2=cpqFcaPhyDrvThrViFunctTest2, cpqFcTapeDriveCntlrIndex=cpqFcTapeDriveCntlrIndex, cpqExtArrRsrcVolStatus=cpqExtArrRsrcVolStatus, cpqExtArrSnapshotAccess=cpqExtArrSnapshotAccess, cpqFcTapeDriveStatus=cpqFcTapeDriveStatus, cpqFcaPhyDrvSize=cpqFcaPhyDrvSize, cpqFcaPhyDrvUsedReallocs=cpqFcaPhyDrvUsedReallocs, cpqFcaOsCommonPollFreq=cpqFcaOsCommonPollFreq, cpqFcaPhyDrvRecvWriteErrs=cpqFcaPhyDrvRecvWriteErrs, cpqFcSwitchIndex=cpqFcSwitchIndex, cpqFcSwitchLocation=cpqFcSwitchLocation, cpqFcTapeLibrarySerialNumber=cpqFcTapeLibrarySerialNumber, cpqFcaMibRev=cpqFcaMibRev, cpqFcaLogDrvAutoRel=cpqFcaLogDrvAutoRel, cpqFcTapeLibrary=cpqFcTapeLibrary, cpqFcaPhyDrvThrSpinupTime=cpqFcaPhyDrvThrSpinupTime, cpqExtArrSnapshotInstance=cpqExtArrSnapshotInstance, cpqExtArrRsrcVol=cpqExtArrRsrcVol, cpqFcTapeCountersTotalErrors=cpqFcTapeCountersTotalErrors, cpqFcaPhyDrvHReads=cpqFcaPhyDrvHReads, cpqFcaSparePercentRebuild=cpqFcaSparePercentRebuild, cpqFcaLogDrvHasAccel=cpqFcaLogDrvHasAccel, cpqFcSwitchFibreConnectStatus=cpqFcSwitchFibreConnectStatus, cpqFcaPhyDrvSpinupTime=cpqFcaPhyDrvSpinupTime, cpqFcTapeLibraryDoorStatusChange=cpqFcTapeLibraryDoorStatusChange, cpqFcaCntlrExpandPriority=cpqFcaCntlrExpandPriority, cpqFcaPhyDrvThrIndex=cpqFcaPhyDrvThrIndex, cpqFcaAccelBoxIoSlot=cpqFcaAccelBoxIoSlot, cpqFcaCntlrCondition=cpqFcaCntlrCondition, cpqFcaPhyDrvThrViUsedReallocs=cpqFcaPhyDrvThrViUsedReallocs, cpqFcaAccelWriteCache=cpqFcaAccelWriteCache, cpqFcaOsCommon=cpqFcaOsCommon, cpqFcTapeLibraryModel=cpqFcTapeLibraryModel, cpqFcaLogDrvStatus=cpqFcaLogDrvStatus, cpqFcaCntlrProductRev=cpqFcaCntlrProductRev, cpqFcaLogDrvSize=cpqFcaLogDrvSize, cpqFcTapeDriveSerialNumber=cpqFcTapeDriveSerialNumber, cpqFcaPhyDrvBoxOnConnector=cpqFcaPhyDrvBoxOnConnector, cpqFcTapeCntlrStatus=cpqFcTapeCntlrStatus, cpqFcTapeDrive=cpqFcTapeDrive, cpqFibreArray=cpqFibreArray, cpqFcSwitchComponent=cpqFcSwitchComponent, cpqFcaAccelEntry=cpqFcaAccelEntry, cpqFcTapeDriveType=cpqFcTapeDriveType, cpqFcSwitchName=cpqFcSwitchName, cpqFcaLogDrvCondition=cpqFcaLogDrvCondition, cpqFcaHostCntlr=cpqFcaHostCntlr, cpqFcaLogDrvPreferredPath=cpqFcaLogDrvPreferredPath, cpqFcaAccelFailedBatteries=cpqFcaAccelFailedBatteries, cpqFcaAccelSerialNumber=cpqFcaAccelSerialNumber, cpqFcaPhyDrvThrViFunctTest1=cpqFcaPhyDrvThrViFunctTest1, cpqFcaCntlrWorldWideNodeName=cpqFcaCntlrWorldWideNodeName, cpqFcaPhyDrvBoxIndex=cpqFcaPhyDrvBoxIndex, cpqFcSwitchFWRev=cpqFcSwitchFWRev, cpqFcaPhyDrvRecvReadErrs=cpqFcaPhyDrvRecvReadErrs, cpqFcaPhyDrvFailureCode=cpqFcaPhyDrvFailureCode, cpqFcaCntlrBoxIndex=cpqFcaCntlrBoxIndex, cpqFcaMibCondition=cpqFcaMibCondition, cpqFcaCntlrStatusChange=cpqFcaCntlrStatusChange, cpqFcaSpareStatus=cpqFcaSpareStatus, cpqFcTapeCountersCntlrIndex=cpqFcTapeCountersCntlrIndex, cpqFcaLogDrvRebuildingPhyDrv=cpqFcaLogDrvRebuildingPhyDrv, cpqExtArrRsrcVolDisabledInstances=cpqExtArrRsrcVolDisabledInstances, cpqFcTapeLibraryScsiBus=cpqFcTapeLibraryScsiBus, cpqFcaPhyDrvUnsupportedDrive=cpqFcaPhyDrvUnsupportedDrive, cpqFcaSpareReplacedDrvBay=cpqFcaSpareReplacedDrvBay, cpqFcTapeLibraryTable=cpqFcTapeLibraryTable, cpqExtArrRsrcVolTotalSpace=cpqExtArrRsrcVolTotalSpace, cpqExtArrSnapshotRsrcVolIndex=cpqExtArrSnapshotRsrcVolIndex, cpqFcaAccelBatteryStatus=cpqFcaAccelBatteryStatus, cpqFcaPhyDrvType=cpqFcaPhyDrvType, cpqFcaLogDrvAvailSpares=cpqFcaLogDrvAvailSpares, cpqFcaPhyDrvBusNumber=cpqFcaPhyDrvBusNumber, cpqFcaAccelTotalMemory=cpqFcaAccelTotalMemory, cpqFcaHostCntlrSerialNumber=cpqFcaHostCntlrSerialNumber, cpqFcaAccelBadDataTrap=cpqFcaAccelBadDataTrap, cpqFcaLogDrvBoxIndex=cpqFcaLogDrvBoxIndex, cpqFcaHostCntlrStatusChange=cpqFcaHostCntlrStatusChange, cpqFcaCntlrRebuildPriority=cpqFcaCntlrRebuildPriority, cpqFcaPhyDrvCurrentWidth=cpqFcaPhyDrvCurrentWidth, cpqFcaLogDrvCurrentPath=cpqFcaLogDrvCurrentPath, cpqFcTapeDriveScsiTarget=cpqFcTapeDriveScsiTarget, cpqExtArrRsrcVolIndex=cpqExtArrRsrcVolIndex, cpqFcaLogDrvTable=cpqFcaLogDrvTable, cpqFcaPhyDrvThrViSpinupTime=cpqFcaPhyDrvThrViSpinupTime, cpqFcTapeDriveLibraryDrive=cpqFcTapeDriveLibraryDrive, cpqFcaPhyDrvFWRev=cpqFcaPhyDrvFWRev, cpqFcaPhyDrvMediaErrs=cpqFcaPhyDrvMediaErrs, cpqFcaHostCntlrEntry=cpqFcaHostCntlrEntry, cpqFcTapeDriveLocation=cpqFcTapeDriveLocation, cpqFcaPhyDrvModel=cpqFcaPhyDrvModel, cpqFcaPhyDrvThrViFunctTest3=cpqFcaPhyDrvThrViFunctTest3, cpqFcaPhyDrvBadTargetErrs=cpqFcaPhyDrvBadTargetErrs, cpqFcTapeLibraryRedundancy=cpqFcTapeLibraryRedundancy, cpqFcaPhyDrvStatus=cpqFcaPhyDrvStatus, cpqFcaPhyDrvBadRecvWrites=cpqFcaPhyDrvBadRecvWrites, cpqFcTapeDriveTable=cpqFcTapeDriveTable, cpqFcaHostCntlrStatus=cpqFcaHostCntlrStatus, cpqFcaCntlrBoxIoSlot=cpqFcaCntlrBoxIoSlot, cpqFcaPhyDrvPhyCount=cpqFcaPhyDrvPhyCount, cpqExtArrRsrcVolEntry=cpqExtArrRsrcVolEntry, cpqFcTapeCntlr=cpqFcTapeCntlr, cpqExtArrRsrcVolFreeNewSpace=cpqExtArrRsrcVolFreeNewSpace, cpqFcaLogDrvBlinkTime=cpqFcaLogDrvBlinkTime, cpqFcaCntlrEntry=cpqFcaCntlrEntry, cpqFcaMibRevMinor=cpqFcaMibRevMinor, cpqFcTapeCountersScsiBus=cpqFcTapeCountersScsiBus, cpqFcTapeCntlrWWN=cpqFcTapeCntlrWWN, cpqFcaPhyDrvThrFunctTest1=cpqFcaPhyDrvThrFunctTest1, cpqFcTapeDriveCleanTapeCount=cpqFcTapeDriveCleanTapeCount, cpqFcTapeLibraryLocation=cpqFcTapeLibraryLocation, cpqFcTapeDriveCleanReq=cpqFcTapeDriveCleanReq, cpqFcaPhyDrvSeeks=cpqFcaPhyDrvSeeks, cpqFcaPhyDrvSpinUpErrs=cpqFcaPhyDrvSpinUpErrs, cpqFcaPhyDrvHWrites=cpqFcaPhyDrvHWrites, cpqFcaHostCntlrTable=cpqFcaHostCntlrTable, cpqFcTapeCntlrCondition=cpqFcTapeCntlrCondition, cpqFcTapeDriveCleanTapeRepl=cpqFcTapeDriveCleanTapeRepl, cpqFcaHostCntlrHwLocation=cpqFcaHostCntlrHwLocation, cpqFcaCntlrBlinkTime=cpqFcaCntlrBlinkTime, cpqFcTapeDriveModel=cpqFcTapeDriveModel, cpqFcaAccelBadData=cpqFcaAccelBadData, cpqFcaPhyDrvSataVersion=cpqFcaPhyDrvSataVersion, cpqFcaPhyDrvHasMonInfo=cpqFcaPhyDrvHasMonInfo, cpqFcaHostCntlrModel=cpqFcaHostCntlrModel, cpqFcaMibRevMajor=cpqFcaMibRevMajor, cpqFcTapeDriveCurrentSpeed=cpqFcTapeDriveCurrentSpeed, cpqFcaSpareReplacedDrvBusNumber=cpqFcaSpareReplacedDrvBusNumber, cpqFcSwitchIpGateway=cpqFcSwitchIpGateway, cpqFcaOsCommonModuleName=cpqFcaOsCommonModuleName, cpqFcTapeComponent=cpqFcTapeComponent, cpqFcaSpareStatusChange=cpqFcaSpareStatusChange, cpqFcaOsCommonModuleEntry=cpqFcaOsCommonModuleEntry, cpqFcaSpareBay=cpqFcaSpareBay, cpqFcaHostCntlrIndex=cpqFcaHostCntlrIndex, cpqExtArrSnapshotBoxIndex=cpqExtArrSnapshotBoxIndex, cpqFcSwitchIpSubnet=cpqFcSwitchIpSubnet, cpqFcaLogDrvSpareReplaceMap=cpqFcaLogDrvSpareReplaceMap, cpqFcaPhyDrvThrFunctTest2=cpqFcaPhyDrvThrFunctTest2, cpqFcaHostCntlrWorldWideName=cpqFcaHostCntlrWorldWideName, cpqFcaPhyDrvBoxConnector=cpqFcaPhyDrvBoxConnector, cpqExtArrSnapshotEntry=cpqExtArrSnapshotEntry, cpqFcTapeCntlrIndex=cpqFcTapeCntlrIndex, cpqFcSwitchWorldWideNodeName=cpqFcSwitchWorldWideNodeName, cpqFcaHostCntlrOptionRomVersion=cpqFcaHostCntlrOptionRomVersion, cpqFcTapeLibraryScsiLun=cpqFcTapeLibraryScsiLun, cpqFcaPhyDrvEntry=cpqFcaPhyDrvEntry, cpqExtTapeLibraryDoorStatusChange=cpqExtTapeLibraryDoorStatusChange, cpqFcaCntlrFWRev=cpqFcaCntlrFWRev, cpqFcaPhyDrvFunctTest1=cpqFcaPhyDrvFunctTest1, cpqExtArrRsrcVolTable=cpqExtArrRsrcVolTable, cpqFcTapeLibraryCntlrIndex=cpqFcTapeLibraryCntlrIndex, cpqFcaAccelStatus=cpqFcaAccelStatus, cpqFcTapeDriveCleaningRequired=cpqFcTapeDriveCleaningRequired, cpqFcTapeCountersScsiLun=cpqFcTapeCountersScsiLun, cpqFcaLogDrvPercentRebuild=cpqFcaLogDrvPercentRebuild, cpqFcaPhyDrvHSeeks=cpqFcaPhyDrvHSeeks, cpqFcaPhyDrvFunctTest2=cpqFcaPhyDrvFunctTest2, cpqFcaCntlrSerialNumber=cpqFcaCntlrSerialNumber, cpqFca2PhyDrvStatusChange=cpqFca2PhyDrvStatusChange, cpqFcaPhyDrvRefHours=cpqFcaPhyDrvRefHours, cpqFcTapeLibraryStatHours=cpqFcTapeLibraryStatHours, cpqFcaSpareCondition=cpqFcaSpareCondition, cpqFcaPhyDrvFunctTest3=cpqFcaPhyDrvFunctTest3, cpqExtArrSnapshot=cpqExtArrSnapshot, cpqFcTapeLibraryHotSwap=cpqFcTapeLibraryHotSwap, cpqFcaPhyDrvSmartStatus=cpqFcaPhyDrvSmartStatus, cpqFcaCntlrActive=cpqFcaCntlrActive, cpqFcSwitchTable=cpqFcSwitchTable, cpqExtArrRsrcVolAllowCreation=cpqExtArrRsrcVolAllowCreation, cpqFcaLogDrvFaultTol=cpqFcaLogDrvFaultTol, cpqExtTapeDriveCleanTapeReplace=cpqExtTapeDriveCleanTapeReplace, cpqExtArrSnapshotIndex=cpqExtArrSnapshotIndex, cpqFca2AccelBatteryFailed=cpqFca2AccelBatteryFailed, cpqFcaLogDrvOsName=cpqFcaLogDrvOsName, cpqFcTapeCntlrOverallCondition=cpqFcTapeCntlrOverallCondition, cpqFcSwitchWorldWidePortName=cpqFcSwitchWorldWidePortName, cpqFcaAccelBatteryFailed=cpqFcaAccelBatteryFailed, cpqFcaPhyDrvAbortedCmds=cpqFcaPhyDrvAbortedCmds, cpqFcaPhyDrvIndex=cpqFcaPhyDrvIndex, cpqFcTapeCountersTable=cpqFcTapeCountersTable, cpqFcTapeCountersReWrites=cpqFcTapeCountersReWrites)
mibBuilder.exportSymbols("CPQFCA-MIB", cpqExtArrSnapshotDateTime=cpqExtArrSnapshotDateTime, cpqFcaPhyDrvStatusChange=cpqFcaPhyDrvStatusChange, cpqFcaPhyDrv=cpqFcaPhyDrv, cpqFcTapeDriveCurrentWidth=cpqFcTapeDriveCurrentWidth, cpqFcaPhyDrvThrUsedReallocs=cpqFcaPhyDrvThrUsedReallocs, cpqFcTapeLibraryDoorStatus=cpqFcTapeLibraryDoorStatus, cpqFcaLogDrvIndex=cpqFcaLogDrvIndex, cpqFcaSpareTable=cpqFcaSpareTable, cpqFca2AccelStatusChange=cpqFca2AccelStatusChange, cpqFcaPhyDrvHSeekErrs=cpqFcaPhyDrvHSeekErrs, cpqFcTapeCntlrEntry=cpqFcTapeCntlrEntry, cpqFcTapeCntlrStatusChange=cpqFcTapeCntlrStatusChange, cpqFcaPhyDrvCurrentSpeed=cpqFcaPhyDrvCurrentSpeed, cpqFcTapeLibraryCondition=cpqFcTapeLibraryCondition, cpqFcaSpareBoxIndex=cpqFcaSpareBoxIndex, cpqFcaSpareLocationString=cpqFcaSpareLocationString, cpqFcSwitchNetworkLinkStatus=cpqFcSwitchNetworkLinkStatus, cpqFcaOsCommonModuleIndex=cpqFcaOsCommonModuleIndex, cpqFcaPhyDrvNotReadyErrs=cpqFcaPhyDrvNotReadyErrs, cpqFcaPhyDrvWrites=cpqFcaPhyDrvWrites, cpqFcaLogDrvEntry=cpqFcaLogDrvEntry, cpqFcaPhyDrvHotPlugs=cpqFcaPhyDrvHotPlugs, cpqFcaLogDrvStatusChange=cpqFcaLogDrvStatusChange, cpqFcTapeCntlrType=cpqFcTapeCntlrType, cpqExtArrayLogDrvStatusChange=cpqExtArrayLogDrvStatusChange, cpqFcTapeDriveScsiBus=cpqFcTapeDriveScsiBus, cpqFcaPhyDrvOtherTimeouts=cpqFcaPhyDrvOtherTimeouts, cpqFcTapeDriveStatusChange=cpqFcTapeDriveStatusChange, cpqFcTapeLibraryScsiTarget=cpqFcTapeLibraryScsiTarget, cpqFcaLogDrvPhyDrvIDs=cpqFcaLogDrvPhyDrvIDs, cpqFcaPhyDrvPreFailMonitoring=cpqFcaPhyDrvPreFailMonitoring, cpqFcTapeCountersTotalBytes=cpqFcTapeCountersTotalBytes, cpqFcaPhyDrvSeekErrs=cpqFcaPhyDrvSeekErrs, cpqFcaAccelTable=cpqFcaAccelTable, cpqFcaOsCommonModuleTable=cpqFcaOsCommonModuleTable, cpqFcaAccelBoxIndex=cpqFcaAccelBoxIndex, cpqFcaPhyDrvNegotiatedLinkRate=cpqFcaPhyDrvNegotiatedLinkRate, cpqFcaSpareBusNumber=cpqFcaSpareBusNumber, cpqFcaHostCntlrFirmwareVersion=cpqFcaHostCntlrFirmwareVersion, cpqFcSwitchChassisSlot=cpqFcSwitchChassisSlot, cpqFcaLogDrvStripeSize=cpqFcaLogDrvStripeSize, cpqFcTapeLibraryStatus=cpqFcTapeLibraryStatus, cpqFca2CntlrStatusChange=cpqFca2CntlrStatusChange, cpqFcaHostCntlrCondition=cpqFcaHostCntlrCondition, cpqFcTapeDriveCleanTapeReplace=cpqFcTapeDriveCleanTapeReplace, cpqFca2AccelBadDataTrap=cpqFca2AccelBadDataTrap, cpqFcTapeLibraryTemperature=cpqFcTapeLibraryTemperature, cpqFcaLogDrvSnapshotSourceDrvIndex=cpqFcaLogDrvSnapshotSourceDrvIndex, cpqFcTapeLibraryOverallCondition=cpqFcTapeLibraryOverallCondition, cpqFcSwitchEntry=cpqFcSwitchEntry, cpqFcaPhyDrvThrEntry=cpqFcaPhyDrvThrEntry, cpqFcaPhyDrvTable=cpqFcaPhyDrvTable, cpqFcaPhyDrvPlacement=cpqFcaPhyDrvPlacement, cpqFcTapeLibraryFWRev=cpqFcTapeLibraryFWRev, cpqFcTapeCntlrSerialNumber=cpqFcTapeCntlrSerialNumber, cpqFcSwitchChassisIndex=cpqFcSwitchChassisIndex, cpqFcaInterface=cpqFcaInterface, cpqFcaHostCntlrOverallCondition=cpqFcaHostCntlrOverallCondition, cpqExtTapeLibraryStatusChange=cpqExtTapeLibraryStatusChange, cpqFcTapeLibraryStatusChange=cpqFcTapeLibraryStatusChange, cpqFcaSpareEntry=cpqFcaSpareEntry, cpqFcaPhyDrvLocationString=cpqFcaPhyDrvLocationString, cpqExtArrRsrcVolFreeActiveSpace=cpqExtArrRsrcVolFreeActiveSpace, cpqFcaLogDrv=cpqFcaLogDrv, cpqExtArrSnapshotType=cpqExtArrSnapshotType, cpqFcaComponent=cpqFcaComponent, cpqFcaOsCommonModuleDate=cpqFcaOsCommonModuleDate)
