#
# PySNMP MIB module CPQIDE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/dauren/projects/snmp-kmg/CPQIDE-MIB.mib
# Produced by pysmi-0.3.1 at Thu Aug  2 17:43:18 2018
# On host dauren-pc platform Linux version 4.15.0-29-generic by user dauren
# Using Python version 2.7.15rc1 (default, Apr 15 2018, 21:51:34) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, enterprises, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqIde = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14))
cpqIdeMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14, 1))
cpqIdeComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14, 2))
cpqIdeInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14, 2, 1))
cpqIdeIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14, 2, 2))
cpqIdeController = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14, 2, 3))
cpqIdeAtaDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14, 2, 4))
cpqIdeAtapiDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14, 2, 5))
cpqIdeLogicalDrive = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14, 2, 6))
cpqIdeOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 14, 2, 1, 4))
cpqIdeMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeMibRevMajor.setStatus('mandatory')
cpqIdeMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeMibRevMinor.setStatus('mandatory')
cpqIdeMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 14, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeMibCondition.setStatus('mandatory')
cpqIdeOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 14, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIdeOsCommonPollFreq.setStatus('mandatory')
cpqIdeOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 14, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqIdeOsCommonModuleTable.setStatus('deprecated')
cpqIdeOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 14, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQIDE-MIB", "cpqIdeOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqIdeOsCommonModuleEntry.setStatus('deprecated')
cpqIdeOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeOsCommonModuleIndex.setStatus('deprecated')
cpqIdeOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeOsCommonModuleName.setStatus('deprecated')
cpqIdeOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeOsCommonModuleVersion.setStatus('deprecated')
cpqIdeOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeOsCommonModuleDate.setStatus('deprecated')
cpqIdeOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeOsCommonModulePurpose.setStatus('deprecated')
cpqIdeIdentTable = MibTable((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1), )
if mibBuilder.loadTexts: cpqIdeIdentTable.setStatus('mandatory')
cpqIdeIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1), ).setIndexNames((0, "CPQIDE-MIB", "cpqIdeIdentIndex"))
if mibBuilder.loadTexts: cpqIdeIdentEntry.setStatus('mandatory')
cpqIdeIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentIndex.setStatus('mandatory')
cpqIdeIdentModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentModel.setStatus('mandatory')
cpqIdeIdentSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentSerNum.setStatus('mandatory')
cpqIdeIdentFWVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentFWVers.setStatus('mandatory')
cpqIdeIdentCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentCondition.setStatus('deprecated')
cpqIdeIdentErrorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentErrorNumber.setStatus('mandatory')
cpqIdeIdentType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)).clone(namedValues=NamedValues(("other", 1), ("disk", 2), ("tape", 3), ("printer", 4), ("processor", 5), ("wormDrive", 6), ("cd-rom", 7), ("scanner", 8), ("optical", 9), ("jukeBox", 10), ("commDev", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentType.setStatus('mandatory')
cpqIdeIdentTypeExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("pdcd", 2), ("removableDisk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentTypeExtended.setStatus('mandatory')
cpqIdeIdentCondition2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentCondition2.setStatus('mandatory')
cpqIdeIdentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("preFailureDegraded", 3), ("ultraAtaDegraded", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentStatus.setStatus('mandatory')
cpqIdeIdentUltraAtaAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("other", 1), ("noNotSupportedByDeviceAndController", 2), ("noNotSupportedByDevice", 3), ("noNotSupportedByController", 4), ("noDisabledInSetup", 5), ("yesEnabledInSetup", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeIdentUltraAtaAvailability.setStatus('mandatory')
cpqIdeControllerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1), )
if mibBuilder.loadTexts: cpqIdeControllerTable.setStatus('mandatory')
cpqIdeControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1), ).setIndexNames((0, "CPQIDE-MIB", "cpqIdeControllerIndex"))
if mibBuilder.loadTexts: cpqIdeControllerEntry.setStatus('mandatory')
cpqIdeControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerIndex.setStatus('mandatory')
cpqIdeControllerOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerOverallCondition.setStatus('mandatory')
cpqIdeControllerModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerModel.setStatus('mandatory')
cpqIdeControllerFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerFwRev.setStatus('mandatory')
cpqIdeControllerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerSlot.setStatus('mandatory')
cpqIdeControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerStatus.setStatus('mandatory')
cpqIdeControllerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerCondition.setStatus('mandatory')
cpqIdeControllerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerSerialNumber.setStatus('mandatory')
cpqIdeControllerHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerHwLocation.setStatus('optional')
cpqIdeControllerPciLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeControllerPciLocation.setStatus('optional')
cpqIdeAtaDiskTable = MibTable((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1), )
if mibBuilder.loadTexts: cpqIdeAtaDiskTable.setStatus('mandatory')
cpqIdeAtaDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1), ).setIndexNames((0, "CPQIDE-MIB", "cpqIdeAtaDiskControllerIndex"), (0, "CPQIDE-MIB", "cpqIdeAtaDiskIndex"))
if mibBuilder.loadTexts: cpqIdeAtaDiskEntry.setStatus('mandatory')
cpqIdeAtaDiskControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskControllerIndex.setStatus('mandatory')
cpqIdeAtaDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskIndex.setStatus('mandatory')
cpqIdeAtaDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskModel.setStatus('mandatory')
cpqIdeAtaDiskFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskFwRev.setStatus('mandatory')
cpqIdeAtaDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskSerialNumber.setStatus('mandatory')
cpqIdeAtaDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("smartError", 3), ("failed", 4), ("ssdWearOut", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskStatus.setStatus('mandatory')
cpqIdeAtaDiskCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskCondition.setStatus('mandatory')
cpqIdeAtaDiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskCapacity.setStatus('mandatory')
cpqIdeAtaDiskSmartEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskSmartEnabled.setStatus('mandatory')
cpqIdeAtaDiskTransferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("other", 1), ("pioMode0", 2), ("pioMode1", 3), ("pioMode2", 4), ("pioMode3", 5), ("pioMode4", 6), ("dmaMode0", 7), ("dmaMode1", 8), ("dmaMode2", 9), ("ultraDmaMode0", 10), ("ultraDmaMode1", 11), ("ultraDmaMode2", 12), ("ultraDmaMode3", 13), ("ultraDmaMode4", 14), ("ultraDmaMode5", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskTransferMode.setStatus('mandatory')
cpqIdeAtaDiskChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("channel0", 2), ("channel1", 3), ("serial", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskChannel.setStatus('mandatory')
cpqIdeAtaDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)).clone(namedValues=NamedValues(("other", 1), ("device0", 2), ("device1", 3), ("sataDevice0", 4), ("sataDevice1", 5), ("sataDevice2", 6), ("sataDevice3", 7), ("sataDevice4", 8), ("sataDevice5", 9), ("sataDevice6", 10), ("sataDevice7", 11), ("bay1", 21), ("bay2", 22), ("bay3", 23), ("bay4", 24), ("bay5", 25), ("bay6", 26), ("bay7", 27), ("bay8", 28), ("bay9", 29), ("bay10", 30), ("bay11", 31), ("bay12", 32), ("bay13", 33), ("bay14", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskNumber.setStatus('mandatory')
cpqIdeAtaDiskLogicalDriveMember = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskLogicalDriveMember.setStatus('mandatory')
cpqIdeAtaDiskIsSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskIsSpare.setStatus('mandatory')
cpqIdeAtaDiskOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskOsName.setStatus('mandatory')
cpqIdeAtaDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("ata", 2), ("sata", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskType.setStatus('mandatory')
cpqIdeAtaDiskSataVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("sataOne", 2), ("sataTwo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskSataVersion.setStatus('mandatory')
cpqIdeAtaDiskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("rotatingPlatters", 2), ("solidState", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskMediaType.setStatus('mandatory')
cpqIdeAtaDiskSSDWearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fiftySixDayThreshold", 3), ("fivePercentThreshold", 4), ("twoPercentThreshold", 5), ("ssdWearOut", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskSSDWearStatus.setStatus('mandatory')
cpqIdeAtaDiskPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskPowerOnHours.setStatus('mandatory')
cpqIdeAtaDiskSSDPercntEndrnceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskSSDPercntEndrnceUsed.setStatus('mandatory')
cpqIdeAtaDiskSSDEstTimeRemainingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskSSDEstTimeRemainingHours.setStatus('mandatory')
cpqIdeAtaDiskCurrTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskCurrTemperature.setStatus('mandatory')
cpqIdeAtaDiskTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskTemperatureThreshold.setStatus('mandatory')
cpqIdeAtaDiskMaximumOperatingTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskMaximumOperatingTemp.setStatus('mandatory')
cpqIdeAtaDiskDestructiveOperatingTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 4, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtaDiskDestructiveOperatingTemp.setStatus('mandatory')
cpqIdeAtapiDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1), )
if mibBuilder.loadTexts: cpqIdeAtapiDeviceTable.setStatus('mandatory')
cpqIdeAtapiDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1, 1), ).setIndexNames((0, "CPQIDE-MIB", "cpqIdeAtapiDeviceControllerIndex"), (0, "CPQIDE-MIB", "cpqIdeAtapiDeviceIndex"))
if mibBuilder.loadTexts: cpqIdeAtapiDeviceEntry.setStatus('mandatory')
cpqIdeAtapiDeviceControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtapiDeviceControllerIndex.setStatus('mandatory')
cpqIdeAtapiDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtapiDeviceIndex.setStatus('mandatory')
cpqIdeAtapiDeviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtapiDeviceModel.setStatus('mandatory')
cpqIdeAtapiDeviceFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtapiDeviceFwRev.setStatus('mandatory')
cpqIdeAtapiDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)).clone(namedValues=NamedValues(("other", 1), ("disk", 2), ("tape", 3), ("printer", 4), ("processor", 5), ("wormDrive", 6), ("cd-rom", 7), ("scanner", 8), ("optical", 9), ("jukeBox", 10), ("commDev", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtapiDeviceType.setStatus('mandatory')
cpqIdeAtapiDeviceTypeExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("pdcd", 2), ("removableDisk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtapiDeviceTypeExtended.setStatus('mandatory')
cpqIdeAtapiDeviceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("channel0", 2), ("channel1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtapiDeviceChannel.setStatus('mandatory')
cpqIdeAtapiDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("device0", 2), ("device1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeAtapiDeviceNumber.setStatus('mandatory')
cpqIdeLogicalDriveTable = MibTable((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1), )
if mibBuilder.loadTexts: cpqIdeLogicalDriveTable.setStatus('mandatory')
cpqIdeLogicalDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1), ).setIndexNames((0, "CPQIDE-MIB", "cpqIdeLogicalDriveControllerIndex"), (0, "CPQIDE-MIB", "cpqIdeLogicalDriveIndex"))
if mibBuilder.loadTexts: cpqIdeLogicalDriveEntry.setStatus('mandatory')
cpqIdeLogicalDriveControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveControllerIndex.setStatus('mandatory')
cpqIdeLogicalDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveIndex.setStatus('mandatory')
cpqIdeLogicalDriveRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("other", 1), ("raid0", 2), ("raid1", 3), ("raid0plus1", 4), ("raid5", 5), ("raid15", 6), ("volume", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveRaidLevel.setStatus('mandatory')
cpqIdeLogicalDriveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveCapacity.setStatus('mandatory')
cpqIdeLogicalDriveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("rebuilding", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveStatus.setStatus('mandatory')
cpqIdeLogicalDriveCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveCondition.setStatus('mandatory')
cpqIdeLogicalDriveDiskIds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveDiskIds.setStatus('mandatory')
cpqIdeLogicalDriveStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveStripeSize.setStatus('mandatory')
cpqIdeLogicalDriveSpareIds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveSpareIds.setStatus('mandatory')
cpqIdeLogicalDriveRebuildingDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveRebuildingDisk.setStatus('mandatory')
cpqIdeLogicalDriveOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 14, 2, 6, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIdeLogicalDriveOsName.setStatus('mandatory')
cpqIdeDriveDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,14001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDE-MIB", "cpqIdeIdentIndex"))
cpqIdeDriveOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,14002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDE-MIB", "cpqIdeIdentIndex"))
cpqIdeDriveUltraAtaDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,14003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDE-MIB", "cpqIdeIdentIndex"))
cpqIdeAtaDiskStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,14004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDE-MIB", "cpqIdeAtaDiskControllerIndex"), ("CPQIDE-MIB", "cpqIdeAtaDiskIndex"), ("CPQIDE-MIB", "cpqIdeAtaDiskModel"), ("CPQIDE-MIB", "cpqIdeAtaDiskFwRev"), ("CPQIDE-MIB", "cpqIdeAtaDiskSerialNumber"), ("CPQIDE-MIB", "cpqIdeAtaDiskStatus"), ("CPQIDE-MIB", "cpqIdeAtaDiskChannel"), ("CPQIDE-MIB", "cpqIdeAtaDiskNumber"))
cpqIdeLogicalDriveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,14005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDE-MIB", "cpqIdeControllerModel"), ("CPQIDE-MIB", "cpqIdeControllerSlot"), ("CPQIDE-MIB", "cpqIdeLogicalDriveControllerIndex"), ("CPQIDE-MIB", "cpqIdeLogicalDriveIndex"), ("CPQIDE-MIB", "cpqIdeLogicalDriveStatus"))
cpqIdeAtaDiskSSDWearStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,14006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDE-MIB", "cpqIdeAtaDiskControllerIndex"), ("CPQIDE-MIB", "cpqIdeAtaDiskIndex"), ("CPQIDE-MIB", "cpqIdeAtaDiskModel"), ("CPQIDE-MIB", "cpqIdeAtaDiskFwRev"), ("CPQIDE-MIB", "cpqIdeAtaDiskSerialNumber"), ("CPQIDE-MIB", "cpqIdeAtaDiskSSDWearStatus"), ("CPQIDE-MIB", "cpqIdeAtaDiskChannel"), ("CPQIDE-MIB", "cpqIdeAtaDiskNumber"))
mibBuilder.exportSymbols("CPQIDE-MIB", cpqIdeAtapiDeviceIndex=cpqIdeAtapiDeviceIndex, cpqIdeIdentEntry=cpqIdeIdentEntry, cpqIdeOsCommonModuleEntry=cpqIdeOsCommonModuleEntry, cpqIdeAtapiDevice=cpqIdeAtapiDevice, cpqIdeOsCommonModuleVersion=cpqIdeOsCommonModuleVersion, cpqIdeAtaDiskSerialNumber=cpqIdeAtaDiskSerialNumber, cpqIdeAtaDiskStatus=cpqIdeAtaDiskStatus, cpqIdeOsCommonModuleName=cpqIdeOsCommonModuleName, cpqIdeControllerCondition=cpqIdeControllerCondition, cpqIdeAtaDiskSataVersion=cpqIdeAtaDiskSataVersion, cpqIdeAtapiDeviceChannel=cpqIdeAtapiDeviceChannel, cpqIdeMibCondition=cpqIdeMibCondition, cpqIdeInterface=cpqIdeInterface, cpqIdeAtaDiskEntry=cpqIdeAtaDiskEntry, cpqIdeOsCommonModuleIndex=cpqIdeOsCommonModuleIndex, cpqIdeIdentModel=cpqIdeIdentModel, cpqIdeMibRev=cpqIdeMibRev, cpqIdeLogicalDriveDiskIds=cpqIdeLogicalDriveDiskIds, cpqIdeAtaDiskSSDPercntEndrnceUsed=cpqIdeAtaDiskSSDPercntEndrnceUsed, cpqIdeAtaDiskCondition=cpqIdeAtaDiskCondition, cpqIdeDriveUltraAtaDegraded=cpqIdeDriveUltraAtaDegraded, cpqIdeController=cpqIdeController, cpqIdeLogicalDrive=cpqIdeLogicalDrive, cpqIdeAtaDiskTransferMode=cpqIdeAtaDiskTransferMode, cpqIdeLogicalDriveRebuildingDisk=cpqIdeLogicalDriveRebuildingDisk, cpqIdeAtaDiskMaximumOperatingTemp=cpqIdeAtaDiskMaximumOperatingTemp, cpqIdeDriveDegraded=cpqIdeDriveDegraded, cpqIdeAtaDiskFwRev=cpqIdeAtaDiskFwRev, cpqIdeLogicalDriveStatus=cpqIdeLogicalDriveStatus, cpqIdeLogicalDriveControllerIndex=cpqIdeLogicalDriveControllerIndex, cpqIdeOsCommonModuleDate=cpqIdeOsCommonModuleDate, cpqIdeIdentUltraAtaAvailability=cpqIdeIdentUltraAtaAvailability, cpqIdeAtapiDeviceModel=cpqIdeAtapiDeviceModel, cpqIdeAtaDiskMediaType=cpqIdeAtaDiskMediaType, cpqIdeAtaDiskLogicalDriveMember=cpqIdeAtaDiskLogicalDriveMember, cpqIdeAtaDiskIsSpare=cpqIdeAtaDiskIsSpare, cpqIdeAtaDiskSSDWearStatusChange=cpqIdeAtaDiskSSDWearStatusChange, cpqIdeAtaDiskStatusChange=cpqIdeAtaDiskStatusChange, cpqIdeOsCommonModulePurpose=cpqIdeOsCommonModulePurpose, cpqIdeOsCommon=cpqIdeOsCommon, cpqIdeOsCommonModuleTable=cpqIdeOsCommonModuleTable, cpqIdeAtaDisk=cpqIdeAtaDisk, cpqIdeControllerIndex=cpqIdeControllerIndex, cpqIdeLogicalDriveEntry=cpqIdeLogicalDriveEntry, cpqIdeControllerPciLocation=cpqIdeControllerPciLocation, cpqIdeAtapiDeviceTable=cpqIdeAtapiDeviceTable, cpqIdeLogicalDriveSpareIds=cpqIdeLogicalDriveSpareIds, cpqIdeControllerOverallCondition=cpqIdeControllerOverallCondition, cpqIdeAtaDiskSSDEstTimeRemainingHours=cpqIdeAtaDiskSSDEstTimeRemainingHours, cpqIdeControllerFwRev=cpqIdeControllerFwRev, cpqIdeControllerTable=cpqIdeControllerTable, cpqIdeControllerHwLocation=cpqIdeControllerHwLocation, cpqIdeOsCommonPollFreq=cpqIdeOsCommonPollFreq, cpqIdeAtapiDeviceType=cpqIdeAtapiDeviceType, cpqIdeComponent=cpqIdeComponent, cpqIdeAtaDiskModel=cpqIdeAtaDiskModel, cpqIdeAtapiDeviceNumber=cpqIdeAtapiDeviceNumber, cpqIdeMibRevMinor=cpqIdeMibRevMinor, cpqIdeAtaDiskPowerOnHours=cpqIdeAtaDiskPowerOnHours, cpqIdeIdentFWVers=cpqIdeIdentFWVers, cpqIdeIdentCondition=cpqIdeIdentCondition, cpqIdeLogicalDriveTable=cpqIdeLogicalDriveTable, cpqIdeIdentCondition2=cpqIdeIdentCondition2, cpqIdeAtaDiskSSDWearStatus=cpqIdeAtaDiskSSDWearStatus, cpqIdeDriveOk=cpqIdeDriveOk, cpqIdeIdent=cpqIdeIdent, cpqIdeAtaDiskCapacity=cpqIdeAtaDiskCapacity, cpqIdeIdentErrorNumber=cpqIdeIdentErrorNumber, cpqIdeLogicalDriveCondition=cpqIdeLogicalDriveCondition, cpqIdeControllerEntry=cpqIdeControllerEntry, cpqIdeAtaDiskCurrTemperature=cpqIdeAtaDiskCurrTemperature, cpqIde=cpqIde, cpqIdeLogicalDriveStatusChange=cpqIdeLogicalDriveStatusChange, cpqIdeAtapiDeviceControllerIndex=cpqIdeAtapiDeviceControllerIndex, cpqIdeAtaDiskTemperatureThreshold=cpqIdeAtaDiskTemperatureThreshold, cpqIdeMibRevMajor=cpqIdeMibRevMajor, cpqIdeIdentType=cpqIdeIdentType, cpqIdeAtaDiskType=cpqIdeAtaDiskType, cpqIdeIdentTable=cpqIdeIdentTable, cpqIdeAtaDiskControllerIndex=cpqIdeAtaDiskControllerIndex, cpqIdeIdentSerNum=cpqIdeIdentSerNum, cpqIdeAtaDiskTable=cpqIdeAtaDiskTable, cpqIdeLogicalDriveStripeSize=cpqIdeLogicalDriveStripeSize, cpqIdeControllerStatus=cpqIdeControllerStatus, cpqIdeAtapiDeviceEntry=cpqIdeAtapiDeviceEntry, cpqIdeAtaDiskDestructiveOperatingTemp=cpqIdeAtaDiskDestructiveOperatingTemp, cpqIdeIdentIndex=cpqIdeIdentIndex, cpqIdeControllerSlot=cpqIdeControllerSlot, cpqIdeIdentTypeExtended=cpqIdeIdentTypeExtended, cpqIdeAtaDiskNumber=cpqIdeAtaDiskNumber, cpqIdeAtapiDeviceFwRev=cpqIdeAtapiDeviceFwRev, cpqIdeAtaDiskSmartEnabled=cpqIdeAtaDiskSmartEnabled, cpqIdeAtaDiskOsName=cpqIdeAtaDiskOsName, cpqIdeAtaDiskIndex=cpqIdeAtaDiskIndex, cpqIdeLogicalDriveRaidLevel=cpqIdeLogicalDriveRaidLevel, cpqIdeLogicalDriveIndex=cpqIdeLogicalDriveIndex, cpqIdeIdentStatus=cpqIdeIdentStatus, cpqIdeControllerSerialNumber=cpqIdeControllerSerialNumber, cpqIdeControllerModel=cpqIdeControllerModel, cpqIdeLogicalDriveCapacity=cpqIdeLogicalDriveCapacity, cpqIdeAtaDiskChannel=cpqIdeAtaDiskChannel, cpqIdeLogicalDriveOsName=cpqIdeLogicalDriveOsName, cpqIdeAtapiDeviceTypeExtended=cpqIdeAtapiDeviceTypeExtended)
